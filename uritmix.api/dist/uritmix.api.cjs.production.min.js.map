{"version":3,"file":"uritmix.api.cjs.production.min.js","sources":["../src/api/base.ts","../src/index.tsx","../src/api/common.ts","../src/api/api.ts","../src/api/configuration.ts"],"sourcesContent":["/* tslint:disable */\n/* eslint-disable */\n/**\n * Uritmix.Api\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport { Configuration } from \"./configuration\";\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';\n\nexport const BASE_PATH = \"http://localhost\".replace(/\\/+$/, \"\");\n\n/**\n *\n * @export\n */\nexport const COLLECTION_FORMATS = {\n    csv: \",\",\n    ssv: \" \",\n    tsv: \"\\t\",\n    pipes: \"|\",\n};\n\n/**\n *\n * @export\n * @interface RequestArgs\n */\nexport interface RequestArgs {\n    url: string;\n    options: AxiosRequestConfig;\n}\n\n/**\n *\n * @export\n * @class BaseAPI\n */\nexport class BaseAPI {\n    protected configuration: Configuration | undefined;\n\n    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected axios: AxiosInstance = globalAxios) {\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = configuration.basePath || this.basePath;\n        }\n    }\n};\n\n/**\n *\n * @export\n * @class RequiredError\n * @extends {Error}\n */\nexport class RequiredError extends Error {\n    name: \"RequiredError\" = \"RequiredError\";\n    constructor(public field: string, msg?: string) {\n        super(msg);\n    }\n}\n","import * as api from './api';\nconst API_URL = process.env.REACT_API_URL || 'http://localhost:3000';\n\nexport namespace Api {\n    export const authApi = new api.AuthApi(\n        new api.Configuration({\n            basePath: API_URL\n        })\n    );\n\n    export const personApi = new api.PersonApi(\n        new api.Configuration({\n            basePath: API_URL\n        })\n    );\n\n    export const roomApi = new api.RoomApi(\n        new api.Configuration({\n            basePath: API_URL\n        })\n    );\n\n    export const lessonApi = new api.LessonApi(\n        new api.Configuration({\n            basePath: API_URL\n        })\n    );\n\n    export const abonnementApi = new api.AbonnementApi(\n        new api.Configuration({\n            basePath: API_URL\n        })\n    );\n\n    export const eventApi = new api.EventApi(\n        new api.Configuration({\n            basePath: API_URL\n        })\n    );\n}\n\nexport * as dto from './api';","/* tslint:disable */\n/* eslint-disable */\n/**\n * Uritmix.Api\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport { Configuration } from \"./configuration\";\nimport { RequiredError, RequestArgs } from \"./base\";\nimport { AxiosInstance, AxiosResponse } from 'axios';\n\n/**\n *\n * @export\n */\nexport const DUMMY_BASE_URL = 'https://example.com'\n\n/**\n *\n * @throws {RequiredError}\n * @export\n */\nexport const assertParamExists = function (functionName: string, paramName: string, paramValue: unknown) {\n    if (paramValue === null || paramValue === undefined) {\n        throw new RequiredError(paramName, `Required parameter ${paramName} was null or undefined when calling ${functionName}.`);\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setApiKeyToObject = async function (object: any, keyParamName: string, configuration?: Configuration) {\n    if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n            ? await configuration.apiKey(keyParamName)\n            : await configuration.apiKey;\n        object[keyParamName] = localVarApiKeyValue;\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setBasicAuthToObject = function (object: any, configuration?: Configuration) {\n    if (configuration && (configuration.username || configuration.password)) {\n        object[\"auth\"] = { username: configuration.username, password: configuration.password };\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setBearerAuthToObject = async function (object: any, configuration?: Configuration) {\n    if (configuration && configuration.accessToken) {\n        const accessToken = typeof configuration.accessToken === 'function'\n            ? await configuration.accessToken()\n            : await configuration.accessToken;\n        object[\"Authorization\"] = \"Bearer \" + accessToken;\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setOAuthToObject = async function (object: any, name: string, scopes: string[], configuration?: Configuration) {\n    if (configuration && configuration.accessToken) {\n        const localVarAccessTokenValue = typeof configuration.accessToken === 'function'\n            ? await configuration.accessToken(name, scopes)\n            : await configuration.accessToken;\n        object[\"Authorization\"] = \"Bearer \" + localVarAccessTokenValue;\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setSearchParams = function (url: URL, ...objects: any[]) {\n    const searchParams = new URLSearchParams(url.search);\n    for (const object of objects) {\n        for (const key in object) {\n            if (Array.isArray(object[key])) {\n                searchParams.delete(key);\n                for (const item of object[key]) {\n                    searchParams.append(key, item);\n                }\n            } else {\n                searchParams.set(key, object[key]);\n            }\n        }\n    }\n    url.search = searchParams.toString();\n}\n\n/**\n *\n * @export\n */\nexport const serializeDataIfNeeded = function (value: any, requestOptions: any, configuration?: Configuration) {\n    const nonString = typeof value !== 'string';\n    const needsSerialization = nonString && configuration && configuration.isJsonMime\n        ? configuration.isJsonMime(requestOptions.headers['Content-Type'])\n        : nonString;\n    return needsSerialization\n        ? JSON.stringify(value !== undefined ? value : {})\n        : (value || \"\");\n}\n\n/**\n *\n * @export\n */\nexport const toPathString = function (url: URL) {\n    return url.pathname + url.search + url.hash\n}\n\n/**\n *\n * @export\n */\nexport const createRequestFunction = function (axiosArgs: RequestArgs, globalAxios: AxiosInstance, BASE_PATH: string, configuration?: Configuration) {\n    return <T = unknown, R = AxiosResponse<T>>(axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n        const axiosRequestArgs = {...axiosArgs.options, url: (configuration?.basePath || basePath) + axiosArgs.url};\n        return axios.request<T, R>(axiosRequestArgs);\n    };\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Uritmix.Api\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport { Configuration } from './configuration';\nimport globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';\n\n/**\n * \n * @export\n * @interface Abonnement\n */\nexport interface Abonnement {\n    /**\n     * \n     * @type {number}\n     * @memberof Abonnement\n     */\n    'id'?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof Abonnement\n     */\n    'name'?: string;\n    /**\n     * \n     * @type {AbonnementValidityView}\n     * @memberof Abonnement\n     */\n    'validity'?: AbonnementValidityView;\n    /**\n     * \n     * @type {number}\n     * @memberof Abonnement\n     */\n    'maxNumberOfVisits'?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof Abonnement\n     */\n    'basePrice'?: number;\n    /**\n     * \n     * @type {DiscountView}\n     * @memberof Abonnement\n     */\n    'maxDiscount'?: DiscountView;\n    /**\n     * \n     * @type {Array<Lesson>}\n     * @memberof Abonnement\n     */\n    'lessons'?: Array<Lesson>;\n}\n/**\n * \n * @export\n * @enum {string}\n */\n\nexport const AbonnementValidityView = {\n    OneDay: 'OneDay',\n    OneMonth: 'OneMonth',\n    ThreeMonths: 'ThreeMonths',\n    HalfYear: 'HalfYear',\n    Year: 'Year'\n} as const;\n\nexport type AbonnementValidityView = typeof AbonnementValidityView[keyof typeof AbonnementValidityView];\n\n\n/**\n * \n * @export\n * @interface ActivateAuth\n */\nexport interface ActivateAuth {\n    /**\n     * \n     * @type {string}\n     * @memberof ActivateAuth\n     */\n    'confirmCode'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ActivateAuth\n     */\n    'password'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ActivateAuth\n     */\n    'passwordConfirm'?: string;\n}\n/**\n * \n * @export\n * @interface Auth\n */\nexport interface Auth {\n    /**\n     * \n     * @type {AuthRoleView}\n     * @memberof Auth\n     */\n    'role'?: AuthRoleView;\n    /**\n     * \n     * @type {AuthStatusView}\n     * @memberof Auth\n     */\n    'status'?: AuthStatusView;\n    /**\n     * \n     * @type {string}\n     * @memberof Auth\n     */\n    'email'?: string;\n}\n/**\n * \n * @export\n * @enum {string}\n */\n\nexport const AuthRoleView = {\n    Manager: 'Manager',\n    Admin: 'Admin',\n    Server: 'Server'\n} as const;\n\nexport type AuthRoleView = typeof AuthRoleView[keyof typeof AuthRoleView];\n\n\n/**\n * \n * @export\n * @enum {string}\n */\n\nexport const AuthStatusView = {\n    NotActivated: 'NotActivated',\n    Activated: 'Activated',\n    Blocked: 'Blocked'\n} as const;\n\nexport type AuthStatusView = typeof AuthStatusView[keyof typeof AuthStatusView];\n\n\n/**\n * \n * @export\n * @interface CreateAbonnement\n */\nexport interface CreateAbonnement {\n    /**\n     * \n     * @type {string}\n     * @memberof CreateAbonnement\n     */\n    'name'?: string;\n    /**\n     * \n     * @type {AbonnementValidityView}\n     * @memberof CreateAbonnement\n     */\n    'validity'?: AbonnementValidityView;\n    /**\n     * \n     * @type {number}\n     * @memberof CreateAbonnement\n     */\n    'maxNumberOfVisits'?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof CreateAbonnement\n     */\n    'basePrice'?: number;\n    /**\n     * \n     * @type {DiscountView}\n     * @memberof CreateAbonnement\n     */\n    'maxDiscount'?: DiscountView;\n    /**\n     * \n     * @type {Array<number>}\n     * @memberof CreateAbonnement\n     */\n    'lessonIds'?: Array<number>;\n}\n/**\n * \n * @export\n * @interface CreateAuth\n */\nexport interface CreateAuth {\n    /**\n     * \n     * @type {string}\n     * @memberof CreateAuth\n     */\n    'email'?: string;\n    /**\n     * \n     * @type {AuthRoleView}\n     * @memberof CreateAuth\n     */\n    'role'?: AuthRoleView;\n}\n/**\n * \n * @export\n * @interface CreateEvent\n */\nexport interface CreateEvent {\n    /**\n     * \n     * @type {number}\n     * @memberof CreateEvent\n     */\n    'lessonId'?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof CreateEvent\n     */\n    'roomId'?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateEvent\n     */\n    'startDate'?: string;\n}\n/**\n * \n * @export\n * @interface CreateLesson\n */\nexport interface CreateLesson {\n    /**\n     * \n     * @type {string}\n     * @memberof CreateLesson\n     */\n    'name'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateLesson\n     */\n    'description'?: string | null;\n    /**\n     * \n     * @type {number}\n     * @memberof CreateLesson\n     */\n    'trainerId'?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof CreateLesson\n     */\n    'durationMinute'?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof CreateLesson\n     */\n    'basePrice'?: number;\n}\n/**\n * \n * @export\n * @interface CreatePerson\n */\nexport interface CreatePerson {\n    /**\n     * \n     * @type {string}\n     * @memberof CreatePerson\n     */\n    'firstName'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreatePerson\n     */\n    'lastName'?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof CreatePerson\n     */\n    'isTrainer'?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof CreatePerson\n     */\n    'description'?: string | null;\n}\n/**\n * \n * @export\n * @interface CreateRoom\n */\nexport interface CreateRoom {\n    /**\n     * \n     * @type {string}\n     * @memberof CreateRoom\n     */\n    'name'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateRoom\n     */\n    'description'?: string | null;\n}\n/**\n * \n * @export\n * @enum {string}\n */\n\nexport const DiscountView = {\n    D0: 'D0',\n    D5: 'D5',\n    D10: 'D10',\n    D15: 'D15',\n    D20: 'D20',\n    D25: 'D25',\n    D30: 'D30',\n    D40: 'D40',\n    D50: 'D50',\n    D60: 'D60',\n    D70: 'D70',\n    D80: 'D80',\n    D90: 'D90'\n} as const;\n\nexport type DiscountView = typeof DiscountView[keyof typeof DiscountView];\n\n\n/**\n * \n * @export\n * @interface EditAbonnement\n */\nexport interface EditAbonnement {\n    /**\n     * \n     * @type {string}\n     * @memberof EditAbonnement\n     */\n    'name'?: string;\n    /**\n     * \n     * @type {AbonnementValidityView}\n     * @memberof EditAbonnement\n     */\n    'validity'?: AbonnementValidityView;\n    /**\n     * \n     * @type {number}\n     * @memberof EditAbonnement\n     */\n    'maxNumberOfVisits'?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof EditAbonnement\n     */\n    'basePrice'?: number;\n    /**\n     * \n     * @type {DiscountView}\n     * @memberof EditAbonnement\n     */\n    'maxDiscount'?: DiscountView;\n    /**\n     * \n     * @type {Array<number>}\n     * @memberof EditAbonnement\n     */\n    'lessonIds'?: Array<number>;\n}\n/**\n * \n * @export\n * @interface EditEvent\n */\nexport interface EditEvent {\n    /**\n     * \n     * @type {number}\n     * @memberof EditEvent\n     */\n    'lessonId'?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof EditEvent\n     */\n    'roomId'?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof EditEvent\n     */\n    'startDate'?: string;\n}\n/**\n * \n * @export\n * @interface EditLesson\n */\nexport interface EditLesson {\n    /**\n     * \n     * @type {string}\n     * @memberof EditLesson\n     */\n    'name'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof EditLesson\n     */\n    'description'?: string | null;\n    /**\n     * \n     * @type {number}\n     * @memberof EditLesson\n     */\n    'trainerId'?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof EditLesson\n     */\n    'durationMinute'?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof EditLesson\n     */\n    'basePrice'?: number;\n}\n/**\n * \n * @export\n * @interface EditPerson\n */\nexport interface EditPerson {\n    /**\n     * \n     * @type {string}\n     * @memberof EditPerson\n     */\n    'firstName'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof EditPerson\n     */\n    'lastName'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof EditPerson\n     */\n    'description'?: string | null;\n}\n/**\n * \n * @export\n * @interface EditRoom\n */\nexport interface EditRoom {\n    /**\n     * \n     * @type {string}\n     * @memberof EditRoom\n     */\n    'name'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof EditRoom\n     */\n    'description'?: string | null;\n}\n/**\n * \n * @export\n * @interface ErrorResponse\n */\nexport interface ErrorResponse {\n    /**\n     * \n     * @type {string}\n     * @memberof ErrorResponse\n     */\n    'error'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ErrorResponse\n     */\n    'code'?: string;\n}\n/**\n * \n * @export\n * @interface Event\n */\nexport interface Event {\n    /**\n     * \n     * @type {number}\n     * @memberof Event\n     */\n    'id'?: number;\n    /**\n     * \n     * @type {EventTypeView}\n     * @memberof Event\n     */\n    'type'?: EventTypeView;\n    /**\n     * \n     * @type {number}\n     * @memberof Event\n     */\n    'lessonId'?: number;\n    /**\n     * \n     * @type {Lesson}\n     * @memberof Event\n     */\n    'lesson'?: Lesson;\n    /**\n     * \n     * @type {number}\n     * @memberof Event\n     */\n    'roomId'?: number;\n    /**\n     * \n     * @type {Room}\n     * @memberof Event\n     */\n    'room'?: Room;\n    /**\n     * \n     * @type {string}\n     * @memberof Event\n     */\n    'startDate'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Event\n     */\n    'endDate'?: string;\n}\n/**\n * \n * @export\n * @enum {string}\n */\n\nexport const EventTypeView = {\n    NotStarted: 'NotStarted',\n    InProgress: 'InProgress',\n    Finished: 'Finished'\n} as const;\n\nexport type EventTypeView = typeof EventTypeView[keyof typeof EventTypeView];\n\n\n/**\n * \n * @export\n * @interface Lesson\n */\nexport interface Lesson {\n    /**\n     * \n     * @type {number}\n     * @memberof Lesson\n     */\n    'id'?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof Lesson\n     */\n    'name'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Lesson\n     */\n    'description'?: string | null;\n    /**\n     * \n     * @type {Person}\n     * @memberof Lesson\n     */\n    'trainer'?: Person;\n    /**\n     * \n     * @type {number}\n     * @memberof Lesson\n     */\n    'durationMinute'?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof Lesson\n     */\n    'basePrice'?: number;\n}\n/**\n * \n * @export\n * @interface LoggedPerson\n */\nexport interface LoggedPerson {\n    /**\n     * \n     * @type {string}\n     * @memberof LoggedPerson\n     */\n    'firstName'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof LoggedPerson\n     */\n    'lastName'?: string;\n    /**\n     * \n     * @type {AuthRoleView}\n     * @memberof LoggedPerson\n     */\n    'role'?: AuthRoleView;\n    /**\n     * \n     * @type {string}\n     * @memberof LoggedPerson\n     */\n    'email'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof LoggedPerson\n     */\n    'accessToken'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof LoggedPerson\n     */\n    'refreshToken'?: string;\n}\n/**\n * \n * @export\n * @interface LoginUser\n */\nexport interface LoginUser {\n    /**\n     * \n     * @type {string}\n     * @memberof LoginUser\n     */\n    'email'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof LoginUser\n     */\n    'password'?: string;\n}\n/**\n * \n * @export\n * @interface Logout\n */\nexport interface Logout {\n    /**\n     * \n     * @type {string}\n     * @memberof Logout\n     */\n    'token'?: string;\n}\n/**\n * \n * @export\n * @interface PaginatedAbonnement\n */\nexport interface PaginatedAbonnement {\n    /**\n     * \n     * @type {number}\n     * @memberof PaginatedAbonnement\n     */\n    'pageNumber'?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof PaginatedAbonnement\n     */\n    'pageSize'?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof PaginatedAbonnement\n     */\n    'totalPages'?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof PaginatedAbonnement\n     */\n    'totalRecords'?: number;\n    /**\n     * \n     * @type {boolean}\n     * @memberof PaginatedAbonnement\n     */\n    'nextPageExists'?: boolean;\n    /**\n     * \n     * @type {Array<Abonnement>}\n     * @memberof PaginatedAbonnement\n     */\n    'results'?: Array<Abonnement> | null;\n}\n/**\n * \n * @export\n * @interface PaginatedLesson\n */\nexport interface PaginatedLesson {\n    /**\n     * \n     * @type {number}\n     * @memberof PaginatedLesson\n     */\n    'pageNumber'?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof PaginatedLesson\n     */\n    'pageSize'?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof PaginatedLesson\n     */\n    'totalPages'?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof PaginatedLesson\n     */\n    'totalRecords'?: number;\n    /**\n     * \n     * @type {boolean}\n     * @memberof PaginatedLesson\n     */\n    'nextPageExists'?: boolean;\n    /**\n     * \n     * @type {Array<Lesson>}\n     * @memberof PaginatedLesson\n     */\n    'results'?: Array<Lesson> | null;\n}\n/**\n * \n * @export\n * @interface PaginatedPerson\n */\nexport interface PaginatedPerson {\n    /**\n     * \n     * @type {number}\n     * @memberof PaginatedPerson\n     */\n    'pageNumber'?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof PaginatedPerson\n     */\n    'pageSize'?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof PaginatedPerson\n     */\n    'totalPages'?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof PaginatedPerson\n     */\n    'totalRecords'?: number;\n    /**\n     * \n     * @type {boolean}\n     * @memberof PaginatedPerson\n     */\n    'nextPageExists'?: boolean;\n    /**\n     * \n     * @type {Array<Person>}\n     * @memberof PaginatedPerson\n     */\n    'results'?: Array<Person> | null;\n}\n/**\n * \n * @export\n * @interface PaginatedRoom\n */\nexport interface PaginatedRoom {\n    /**\n     * \n     * @type {number}\n     * @memberof PaginatedRoom\n     */\n    'pageNumber'?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof PaginatedRoom\n     */\n    'pageSize'?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof PaginatedRoom\n     */\n    'totalPages'?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof PaginatedRoom\n     */\n    'totalRecords'?: number;\n    /**\n     * \n     * @type {boolean}\n     * @memberof PaginatedRoom\n     */\n    'nextPageExists'?: boolean;\n    /**\n     * \n     * @type {Array<Room>}\n     * @memberof PaginatedRoom\n     */\n    'results'?: Array<Room> | null;\n}\n/**\n * \n * @export\n * @interface PaginatedSoldAbonnement\n */\nexport interface PaginatedSoldAbonnement {\n    /**\n     * \n     * @type {number}\n     * @memberof PaginatedSoldAbonnement\n     */\n    'pageNumber'?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof PaginatedSoldAbonnement\n     */\n    'pageSize'?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof PaginatedSoldAbonnement\n     */\n    'totalPages'?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof PaginatedSoldAbonnement\n     */\n    'totalRecords'?: number;\n    /**\n     * \n     * @type {boolean}\n     * @memberof PaginatedSoldAbonnement\n     */\n    'nextPageExists'?: boolean;\n    /**\n     * \n     * @type {Array<SoldAbonnement>}\n     * @memberof PaginatedSoldAbonnement\n     */\n    'results'?: Array<SoldAbonnement> | null;\n}\n/**\n * \n * @export\n * @interface PasswordReset\n */\nexport interface PasswordReset {\n    /**\n     * \n     * @type {string}\n     * @memberof PasswordReset\n     */\n    'confirmCode'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof PasswordReset\n     */\n    'password'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof PasswordReset\n     */\n    'passwordConfirm'?: string;\n}\n/**\n * \n * @export\n * @interface PasswordResetQuery\n */\nexport interface PasswordResetQuery {\n    /**\n     * \n     * @type {string}\n     * @memberof PasswordResetQuery\n     */\n    'email'?: string;\n}\n/**\n * \n * @export\n * @interface Person\n */\nexport interface Person {\n    /**\n     * \n     * @type {number}\n     * @memberof Person\n     */\n    'id'?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof Person\n     */\n    'firstName'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Person\n     */\n    'lastName'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Person\n     */\n    'description'?: string | null;\n    /**\n     * \n     * @type {boolean}\n     * @memberof Person\n     */\n    'isTrainer'?: boolean;\n    /**\n     * \n     * @type {boolean}\n     * @memberof Person\n     */\n    'haveAuth'?: boolean;\n    /**\n     * \n     * @type {Auth}\n     * @memberof Person\n     */\n    'auth'?: Auth;\n}\n/**\n * \n * @export\n * @enum {string}\n */\n\nexport const PersonTypeView = {\n    All: 'All',\n    Trainer: 'Trainer',\n    Account: 'Account'\n} as const;\n\nexport type PersonTypeView = typeof PersonTypeView[keyof typeof PersonTypeView];\n\n\n/**\n * \n * @export\n * @interface PropertyError\n */\nexport interface PropertyError {\n    /**\n     * \n     * @type {string}\n     * @memberof PropertyError\n     */\n    'name'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof PropertyError\n     */\n    'error'?: string;\n}\n/**\n * \n * @export\n * @interface Refresh\n */\nexport interface Refresh {\n    /**\n     * \n     * @type {string}\n     * @memberof Refresh\n     */\n    'token'?: string;\n}\n/**\n * \n * @export\n * @interface ResultAbonnement\n */\nexport interface ResultAbonnement {\n    /**\n     * \n     * @type {Abonnement}\n     * @memberof ResultAbonnement\n     */\n    'result'?: Abonnement;\n    /**\n     * \n     * @type {string}\n     * @memberof ResultAbonnement\n     */\n    'error'?: string | null;\n    /**\n     * \n     * @type {boolean}\n     * @memberof ResultAbonnement\n     */\n    'ok'?: boolean;\n}\n/**\n * \n * @export\n * @interface ResultEvent\n */\nexport interface ResultEvent {\n    /**\n     * \n     * @type {Event}\n     * @memberof ResultEvent\n     */\n    'result'?: Event;\n    /**\n     * \n     * @type {string}\n     * @memberof ResultEvent\n     */\n    'error'?: string | null;\n    /**\n     * \n     * @type {boolean}\n     * @memberof ResultEvent\n     */\n    'ok'?: boolean;\n}\n/**\n * \n * @export\n * @interface ResultLesson\n */\nexport interface ResultLesson {\n    /**\n     * \n     * @type {Lesson}\n     * @memberof ResultLesson\n     */\n    'result'?: Lesson;\n    /**\n     * \n     * @type {string}\n     * @memberof ResultLesson\n     */\n    'error'?: string | null;\n    /**\n     * \n     * @type {boolean}\n     * @memberof ResultLesson\n     */\n    'ok'?: boolean;\n}\n/**\n * \n * @export\n * @interface ResultListEvent\n */\nexport interface ResultListEvent {\n    /**\n     * \n     * @type {Array<Event>}\n     * @memberof ResultListEvent\n     */\n    'result'?: Array<Event> | null;\n    /**\n     * \n     * @type {string}\n     * @memberof ResultListEvent\n     */\n    'error'?: string | null;\n    /**\n     * \n     * @type {boolean}\n     * @memberof ResultListEvent\n     */\n    'ok'?: boolean;\n}\n/**\n * \n * @export\n * @interface ResultLoggedPerson\n */\nexport interface ResultLoggedPerson {\n    /**\n     * \n     * @type {LoggedPerson}\n     * @memberof ResultLoggedPerson\n     */\n    'result'?: LoggedPerson;\n    /**\n     * \n     * @type {string}\n     * @memberof ResultLoggedPerson\n     */\n    'error'?: string | null;\n    /**\n     * \n     * @type {boolean}\n     * @memberof ResultLoggedPerson\n     */\n    'ok'?: boolean;\n}\n/**\n * \n * @export\n * @interface ResultPaginatedAbonnement\n */\nexport interface ResultPaginatedAbonnement {\n    /**\n     * \n     * @type {PaginatedAbonnement}\n     * @memberof ResultPaginatedAbonnement\n     */\n    'result'?: PaginatedAbonnement;\n    /**\n     * \n     * @type {string}\n     * @memberof ResultPaginatedAbonnement\n     */\n    'error'?: string | null;\n    /**\n     * \n     * @type {boolean}\n     * @memberof ResultPaginatedAbonnement\n     */\n    'ok'?: boolean;\n}\n/**\n * \n * @export\n * @interface ResultPaginatedLesson\n */\nexport interface ResultPaginatedLesson {\n    /**\n     * \n     * @type {PaginatedLesson}\n     * @memberof ResultPaginatedLesson\n     */\n    'result'?: PaginatedLesson;\n    /**\n     * \n     * @type {string}\n     * @memberof ResultPaginatedLesson\n     */\n    'error'?: string | null;\n    /**\n     * \n     * @type {boolean}\n     * @memberof ResultPaginatedLesson\n     */\n    'ok'?: boolean;\n}\n/**\n * \n * @export\n * @interface ResultPaginatedPerson\n */\nexport interface ResultPaginatedPerson {\n    /**\n     * \n     * @type {PaginatedPerson}\n     * @memberof ResultPaginatedPerson\n     */\n    'result'?: PaginatedPerson;\n    /**\n     * \n     * @type {string}\n     * @memberof ResultPaginatedPerson\n     */\n    'error'?: string | null;\n    /**\n     * \n     * @type {boolean}\n     * @memberof ResultPaginatedPerson\n     */\n    'ok'?: boolean;\n}\n/**\n * \n * @export\n * @interface ResultPaginatedRoom\n */\nexport interface ResultPaginatedRoom {\n    /**\n     * \n     * @type {PaginatedRoom}\n     * @memberof ResultPaginatedRoom\n     */\n    'result'?: PaginatedRoom;\n    /**\n     * \n     * @type {string}\n     * @memberof ResultPaginatedRoom\n     */\n    'error'?: string | null;\n    /**\n     * \n     * @type {boolean}\n     * @memberof ResultPaginatedRoom\n     */\n    'ok'?: boolean;\n}\n/**\n * \n * @export\n * @interface ResultPaginatedSoldAbonnement\n */\nexport interface ResultPaginatedSoldAbonnement {\n    /**\n     * \n     * @type {PaginatedSoldAbonnement}\n     * @memberof ResultPaginatedSoldAbonnement\n     */\n    'result'?: PaginatedSoldAbonnement;\n    /**\n     * \n     * @type {string}\n     * @memberof ResultPaginatedSoldAbonnement\n     */\n    'error'?: string | null;\n    /**\n     * \n     * @type {boolean}\n     * @memberof ResultPaginatedSoldAbonnement\n     */\n    'ok'?: boolean;\n}\n/**\n * \n * @export\n * @interface ResultPerson\n */\nexport interface ResultPerson {\n    /**\n     * \n     * @type {Person}\n     * @memberof ResultPerson\n     */\n    'result'?: Person;\n    /**\n     * \n     * @type {string}\n     * @memberof ResultPerson\n     */\n    'error'?: string | null;\n    /**\n     * \n     * @type {boolean}\n     * @memberof ResultPerson\n     */\n    'ok'?: boolean;\n}\n/**\n * \n * @export\n * @interface ResultRoom\n */\nexport interface ResultRoom {\n    /**\n     * \n     * @type {Room}\n     * @memberof ResultRoom\n     */\n    'result'?: Room;\n    /**\n     * \n     * @type {string}\n     * @memberof ResultRoom\n     */\n    'error'?: string | null;\n    /**\n     * \n     * @type {boolean}\n     * @memberof ResultRoom\n     */\n    'ok'?: boolean;\n}\n/**\n * \n * @export\n * @interface ResultSoldAbonnement\n */\nexport interface ResultSoldAbonnement {\n    /**\n     * \n     * @type {SoldAbonnement}\n     * @memberof ResultSoldAbonnement\n     */\n    'result'?: SoldAbonnement;\n    /**\n     * \n     * @type {string}\n     * @memberof ResultSoldAbonnement\n     */\n    'error'?: string | null;\n    /**\n     * \n     * @type {boolean}\n     * @memberof ResultSoldAbonnement\n     */\n    'ok'?: boolean;\n}\n/**\n * \n * @export\n * @interface ResultUnit\n */\nexport interface ResultUnit {\n    /**\n     * \n     * @type {object}\n     * @memberof ResultUnit\n     */\n    'result'?: object;\n    /**\n     * \n     * @type {string}\n     * @memberof ResultUnit\n     */\n    'error'?: string | null;\n    /**\n     * \n     * @type {boolean}\n     * @memberof ResultUnit\n     */\n    'ok'?: boolean;\n}\n/**\n * \n * @export\n * @interface Room\n */\nexport interface Room {\n    /**\n     * \n     * @type {number}\n     * @memberof Room\n     */\n    'id'?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof Room\n     */\n    'name'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Room\n     */\n    'description'?: string | null;\n}\n/**\n * \n * @export\n * @interface SaleAbonnement\n */\nexport interface SaleAbonnement {\n    /**\n     * \n     * @type {number}\n     * @memberof SaleAbonnement\n     */\n    'personId'?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof SaleAbonnement\n     */\n    'abonnementId'?: number;\n    /**\n     * \n     * @type {DiscountView}\n     * @memberof SaleAbonnement\n     */\n    'discount'?: DiscountView;\n}\n/**\n * \n * @export\n * @interface SoldAbonnement\n */\nexport interface SoldAbonnement {\n    /**\n     * \n     * @type {number}\n     * @memberof SoldAbonnement\n     */\n    'id'?: number;\n    /**\n     * \n     * @type {boolean}\n     * @memberof SoldAbonnement\n     */\n    'active'?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof SoldAbonnement\n     */\n    'dateSale'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SoldAbonnement\n     */\n    'dateExpiration'?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof SoldAbonnement\n     */\n    'priceSold'?: number;\n    /**\n     * \n     * @type {DiscountView}\n     * @memberof SoldAbonnement\n     */\n    'discount'?: DiscountView;\n    /**\n     * \n     * @type {number}\n     * @memberof SoldAbonnement\n     */\n    'visitCounter'?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof SoldAbonnement\n     */\n    'name'?: string;\n    /**\n     * \n     * @type {AbonnementValidityView}\n     * @memberof SoldAbonnement\n     */\n    'validity'?: AbonnementValidityView;\n    /**\n     * \n     * @type {number}\n     * @memberof SoldAbonnement\n     */\n    'maxNumberOfVisits'?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof SoldAbonnement\n     */\n    'basePrice'?: number;\n    /**\n     * \n     * @type {Array<Lesson>}\n     * @memberof SoldAbonnement\n     */\n    'lessons'?: Array<Lesson>;\n}\n/**\n * \n * @export\n * @interface ValidError\n */\nexport interface ValidError {\n    /**\n     * \n     * @type {Array<PropertyError>}\n     * @memberof ValidError\n     */\n    'properties'?: Array<PropertyError>;\n}\n\n/**\n * AbonnementApi - axios parameter creator\n * @export\n */\nexport const AbonnementApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @summary Возвращает абоннемент по id\n         * @param {number} abonnementId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1AbonnementAbonnementIdGet: async (abonnementId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'abonnementId' is not null or undefined\n            assertParamExists('apiV1AbonnementAbonnementIdGet', 'abonnementId', abonnementId)\n            const localVarPath = `/api/v1/abonnement/{abonnementId}`\n                .replace(`{${\"abonnementId\"}}`, encodeURIComponent(String(abonnementId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            await setApiKeyToObject(localVarHeaderParameter, \"Authorization\", configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Обновляет данные абонимента\n         * @param {number} abonnementId \n         * @param {EditAbonnement} [editAbonnement] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1AbonnementAbonnementIdPut: async (abonnementId: number, editAbonnement?: EditAbonnement, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'abonnementId' is not null or undefined\n            assertParamExists('apiV1AbonnementAbonnementIdPut', 'abonnementId', abonnementId)\n            const localVarPath = `/api/v1/abonnement/{abonnementId}`\n                .replace(`{${\"abonnementId\"}}`, encodeURIComponent(String(abonnementId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            await setApiKeyToObject(localVarHeaderParameter, \"Authorization\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(editAbonnement, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Возвращает список абониментов\n         * @param {number} pageSize \n         * @param {number} pageNumber \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1AbonnementGet: async (pageSize: number, pageNumber: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'pageSize' is not null or undefined\n            assertParamExists('apiV1AbonnementGet', 'pageSize', pageSize)\n            // verify required parameter 'pageNumber' is not null or undefined\n            assertParamExists('apiV1AbonnementGet', 'pageNumber', pageNumber)\n            const localVarPath = `/api/v1/abonnement`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            await setApiKeyToObject(localVarHeaderParameter, \"Authorization\", configuration)\n\n            if (pageSize !== undefined) {\n                localVarQueryParameter['pageSize'] = pageSize;\n            }\n\n            if (pageNumber !== undefined) {\n                localVarQueryParameter['pageNumber'] = pageNumber;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Создает новый абонимент\n         * @param {CreateAbonnement} [createAbonnement] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1AbonnementPost: async (createAbonnement?: CreateAbonnement, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/v1/abonnement`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            await setApiKeyToObject(localVarHeaderParameter, \"Authorization\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(createAbonnement, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Возвращает список купленных абониментов пользователя\n         * @param {number} personId \n         * @param {number} pageSize \n         * @param {number} pageNumber \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1AbonnementSoldPersonIdGet: async (personId: number, pageSize: number, pageNumber: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'personId' is not null or undefined\n            assertParamExists('apiV1AbonnementSoldPersonIdGet', 'personId', personId)\n            // verify required parameter 'pageSize' is not null or undefined\n            assertParamExists('apiV1AbonnementSoldPersonIdGet', 'pageSize', pageSize)\n            // verify required parameter 'pageNumber' is not null or undefined\n            assertParamExists('apiV1AbonnementSoldPersonIdGet', 'pageNumber', pageNumber)\n            const localVarPath = `/api/v1/abonnement/sold/{personId}`\n                .replace(`{${\"personId\"}}`, encodeURIComponent(String(personId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            await setApiKeyToObject(localVarHeaderParameter, \"Authorization\", configuration)\n\n            if (pageSize !== undefined) {\n                localVarQueryParameter['pageSize'] = pageSize;\n            }\n\n            if (pageNumber !== undefined) {\n                localVarQueryParameter['pageNumber'] = pageNumber;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Продажа абонимента\n         * @param {SaleAbonnement} [saleAbonnement] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1AbonnementSoldPost: async (saleAbonnement?: SaleAbonnement, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/v1/abonnement/sold`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            await setApiKeyToObject(localVarHeaderParameter, \"Authorization\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(saleAbonnement, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * AbonnementApi - functional programming interface\n * @export\n */\nexport const AbonnementApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = AbonnementApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * \n         * @summary Возвращает абоннемент по id\n         * @param {number} abonnementId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiV1AbonnementAbonnementIdGet(abonnementId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultAbonnement>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AbonnementAbonnementIdGet(abonnementId, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Обновляет данные абонимента\n         * @param {number} abonnementId \n         * @param {EditAbonnement} [editAbonnement] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiV1AbonnementAbonnementIdPut(abonnementId: number, editAbonnement?: EditAbonnement, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultAbonnement>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AbonnementAbonnementIdPut(abonnementId, editAbonnement, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Возвращает список абониментов\n         * @param {number} pageSize \n         * @param {number} pageNumber \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiV1AbonnementGet(pageSize: number, pageNumber: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultPaginatedAbonnement>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AbonnementGet(pageSize, pageNumber, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Создает новый абонимент\n         * @param {CreateAbonnement} [createAbonnement] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiV1AbonnementPost(createAbonnement?: CreateAbonnement, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultAbonnement>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AbonnementPost(createAbonnement, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Возвращает список купленных абониментов пользователя\n         * @param {number} personId \n         * @param {number} pageSize \n         * @param {number} pageNumber \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiV1AbonnementSoldPersonIdGet(personId: number, pageSize: number, pageNumber: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultPaginatedSoldAbonnement>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AbonnementSoldPersonIdGet(personId, pageSize, pageNumber, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Продажа абонимента\n         * @param {SaleAbonnement} [saleAbonnement] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiV1AbonnementSoldPost(saleAbonnement?: SaleAbonnement, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultSoldAbonnement>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AbonnementSoldPost(saleAbonnement, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    }\n};\n\n/**\n * AbonnementApi - factory interface\n * @export\n */\nexport const AbonnementApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = AbonnementApiFp(configuration)\n    return {\n        /**\n         * \n         * @summary Возвращает абоннемент по id\n         * @param {number} abonnementId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1AbonnementAbonnementIdGet(abonnementId: number, options?: any): AxiosPromise<ResultAbonnement> {\n            return localVarFp.apiV1AbonnementAbonnementIdGet(abonnementId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Обновляет данные абонимента\n         * @param {number} abonnementId \n         * @param {EditAbonnement} [editAbonnement] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1AbonnementAbonnementIdPut(abonnementId: number, editAbonnement?: EditAbonnement, options?: any): AxiosPromise<ResultAbonnement> {\n            return localVarFp.apiV1AbonnementAbonnementIdPut(abonnementId, editAbonnement, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Возвращает список абониментов\n         * @param {number} pageSize \n         * @param {number} pageNumber \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1AbonnementGet(pageSize: number, pageNumber: number, options?: any): AxiosPromise<ResultPaginatedAbonnement> {\n            return localVarFp.apiV1AbonnementGet(pageSize, pageNumber, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Создает новый абонимент\n         * @param {CreateAbonnement} [createAbonnement] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1AbonnementPost(createAbonnement?: CreateAbonnement, options?: any): AxiosPromise<ResultAbonnement> {\n            return localVarFp.apiV1AbonnementPost(createAbonnement, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Возвращает список купленных абониментов пользователя\n         * @param {number} personId \n         * @param {number} pageSize \n         * @param {number} pageNumber \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1AbonnementSoldPersonIdGet(personId: number, pageSize: number, pageNumber: number, options?: any): AxiosPromise<ResultPaginatedSoldAbonnement> {\n            return localVarFp.apiV1AbonnementSoldPersonIdGet(personId, pageSize, pageNumber, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Продажа абонимента\n         * @param {SaleAbonnement} [saleAbonnement] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1AbonnementSoldPost(saleAbonnement?: SaleAbonnement, options?: any): AxiosPromise<ResultSoldAbonnement> {\n            return localVarFp.apiV1AbonnementSoldPost(saleAbonnement, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * AbonnementApi - object-oriented interface\n * @export\n * @class AbonnementApi\n * @extends {BaseAPI}\n */\nexport class AbonnementApi extends BaseAPI {\n    /**\n     * \n     * @summary Возвращает абоннемент по id\n     * @param {number} abonnementId \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AbonnementApi\n     */\n    public apiV1AbonnementAbonnementIdGet(abonnementId: number, options?: AxiosRequestConfig) {\n        return AbonnementApiFp(this.configuration).apiV1AbonnementAbonnementIdGet(abonnementId, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Обновляет данные абонимента\n     * @param {number} abonnementId \n     * @param {EditAbonnement} [editAbonnement] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AbonnementApi\n     */\n    public apiV1AbonnementAbonnementIdPut(abonnementId: number, editAbonnement?: EditAbonnement, options?: AxiosRequestConfig) {\n        return AbonnementApiFp(this.configuration).apiV1AbonnementAbonnementIdPut(abonnementId, editAbonnement, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Возвращает список абониментов\n     * @param {number} pageSize \n     * @param {number} pageNumber \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AbonnementApi\n     */\n    public apiV1AbonnementGet(pageSize: number, pageNumber: number, options?: AxiosRequestConfig) {\n        return AbonnementApiFp(this.configuration).apiV1AbonnementGet(pageSize, pageNumber, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Создает новый абонимент\n     * @param {CreateAbonnement} [createAbonnement] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AbonnementApi\n     */\n    public apiV1AbonnementPost(createAbonnement?: CreateAbonnement, options?: AxiosRequestConfig) {\n        return AbonnementApiFp(this.configuration).apiV1AbonnementPost(createAbonnement, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Возвращает список купленных абониментов пользователя\n     * @param {number} personId \n     * @param {number} pageSize \n     * @param {number} pageNumber \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AbonnementApi\n     */\n    public apiV1AbonnementSoldPersonIdGet(personId: number, pageSize: number, pageNumber: number, options?: AxiosRequestConfig) {\n        return AbonnementApiFp(this.configuration).apiV1AbonnementSoldPersonIdGet(personId, pageSize, pageNumber, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Продажа абонимента\n     * @param {SaleAbonnement} [saleAbonnement] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AbonnementApi\n     */\n    public apiV1AbonnementSoldPost(saleAbonnement?: SaleAbonnement, options?: AxiosRequestConfig) {\n        return AbonnementApiFp(this.configuration).apiV1AbonnementSoldPost(saleAbonnement, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n\n/**\n * AuthApi - axios parameter creator\n * @export\n */\nexport const AuthApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @summary Активация созданного пользователя\n         * @param {ActivateAuth} [activateAuth] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1AuthActivatePost: async (activateAuth?: ActivateAuth, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/v1/auth/activate`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(activateAuth, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Авторизация пользователя\n         * @param {LoginUser} [loginUser] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1AuthLoginPost: async (loginUser?: LoginUser, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/v1/auth/login`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(loginUser, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Разлогин пользователя\n         * @param {Logout} [logout] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1AuthLogoutPost: async (logout?: Logout, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/v1/auth/logout`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(logout, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Смена пароля на основе токена отправленного на почту\n         * @param {PasswordReset} [passwordReset] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1AuthPasswordResetPost: async (passwordReset?: PasswordReset, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/v1/auth/password-reset`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(passwordReset, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Запрос на смену пароля\n         * @param {PasswordResetQuery} [passwordResetQuery] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1AuthPasswordResetQueryPost: async (passwordResetQuery?: PasswordResetQuery, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/v1/auth/password-reset-query`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(passwordResetQuery, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Создание аккаунта для пользователя\n         * @param {number} personId \n         * @param {CreateAuth} [createAuth] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1AuthPersonIdPost: async (personId: number, createAuth?: CreateAuth, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'personId' is not null or undefined\n            assertParamExists('apiV1AuthPersonIdPost', 'personId', personId)\n            const localVarPath = `/api/v1/auth/{personId}`\n                .replace(`{${\"personId\"}}`, encodeURIComponent(String(personId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            await setApiKeyToObject(localVarHeaderParameter, \"Authorization\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(createAuth, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Получение нового token с помощью refresh token\n         * @param {Refresh} [refresh] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1AuthRefreshPost: async (refresh?: Refresh, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/v1/auth/refresh`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(refresh, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * AuthApi - functional programming interface\n * @export\n */\nexport const AuthApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * \n         * @summary Активация созданного пользователя\n         * @param {ActivateAuth} [activateAuth] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiV1AuthActivatePost(activateAuth?: ActivateAuth, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultUnit>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AuthActivatePost(activateAuth, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Авторизация пользователя\n         * @param {LoginUser} [loginUser] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiV1AuthLoginPost(loginUser?: LoginUser, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultLoggedPerson>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AuthLoginPost(loginUser, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Разлогин пользователя\n         * @param {Logout} [logout] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiV1AuthLogoutPost(logout?: Logout, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultUnit>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AuthLogoutPost(logout, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Смена пароля на основе токена отправленного на почту\n         * @param {PasswordReset} [passwordReset] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiV1AuthPasswordResetPost(passwordReset?: PasswordReset, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultUnit>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AuthPasswordResetPost(passwordReset, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Запрос на смену пароля\n         * @param {PasswordResetQuery} [passwordResetQuery] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiV1AuthPasswordResetQueryPost(passwordResetQuery?: PasswordResetQuery, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultUnit>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AuthPasswordResetQueryPost(passwordResetQuery, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Создание аккаунта для пользователя\n         * @param {number} personId \n         * @param {CreateAuth} [createAuth] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiV1AuthPersonIdPost(personId: number, createAuth?: CreateAuth, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultUnit>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AuthPersonIdPost(personId, createAuth, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Получение нового token с помощью refresh token\n         * @param {Refresh} [refresh] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiV1AuthRefreshPost(refresh?: Refresh, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultLoggedPerson>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AuthRefreshPost(refresh, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    }\n};\n\n/**\n * AuthApi - factory interface\n * @export\n */\nexport const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = AuthApiFp(configuration)\n    return {\n        /**\n         * \n         * @summary Активация созданного пользователя\n         * @param {ActivateAuth} [activateAuth] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1AuthActivatePost(activateAuth?: ActivateAuth, options?: any): AxiosPromise<ResultUnit> {\n            return localVarFp.apiV1AuthActivatePost(activateAuth, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Авторизация пользователя\n         * @param {LoginUser} [loginUser] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1AuthLoginPost(loginUser?: LoginUser, options?: any): AxiosPromise<ResultLoggedPerson> {\n            return localVarFp.apiV1AuthLoginPost(loginUser, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Разлогин пользователя\n         * @param {Logout} [logout] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1AuthLogoutPost(logout?: Logout, options?: any): AxiosPromise<ResultUnit> {\n            return localVarFp.apiV1AuthLogoutPost(logout, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Смена пароля на основе токена отправленного на почту\n         * @param {PasswordReset} [passwordReset] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1AuthPasswordResetPost(passwordReset?: PasswordReset, options?: any): AxiosPromise<ResultUnit> {\n            return localVarFp.apiV1AuthPasswordResetPost(passwordReset, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Запрос на смену пароля\n         * @param {PasswordResetQuery} [passwordResetQuery] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1AuthPasswordResetQueryPost(passwordResetQuery?: PasswordResetQuery, options?: any): AxiosPromise<ResultUnit> {\n            return localVarFp.apiV1AuthPasswordResetQueryPost(passwordResetQuery, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Создание аккаунта для пользователя\n         * @param {number} personId \n         * @param {CreateAuth} [createAuth] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1AuthPersonIdPost(personId: number, createAuth?: CreateAuth, options?: any): AxiosPromise<ResultUnit> {\n            return localVarFp.apiV1AuthPersonIdPost(personId, createAuth, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Получение нового token с помощью refresh token\n         * @param {Refresh} [refresh] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1AuthRefreshPost(refresh?: Refresh, options?: any): AxiosPromise<ResultLoggedPerson> {\n            return localVarFp.apiV1AuthRefreshPost(refresh, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * AuthApi - object-oriented interface\n * @export\n * @class AuthApi\n * @extends {BaseAPI}\n */\nexport class AuthApi extends BaseAPI {\n    /**\n     * \n     * @summary Активация созданного пользователя\n     * @param {ActivateAuth} [activateAuth] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AuthApi\n     */\n    public apiV1AuthActivatePost(activateAuth?: ActivateAuth, options?: AxiosRequestConfig) {\n        return AuthApiFp(this.configuration).apiV1AuthActivatePost(activateAuth, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Авторизация пользователя\n     * @param {LoginUser} [loginUser] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AuthApi\n     */\n    public apiV1AuthLoginPost(loginUser?: LoginUser, options?: AxiosRequestConfig) {\n        return AuthApiFp(this.configuration).apiV1AuthLoginPost(loginUser, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Разлогин пользователя\n     * @param {Logout} [logout] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AuthApi\n     */\n    public apiV1AuthLogoutPost(logout?: Logout, options?: AxiosRequestConfig) {\n        return AuthApiFp(this.configuration).apiV1AuthLogoutPost(logout, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Смена пароля на основе токена отправленного на почту\n     * @param {PasswordReset} [passwordReset] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AuthApi\n     */\n    public apiV1AuthPasswordResetPost(passwordReset?: PasswordReset, options?: AxiosRequestConfig) {\n        return AuthApiFp(this.configuration).apiV1AuthPasswordResetPost(passwordReset, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Запрос на смену пароля\n     * @param {PasswordResetQuery} [passwordResetQuery] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AuthApi\n     */\n    public apiV1AuthPasswordResetQueryPost(passwordResetQuery?: PasswordResetQuery, options?: AxiosRequestConfig) {\n        return AuthApiFp(this.configuration).apiV1AuthPasswordResetQueryPost(passwordResetQuery, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Создание аккаунта для пользователя\n     * @param {number} personId \n     * @param {CreateAuth} [createAuth] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AuthApi\n     */\n    public apiV1AuthPersonIdPost(personId: number, createAuth?: CreateAuth, options?: AxiosRequestConfig) {\n        return AuthApiFp(this.configuration).apiV1AuthPersonIdPost(personId, createAuth, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Получение нового token с помощью refresh token\n     * @param {Refresh} [refresh] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AuthApi\n     */\n    public apiV1AuthRefreshPost(refresh?: Refresh, options?: AxiosRequestConfig) {\n        return AuthApiFp(this.configuration).apiV1AuthRefreshPost(refresh, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n\n/**\n * EventApi - axios parameter creator\n * @export\n */\nexport const EventApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @summary Обновляет событие\n         * @param {number} eventId \n         * @param {EditEvent} [editEvent] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1EventEventIdPut: async (eventId: number, editEvent?: EditEvent, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'eventId' is not null or undefined\n            assertParamExists('apiV1EventEventIdPut', 'eventId', eventId)\n            const localVarPath = `/api/v1/event/{eventId}`\n                .replace(`{${\"eventId\"}}`, encodeURIComponent(String(eventId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            await setApiKeyToObject(localVarHeaderParameter, \"Authorization\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(editEvent, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Возвращает список событий\n         * @param {string} [startDate] \n         * @param {string} [endDate] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1EventGet: async (startDate?: string, endDate?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/v1/event`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            await setApiKeyToObject(localVarHeaderParameter, \"Authorization\", configuration)\n\n            if (startDate !== undefined) {\n                localVarQueryParameter['startDate'] = (startDate as any instanceof Date) ?\n                    (startDate as any).toISOString() :\n                    startDate;\n            }\n\n            if (endDate !== undefined) {\n                localVarQueryParameter['endDate'] = (endDate as any instanceof Date) ?\n                    (endDate as any).toISOString() :\n                    endDate;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Создает новое событие занятия\n         * @param {CreateEvent} [createEvent] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1EventPost: async (createEvent?: CreateEvent, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/v1/event`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            await setApiKeyToObject(localVarHeaderParameter, \"Authorization\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(createEvent, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * EventApi - functional programming interface\n * @export\n */\nexport const EventApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = EventApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * \n         * @summary Обновляет событие\n         * @param {number} eventId \n         * @param {EditEvent} [editEvent] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiV1EventEventIdPut(eventId: number, editEvent?: EditEvent, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultEvent>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1EventEventIdPut(eventId, editEvent, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Возвращает список событий\n         * @param {string} [startDate] \n         * @param {string} [endDate] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiV1EventGet(startDate?: string, endDate?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultListEvent>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1EventGet(startDate, endDate, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Создает новое событие занятия\n         * @param {CreateEvent} [createEvent] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiV1EventPost(createEvent?: CreateEvent, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultEvent>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1EventPost(createEvent, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    }\n};\n\n/**\n * EventApi - factory interface\n * @export\n */\nexport const EventApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = EventApiFp(configuration)\n    return {\n        /**\n         * \n         * @summary Обновляет событие\n         * @param {number} eventId \n         * @param {EditEvent} [editEvent] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1EventEventIdPut(eventId: number, editEvent?: EditEvent, options?: any): AxiosPromise<ResultEvent> {\n            return localVarFp.apiV1EventEventIdPut(eventId, editEvent, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Возвращает список событий\n         * @param {string} [startDate] \n         * @param {string} [endDate] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1EventGet(startDate?: string, endDate?: string, options?: any): AxiosPromise<ResultListEvent> {\n            return localVarFp.apiV1EventGet(startDate, endDate, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Создает новое событие занятия\n         * @param {CreateEvent} [createEvent] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1EventPost(createEvent?: CreateEvent, options?: any): AxiosPromise<ResultEvent> {\n            return localVarFp.apiV1EventPost(createEvent, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * EventApi - object-oriented interface\n * @export\n * @class EventApi\n * @extends {BaseAPI}\n */\nexport class EventApi extends BaseAPI {\n    /**\n     * \n     * @summary Обновляет событие\n     * @param {number} eventId \n     * @param {EditEvent} [editEvent] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof EventApi\n     */\n    public apiV1EventEventIdPut(eventId: number, editEvent?: EditEvent, options?: AxiosRequestConfig) {\n        return EventApiFp(this.configuration).apiV1EventEventIdPut(eventId, editEvent, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Возвращает список событий\n     * @param {string} [startDate] \n     * @param {string} [endDate] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof EventApi\n     */\n    public apiV1EventGet(startDate?: string, endDate?: string, options?: AxiosRequestConfig) {\n        return EventApiFp(this.configuration).apiV1EventGet(startDate, endDate, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Создает новое событие занятия\n     * @param {CreateEvent} [createEvent] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof EventApi\n     */\n    public apiV1EventPost(createEvent?: CreateEvent, options?: AxiosRequestConfig) {\n        return EventApiFp(this.configuration).apiV1EventPost(createEvent, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n\n/**\n * LessonApi - axios parameter creator\n * @export\n */\nexport const LessonApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @summary Возвращает список занятий\n         * @param {number} pageSize \n         * @param {number} pageNumber \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1LessonGet: async (pageSize: number, pageNumber: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'pageSize' is not null or undefined\n            assertParamExists('apiV1LessonGet', 'pageSize', pageSize)\n            // verify required parameter 'pageNumber' is not null or undefined\n            assertParamExists('apiV1LessonGet', 'pageNumber', pageNumber)\n            const localVarPath = `/api/v1/lesson`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            await setApiKeyToObject(localVarHeaderParameter, \"Authorization\", configuration)\n\n            if (pageSize !== undefined) {\n                localVarQueryParameter['pageSize'] = pageSize;\n            }\n\n            if (pageNumber !== undefined) {\n                localVarQueryParameter['pageNumber'] = pageNumber;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Возвращает занятие по id\n         * @param {number} lessonId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1LessonLessonIdGet: async (lessonId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'lessonId' is not null or undefined\n            assertParamExists('apiV1LessonLessonIdGet', 'lessonId', lessonId)\n            const localVarPath = `/api/v1/lesson/{lessonId}`\n                .replace(`{${\"lessonId\"}}`, encodeURIComponent(String(lessonId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            await setApiKeyToObject(localVarHeaderParameter, \"Authorization\", configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Обновляет данные занятия\n         * @param {number} lessonId \n         * @param {EditLesson} [editLesson] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1LessonLessonIdPut: async (lessonId: number, editLesson?: EditLesson, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'lessonId' is not null or undefined\n            assertParamExists('apiV1LessonLessonIdPut', 'lessonId', lessonId)\n            const localVarPath = `/api/v1/lesson/{lessonId}`\n                .replace(`{${\"lessonId\"}}`, encodeURIComponent(String(lessonId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            await setApiKeyToObject(localVarHeaderParameter, \"Authorization\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(editLesson, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Создает новое занятие\n         * @param {CreateLesson} [createLesson] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1LessonPost: async (createLesson?: CreateLesson, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/v1/lesson`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            await setApiKeyToObject(localVarHeaderParameter, \"Authorization\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(createLesson, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * LessonApi - functional programming interface\n * @export\n */\nexport const LessonApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = LessonApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * \n         * @summary Возвращает список занятий\n         * @param {number} pageSize \n         * @param {number} pageNumber \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiV1LessonGet(pageSize: number, pageNumber: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultPaginatedLesson>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1LessonGet(pageSize, pageNumber, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Возвращает занятие по id\n         * @param {number} lessonId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiV1LessonLessonIdGet(lessonId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultLesson>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1LessonLessonIdGet(lessonId, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Обновляет данные занятия\n         * @param {number} lessonId \n         * @param {EditLesson} [editLesson] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiV1LessonLessonIdPut(lessonId: number, editLesson?: EditLesson, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultLesson>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1LessonLessonIdPut(lessonId, editLesson, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Создает новое занятие\n         * @param {CreateLesson} [createLesson] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiV1LessonPost(createLesson?: CreateLesson, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultLesson>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1LessonPost(createLesson, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    }\n};\n\n/**\n * LessonApi - factory interface\n * @export\n */\nexport const LessonApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = LessonApiFp(configuration)\n    return {\n        /**\n         * \n         * @summary Возвращает список занятий\n         * @param {number} pageSize \n         * @param {number} pageNumber \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1LessonGet(pageSize: number, pageNumber: number, options?: any): AxiosPromise<ResultPaginatedLesson> {\n            return localVarFp.apiV1LessonGet(pageSize, pageNumber, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Возвращает занятие по id\n         * @param {number} lessonId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1LessonLessonIdGet(lessonId: number, options?: any): AxiosPromise<ResultLesson> {\n            return localVarFp.apiV1LessonLessonIdGet(lessonId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Обновляет данные занятия\n         * @param {number} lessonId \n         * @param {EditLesson} [editLesson] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1LessonLessonIdPut(lessonId: number, editLesson?: EditLesson, options?: any): AxiosPromise<ResultLesson> {\n            return localVarFp.apiV1LessonLessonIdPut(lessonId, editLesson, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Создает новое занятие\n         * @param {CreateLesson} [createLesson] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1LessonPost(createLesson?: CreateLesson, options?: any): AxiosPromise<ResultLesson> {\n            return localVarFp.apiV1LessonPost(createLesson, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * LessonApi - object-oriented interface\n * @export\n * @class LessonApi\n * @extends {BaseAPI}\n */\nexport class LessonApi extends BaseAPI {\n    /**\n     * \n     * @summary Возвращает список занятий\n     * @param {number} pageSize \n     * @param {number} pageNumber \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof LessonApi\n     */\n    public apiV1LessonGet(pageSize: number, pageNumber: number, options?: AxiosRequestConfig) {\n        return LessonApiFp(this.configuration).apiV1LessonGet(pageSize, pageNumber, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Возвращает занятие по id\n     * @param {number} lessonId \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof LessonApi\n     */\n    public apiV1LessonLessonIdGet(lessonId: number, options?: AxiosRequestConfig) {\n        return LessonApiFp(this.configuration).apiV1LessonLessonIdGet(lessonId, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Обновляет данные занятия\n     * @param {number} lessonId \n     * @param {EditLesson} [editLesson] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof LessonApi\n     */\n    public apiV1LessonLessonIdPut(lessonId: number, editLesson?: EditLesson, options?: AxiosRequestConfig) {\n        return LessonApiFp(this.configuration).apiV1LessonLessonIdPut(lessonId, editLesson, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Создает новое занятие\n     * @param {CreateLesson} [createLesson] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof LessonApi\n     */\n    public apiV1LessonPost(createLesson?: CreateLesson, options?: AxiosRequestConfig) {\n        return LessonApiFp(this.configuration).apiV1LessonPost(createLesson, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n\n/**\n * PersonApi - axios parameter creator\n * @export\n */\nexport const PersonApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @summary Возвращает список пользователей\n         * @param {number} pageSize \n         * @param {number} pageNumber \n         * @param {PersonTypeView} [type] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1PersonGet: async (pageSize: number, pageNumber: number, type?: PersonTypeView, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'pageSize' is not null or undefined\n            assertParamExists('apiV1PersonGet', 'pageSize', pageSize)\n            // verify required parameter 'pageNumber' is not null or undefined\n            assertParamExists('apiV1PersonGet', 'pageNumber', pageNumber)\n            const localVarPath = `/api/v1/person`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            await setApiKeyToObject(localVarHeaderParameter, \"Authorization\", configuration)\n\n            if (type !== undefined) {\n                localVarQueryParameter['type'] = type;\n            }\n\n            if (pageSize !== undefined) {\n                localVarQueryParameter['pageSize'] = pageSize;\n            }\n\n            if (pageNumber !== undefined) {\n                localVarQueryParameter['pageNumber'] = pageNumber;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Возвращает пользователя по id\n         * @param {number} personId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1PersonPersonIdGet: async (personId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'personId' is not null or undefined\n            assertParamExists('apiV1PersonPersonIdGet', 'personId', personId)\n            const localVarPath = `/api/v1/person/{personId}`\n                .replace(`{${\"personId\"}}`, encodeURIComponent(String(personId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            await setApiKeyToObject(localVarHeaderParameter, \"Authorization\", configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Обновляет данные пользователя\n         * @param {number} personId \n         * @param {EditPerson} [editPerson] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1PersonPersonIdPut: async (personId: number, editPerson?: EditPerson, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'personId' is not null or undefined\n            assertParamExists('apiV1PersonPersonIdPut', 'personId', personId)\n            const localVarPath = `/api/v1/person/{personId}`\n                .replace(`{${\"personId\"}}`, encodeURIComponent(String(personId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            await setApiKeyToObject(localVarHeaderParameter, \"Authorization\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(editPerson, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Создает нового пользователя\n         * @param {CreatePerson} [createPerson] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1PersonPost: async (createPerson?: CreatePerson, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/v1/person`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            await setApiKeyToObject(localVarHeaderParameter, \"Authorization\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(createPerson, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Возвращает текущего авторизованного пользователя\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1PersonSelfGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/v1/person/self`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            await setApiKeyToObject(localVarHeaderParameter, \"Authorization\", configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * PersonApi - functional programming interface\n * @export\n */\nexport const PersonApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = PersonApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * \n         * @summary Возвращает список пользователей\n         * @param {number} pageSize \n         * @param {number} pageNumber \n         * @param {PersonTypeView} [type] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiV1PersonGet(pageSize: number, pageNumber: number, type?: PersonTypeView, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultPaginatedPerson>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PersonGet(pageSize, pageNumber, type, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Возвращает пользователя по id\n         * @param {number} personId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiV1PersonPersonIdGet(personId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultPerson>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PersonPersonIdGet(personId, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Обновляет данные пользователя\n         * @param {number} personId \n         * @param {EditPerson} [editPerson] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiV1PersonPersonIdPut(personId: number, editPerson?: EditPerson, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultPerson>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PersonPersonIdPut(personId, editPerson, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Создает нового пользователя\n         * @param {CreatePerson} [createPerson] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiV1PersonPost(createPerson?: CreatePerson, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultPerson>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PersonPost(createPerson, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Возвращает текущего авторизованного пользователя\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiV1PersonSelfGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultPerson>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PersonSelfGet(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    }\n};\n\n/**\n * PersonApi - factory interface\n * @export\n */\nexport const PersonApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = PersonApiFp(configuration)\n    return {\n        /**\n         * \n         * @summary Возвращает список пользователей\n         * @param {number} pageSize \n         * @param {number} pageNumber \n         * @param {PersonTypeView} [type] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1PersonGet(pageSize: number, pageNumber: number, type?: PersonTypeView, options?: any): AxiosPromise<ResultPaginatedPerson> {\n            return localVarFp.apiV1PersonGet(pageSize, pageNumber, type, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Возвращает пользователя по id\n         * @param {number} personId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1PersonPersonIdGet(personId: number, options?: any): AxiosPromise<ResultPerson> {\n            return localVarFp.apiV1PersonPersonIdGet(personId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Обновляет данные пользователя\n         * @param {number} personId \n         * @param {EditPerson} [editPerson] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1PersonPersonIdPut(personId: number, editPerson?: EditPerson, options?: any): AxiosPromise<ResultPerson> {\n            return localVarFp.apiV1PersonPersonIdPut(personId, editPerson, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Создает нового пользователя\n         * @param {CreatePerson} [createPerson] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1PersonPost(createPerson?: CreatePerson, options?: any): AxiosPromise<ResultPerson> {\n            return localVarFp.apiV1PersonPost(createPerson, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Возвращает текущего авторизованного пользователя\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1PersonSelfGet(options?: any): AxiosPromise<ResultPerson> {\n            return localVarFp.apiV1PersonSelfGet(options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * PersonApi - object-oriented interface\n * @export\n * @class PersonApi\n * @extends {BaseAPI}\n */\nexport class PersonApi extends BaseAPI {\n    /**\n     * \n     * @summary Возвращает список пользователей\n     * @param {number} pageSize \n     * @param {number} pageNumber \n     * @param {PersonTypeView} [type] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PersonApi\n     */\n    public apiV1PersonGet(pageSize: number, pageNumber: number, type?: PersonTypeView, options?: AxiosRequestConfig) {\n        return PersonApiFp(this.configuration).apiV1PersonGet(pageSize, pageNumber, type, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Возвращает пользователя по id\n     * @param {number} personId \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PersonApi\n     */\n    public apiV1PersonPersonIdGet(personId: number, options?: AxiosRequestConfig) {\n        return PersonApiFp(this.configuration).apiV1PersonPersonIdGet(personId, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Обновляет данные пользователя\n     * @param {number} personId \n     * @param {EditPerson} [editPerson] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PersonApi\n     */\n    public apiV1PersonPersonIdPut(personId: number, editPerson?: EditPerson, options?: AxiosRequestConfig) {\n        return PersonApiFp(this.configuration).apiV1PersonPersonIdPut(personId, editPerson, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Создает нового пользователя\n     * @param {CreatePerson} [createPerson] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PersonApi\n     */\n    public apiV1PersonPost(createPerson?: CreatePerson, options?: AxiosRequestConfig) {\n        return PersonApiFp(this.configuration).apiV1PersonPost(createPerson, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Возвращает текущего авторизованного пользователя\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PersonApi\n     */\n    public apiV1PersonSelfGet(options?: AxiosRequestConfig) {\n        return PersonApiFp(this.configuration).apiV1PersonSelfGet(options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n\n/**\n * RoomApi - axios parameter creator\n * @export\n */\nexport const RoomApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @summary Возвращает список помещений\n         * @param {number} pageSize \n         * @param {number} pageNumber \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1RoomGet: async (pageSize: number, pageNumber: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'pageSize' is not null or undefined\n            assertParamExists('apiV1RoomGet', 'pageSize', pageSize)\n            // verify required parameter 'pageNumber' is not null or undefined\n            assertParamExists('apiV1RoomGet', 'pageNumber', pageNumber)\n            const localVarPath = `/api/v1/room`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            await setApiKeyToObject(localVarHeaderParameter, \"Authorization\", configuration)\n\n            if (pageSize !== undefined) {\n                localVarQueryParameter['pageSize'] = pageSize;\n            }\n\n            if (pageNumber !== undefined) {\n                localVarQueryParameter['pageNumber'] = pageNumber;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Создает новое помещение\n         * @param {CreateRoom} [createRoom] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1RoomPost: async (createRoom?: CreateRoom, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/v1/room`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            await setApiKeyToObject(localVarHeaderParameter, \"Authorization\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(createRoom, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Возвращает помещение по id\n         * @param {number} roomId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1RoomRoomIdGet: async (roomId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'roomId' is not null or undefined\n            assertParamExists('apiV1RoomRoomIdGet', 'roomId', roomId)\n            const localVarPath = `/api/v1/room/{roomId}`\n                .replace(`{${\"roomId\"}}`, encodeURIComponent(String(roomId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            await setApiKeyToObject(localVarHeaderParameter, \"Authorization\", configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Обновляет данные помещения\n         * @param {number} roomId \n         * @param {EditRoom} [editRoom] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1RoomRoomIdPut: async (roomId: number, editRoom?: EditRoom, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'roomId' is not null or undefined\n            assertParamExists('apiV1RoomRoomIdPut', 'roomId', roomId)\n            const localVarPath = `/api/v1/room/{roomId}`\n                .replace(`{${\"roomId\"}}`, encodeURIComponent(String(roomId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            await setApiKeyToObject(localVarHeaderParameter, \"Authorization\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(editRoom, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * RoomApi - functional programming interface\n * @export\n */\nexport const RoomApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = RoomApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * \n         * @summary Возвращает список помещений\n         * @param {number} pageSize \n         * @param {number} pageNumber \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiV1RoomGet(pageSize: number, pageNumber: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultPaginatedRoom>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1RoomGet(pageSize, pageNumber, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Создает новое помещение\n         * @param {CreateRoom} [createRoom] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiV1RoomPost(createRoom?: CreateRoom, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultRoom>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1RoomPost(createRoom, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Возвращает помещение по id\n         * @param {number} roomId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiV1RoomRoomIdGet(roomId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultRoom>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1RoomRoomIdGet(roomId, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Обновляет данные помещения\n         * @param {number} roomId \n         * @param {EditRoom} [editRoom] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiV1RoomRoomIdPut(roomId: number, editRoom?: EditRoom, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultRoom>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1RoomRoomIdPut(roomId, editRoom, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    }\n};\n\n/**\n * RoomApi - factory interface\n * @export\n */\nexport const RoomApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = RoomApiFp(configuration)\n    return {\n        /**\n         * \n         * @summary Возвращает список помещений\n         * @param {number} pageSize \n         * @param {number} pageNumber \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1RoomGet(pageSize: number, pageNumber: number, options?: any): AxiosPromise<ResultPaginatedRoom> {\n            return localVarFp.apiV1RoomGet(pageSize, pageNumber, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Создает новое помещение\n         * @param {CreateRoom} [createRoom] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1RoomPost(createRoom?: CreateRoom, options?: any): AxiosPromise<ResultRoom> {\n            return localVarFp.apiV1RoomPost(createRoom, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Возвращает помещение по id\n         * @param {number} roomId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1RoomRoomIdGet(roomId: number, options?: any): AxiosPromise<ResultRoom> {\n            return localVarFp.apiV1RoomRoomIdGet(roomId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Обновляет данные помещения\n         * @param {number} roomId \n         * @param {EditRoom} [editRoom] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1RoomRoomIdPut(roomId: number, editRoom?: EditRoom, options?: any): AxiosPromise<ResultRoom> {\n            return localVarFp.apiV1RoomRoomIdPut(roomId, editRoom, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * RoomApi - object-oriented interface\n * @export\n * @class RoomApi\n * @extends {BaseAPI}\n */\nexport class RoomApi extends BaseAPI {\n    /**\n     * \n     * @summary Возвращает список помещений\n     * @param {number} pageSize \n     * @param {number} pageNumber \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof RoomApi\n     */\n    public apiV1RoomGet(pageSize: number, pageNumber: number, options?: AxiosRequestConfig) {\n        return RoomApiFp(this.configuration).apiV1RoomGet(pageSize, pageNumber, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Создает новое помещение\n     * @param {CreateRoom} [createRoom] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof RoomApi\n     */\n    public apiV1RoomPost(createRoom?: CreateRoom, options?: AxiosRequestConfig) {\n        return RoomApiFp(this.configuration).apiV1RoomPost(createRoom, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Возвращает помещение по id\n     * @param {number} roomId \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof RoomApi\n     */\n    public apiV1RoomRoomIdGet(roomId: number, options?: AxiosRequestConfig) {\n        return RoomApiFp(this.configuration).apiV1RoomRoomIdGet(roomId, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Обновляет данные помещения\n     * @param {number} roomId \n     * @param {EditRoom} [editRoom] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof RoomApi\n     */\n    public apiV1RoomRoomIdPut(roomId: number, editRoom?: EditRoom, options?: AxiosRequestConfig) {\n        return RoomApiFp(this.configuration).apiV1RoomRoomIdPut(roomId, editRoom, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Uritmix.Api\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface ConfigurationParameters {\n    apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);\n    username?: string;\n    password?: string;\n    accessToken?: string | Promise<string> | ((name?: string, scopes?: string[]) => string) | ((name?: string, scopes?: string[]) => Promise<string>);\n    basePath?: string;\n    baseOptions?: any;\n    formDataCtor?: new () => any;\n}\n\nexport class Configuration {\n    /**\n     * parameter for apiKey security\n     * @param name security name\n     * @memberof Configuration\n     */\n    apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);\n    /**\n     * parameter for basic security\n     *\n     * @type {string}\n     * @memberof Configuration\n     */\n    username?: string;\n    /**\n     * parameter for basic security\n     *\n     * @type {string}\n     * @memberof Configuration\n     */\n    password?: string;\n    /**\n     * parameter for oauth2 security\n     * @param name security name\n     * @param scopes oauth2 scope\n     * @memberof Configuration\n     */\n    accessToken?: string | Promise<string> | ((name?: string, scopes?: string[]) => string) | ((name?: string, scopes?: string[]) => Promise<string>);\n    /**\n     * override base path\n     *\n     * @type {string}\n     * @memberof Configuration\n     */\n    basePath?: string;\n    /**\n     * base options for axios calls\n     *\n     * @type {any}\n     * @memberof Configuration\n     */\n    baseOptions?: any;\n    /**\n     * The FormData constructor that will be used to create multipart form data\n     * requests. You can inject this here so that execution environments that\n     * do not support the FormData class can still run the generated client.\n     *\n     * @type {new () => FormData}\n     */\n    formDataCtor?: new () => any;\n\n    constructor(param: ConfigurationParameters = {}) {\n        this.apiKey = param.apiKey;\n        this.username = param.username;\n        this.password = param.password;\n        this.accessToken = param.accessToken;\n        this.basePath = param.basePath;\n        this.baseOptions = param.baseOptions;\n        this.formDataCtor = param.formDataCtor;\n    }\n\n    /**\n     * Check if the given MIME is a JSON MIME.\n     * JSON MIME examples:\n     *   application/json\n     *   application/json; charset=UTF8\n     *   APPLICATION/JSON\n     *   application/vnd.company+json\n     * @param mime - MIME (Multipurpose Internet Mail Extensions)\n     * @return True if the given MIME is JSON, false otherwise.\n     */\n    public isJsonMime(mime: string): boolean {\n        const jsonMime: RegExp = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');\n        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');\n    }\n}\n"],"names":["Api","BASE_PATH","replace","BaseAPI","configuration","basePath","axios","globalAxios","this","RequiredError","field","msg","_this","_inheritsLoose","Error","DUMMY_BASE_URL","assertParamExists","functionName","paramName","paramValue","setApiKeyToObject","object","keyParamName","apiKey","_context","setSearchParams","url","searchParams","URLSearchParams","search","objects","key","Array","isArray","item","append","set","toString","serializeDataIfNeeded","value","requestOptions","nonString","isJsonMime","headers","JSON","stringify","undefined","toPathString","pathname","hash","createRequestFunction","axiosArgs","axiosRequestArgs","options","request","AbonnementApiAxiosParamCreator","apiV1AbonnementAbonnementIdGet","abonnementId","localVarPath","encodeURIComponent","String","localVarUrlObj","URL","baseOptions","localVarRequestOptions","method","localVarHeaderParameter","localVarQueryParameter","apiV1AbonnementAbonnementIdPut","editAbonnement","_context2","data","apiV1AbonnementGet","pageSize","pageNumber","_context3","apiV1AbonnementPost","createAbonnement","_context4","apiV1AbonnementSoldPersonIdGet","personId","_context5","apiV1AbonnementSoldPost","saleAbonnement","_context6","AbonnementApiFp","localVarAxiosParamCreator","AbonnementApi","_proto","then","_this2","_this3","_this4","_this5","_this6","AuthApiAxiosParamCreator","apiV1AuthActivatePost","activateAuth","apiV1AuthLoginPost","loginUser","apiV1AuthLogoutPost","logout","apiV1AuthPasswordResetPost","passwordReset","apiV1AuthPasswordResetQueryPost","passwordResetQuery","apiV1AuthPersonIdPost","createAuth","_context18","apiV1AuthRefreshPost","refresh","AuthApiFp","AuthApi","_proto2","_this7","_this8","_this9","_this10","_this11","_this12","_this13","EventApiAxiosParamCreator","apiV1EventEventIdPut","eventId","editEvent","_context27","apiV1EventGet","startDate","endDate","_context28","Date","toISOString","apiV1EventPost","createEvent","_context29","EventApiFp","EventApi","_proto3","_this14","_this15","_this16","LessonApiAxiosParamCreator","apiV1LessonGet","_context33","apiV1LessonLessonIdGet","lessonId","_context34","apiV1LessonLessonIdPut","editLesson","_context35","apiV1LessonPost","createLesson","_context36","LessonApiFp","LessonApi","_proto4","_this17","_this18","_this19","_this20","PersonApiAxiosParamCreator","apiV1PersonGet","type","_context41","apiV1PersonPersonIdGet","_context42","apiV1PersonPersonIdPut","editPerson","_context43","apiV1PersonPost","createPerson","_context44","apiV1PersonSelfGet","_context45","PersonApiFp","PersonApi","_proto5","_this21","_this22","_this23","_this24","_this25","RoomApiAxiosParamCreator","apiV1RoomGet","_context51","apiV1RoomPost","createRoom","_context52","apiV1RoomRoomIdGet","roomId","_context53","apiV1RoomRoomIdPut","editRoom","_context54","RoomApiFp","RoomApi","_proto6","_this26","_this27","_this28","_this29","Configuration","param","username","password","accessToken","formDataCtor","mime","jsonMime","RegExp","test","toLowerCase","OneDay","OneMonth","ThreeMonths","HalfYear","Year","Manager","Admin","Server","NotActivated","Activated","Blocked","D0","D5","D10","D15","D20","D25","D30","D40","D50","D60","D70","D80","D90","NotStarted","InProgress","Finished","All","Trainer","Account","localVarFp","API_URL","process","env","REACT_API_URL","api"],"mappings":"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"}