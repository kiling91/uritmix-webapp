{"version":3,"file":"uritmix.api.cjs.production.min.js","sources":["../src/api/base.ts","../src/index.tsx","../src/api/common.ts","../src/api/api.ts","../src/api/configuration.ts"],"sourcesContent":["/* tslint:disable */\n/* eslint-disable */\n/**\n * Uritmix.Api\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport { Configuration } from \"./configuration\";\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';\n\nexport const BASE_PATH = \"http://localhost\".replace(/\\/+$/, \"\");\n\n/**\n *\n * @export\n */\nexport const COLLECTION_FORMATS = {\n    csv: \",\",\n    ssv: \" \",\n    tsv: \"\\t\",\n    pipes: \"|\",\n};\n\n/**\n *\n * @export\n * @interface RequestArgs\n */\nexport interface RequestArgs {\n    url: string;\n    options: AxiosRequestConfig;\n}\n\n/**\n *\n * @export\n * @class BaseAPI\n */\nexport class BaseAPI {\n    protected configuration: Configuration | undefined;\n\n    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected axios: AxiosInstance = globalAxios) {\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = configuration.basePath || this.basePath;\n        }\n    }\n};\n\n/**\n *\n * @export\n * @class RequiredError\n * @extends {Error}\n */\nexport class RequiredError extends Error {\n    name: \"RequiredError\" = \"RequiredError\";\n    constructor(public field: string, msg?: string) {\n        super(msg);\n    }\n}\n","import * as api from './api';\nconst API_URL = process.env.REACT_API_URL || 'http://localhost:3000';\n\nexport namespace Api {\n    export const authApi = new api.AuthApi(\n        new api.Configuration({\n            basePath: API_URL\n        })\n    );\n\n    export const personApi = new api.PersonApi(\n        new api.Configuration({\n            basePath: API_URL\n        })\n    );\n\n    export const roomApi = new api.RoomApi(\n        new api.Configuration({\n            basePath: API_URL\n        })\n    );\n\n    export const lessonApi = new api.LessonApi(\n        new api.Configuration({\n            basePath: API_URL\n        })\n    );\n\n    export const abonnementApi = new api.AbonnementApi(\n        new api.Configuration({\n            basePath: API_URL\n        })\n    );\n}\n\nexport * as dto from './api';","/* tslint:disable */\n/* eslint-disable */\n/**\n * Uritmix.Api\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport { Configuration } from \"./configuration\";\nimport { RequiredError, RequestArgs } from \"./base\";\nimport { AxiosInstance, AxiosResponse } from 'axios';\n\n/**\n *\n * @export\n */\nexport const DUMMY_BASE_URL = 'https://example.com'\n\n/**\n *\n * @throws {RequiredError}\n * @export\n */\nexport const assertParamExists = function (functionName: string, paramName: string, paramValue: unknown) {\n    if (paramValue === null || paramValue === undefined) {\n        throw new RequiredError(paramName, `Required parameter ${paramName} was null or undefined when calling ${functionName}.`);\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setApiKeyToObject = async function (object: any, keyParamName: string, configuration?: Configuration) {\n    if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n            ? await configuration.apiKey(keyParamName)\n            : await configuration.apiKey;\n        object[keyParamName] = localVarApiKeyValue;\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setBasicAuthToObject = function (object: any, configuration?: Configuration) {\n    if (configuration && (configuration.username || configuration.password)) {\n        object[\"auth\"] = { username: configuration.username, password: configuration.password };\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setBearerAuthToObject = async function (object: any, configuration?: Configuration) {\n    if (configuration && configuration.accessToken) {\n        const accessToken = typeof configuration.accessToken === 'function'\n            ? await configuration.accessToken()\n            : await configuration.accessToken;\n        object[\"Authorization\"] = \"Bearer \" + accessToken;\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setOAuthToObject = async function (object: any, name: string, scopes: string[], configuration?: Configuration) {\n    if (configuration && configuration.accessToken) {\n        const localVarAccessTokenValue = typeof configuration.accessToken === 'function'\n            ? await configuration.accessToken(name, scopes)\n            : await configuration.accessToken;\n        object[\"Authorization\"] = \"Bearer \" + localVarAccessTokenValue;\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setSearchParams = function (url: URL, ...objects: any[]) {\n    const searchParams = new URLSearchParams(url.search);\n    for (const object of objects) {\n        for (const key in object) {\n            if (Array.isArray(object[key])) {\n                searchParams.delete(key);\n                for (const item of object[key]) {\n                    searchParams.append(key, item);\n                }\n            } else {\n                searchParams.set(key, object[key]);\n            }\n        }\n    }\n    url.search = searchParams.toString();\n}\n\n/**\n *\n * @export\n */\nexport const serializeDataIfNeeded = function (value: any, requestOptions: any, configuration?: Configuration) {\n    const nonString = typeof value !== 'string';\n    const needsSerialization = nonString && configuration && configuration.isJsonMime\n        ? configuration.isJsonMime(requestOptions.headers['Content-Type'])\n        : nonString;\n    return needsSerialization\n        ? JSON.stringify(value !== undefined ? value : {})\n        : (value || \"\");\n}\n\n/**\n *\n * @export\n */\nexport const toPathString = function (url: URL) {\n    return url.pathname + url.search + url.hash\n}\n\n/**\n *\n * @export\n */\nexport const createRequestFunction = function (axiosArgs: RequestArgs, globalAxios: AxiosInstance, BASE_PATH: string, configuration?: Configuration) {\n    return <T = unknown, R = AxiosResponse<T>>(axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n        const axiosRequestArgs = {...axiosArgs.options, url: (configuration?.basePath || basePath) + axiosArgs.url};\n        return axios.request<T, R>(axiosRequestArgs);\n    };\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Uritmix.Api\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport { Configuration } from './configuration';\nimport globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';\n\n/**\n * \n * @export\n * @enum {string}\n */\n\nexport const AbonnementValidityView = {\n    OneDay: 'OneDay',\n    OneMonth: 'OneMonth',\n    ThreeMonths: 'ThreeMonths',\n    HalfYear: 'HalfYear',\n    Year: 'Year'\n} as const;\n\nexport type AbonnementValidityView = typeof AbonnementValidityView[keyof typeof AbonnementValidityView];\n\n\n/**\n * \n * @export\n * @interface AbonnementView\n */\nexport interface AbonnementView {\n    /**\n     * \n     * @type {number}\n     * @memberof AbonnementView\n     */\n    'id'?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof AbonnementView\n     */\n    'name'?: string;\n    /**\n     * \n     * @type {AbonnementValidityView}\n     * @memberof AbonnementView\n     */\n    'validity'?: AbonnementValidityView;\n    /**\n     * \n     * @type {number}\n     * @memberof AbonnementView\n     */\n    'numberOfVisits'?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof AbonnementView\n     */\n    'basePrice'?: number;\n    /**\n     * \n     * @type {DiscountView}\n     * @memberof AbonnementView\n     */\n    'discount'?: DiscountView;\n    /**\n     * \n     * @type {Array<LessonView>}\n     * @memberof AbonnementView\n     */\n    'lessons'?: Array<LessonView>;\n}\n/**\n * \n * @export\n * @interface ActivateAuth\n */\nexport interface ActivateAuth {\n    /**\n     * \n     * @type {string}\n     * @memberof ActivateAuth\n     */\n    'confirmCode'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ActivateAuth\n     */\n    'password'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ActivateAuth\n     */\n    'passwordConfirm'?: string;\n}\n/**\n * \n * @export\n * @enum {string}\n */\n\nexport const AuthRoleView = {\n    Manager: 'Manager',\n    Admin: 'Admin',\n    Server: 'Server'\n} as const;\n\nexport type AuthRoleView = typeof AuthRoleView[keyof typeof AuthRoleView];\n\n\n/**\n * \n * @export\n * @enum {string}\n */\n\nexport const AuthStatusView = {\n    NotActivated: 'NotActivated',\n    Activated: 'Activated',\n    Blocked: 'Blocked'\n} as const;\n\nexport type AuthStatusView = typeof AuthStatusView[keyof typeof AuthStatusView];\n\n\n/**\n * \n * @export\n * @interface AuthView\n */\nexport interface AuthView {\n    /**\n     * \n     * @type {AuthRoleView}\n     * @memberof AuthView\n     */\n    'role'?: AuthRoleView;\n    /**\n     * \n     * @type {AuthStatusView}\n     * @memberof AuthView\n     */\n    'status'?: AuthStatusView;\n    /**\n     * \n     * @type {string}\n     * @memberof AuthView\n     */\n    'email'?: string;\n}\n/**\n * \n * @export\n * @interface CreateAbonnement\n */\nexport interface CreateAbonnement {\n    /**\n     * \n     * @type {string}\n     * @memberof CreateAbonnement\n     */\n    'name'?: string;\n    /**\n     * \n     * @type {AbonnementValidityView}\n     * @memberof CreateAbonnement\n     */\n    'validity'?: AbonnementValidityView;\n    /**\n     * \n     * @type {number}\n     * @memberof CreateAbonnement\n     */\n    'numberOfVisits'?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof CreateAbonnement\n     */\n    'basePrice'?: number;\n    /**\n     * \n     * @type {DiscountView}\n     * @memberof CreateAbonnement\n     */\n    'discount'?: DiscountView;\n    /**\n     * \n     * @type {Array<number>}\n     * @memberof CreateAbonnement\n     */\n    'lessonIds'?: Array<number>;\n}\n/**\n * \n * @export\n * @interface CreateAuth\n */\nexport interface CreateAuth {\n    /**\n     * \n     * @type {string}\n     * @memberof CreateAuth\n     */\n    'email'?: string;\n    /**\n     * \n     * @type {AuthRoleView}\n     * @memberof CreateAuth\n     */\n    'role'?: AuthRoleView;\n}\n/**\n * \n * @export\n * @interface CreateLessonPerson\n */\nexport interface CreateLessonPerson {\n    /**\n     * \n     * @type {string}\n     * @memberof CreateLessonPerson\n     */\n    'name'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateLessonPerson\n     */\n    'description'?: string | null;\n    /**\n     * \n     * @type {number}\n     * @memberof CreateLessonPerson\n     */\n    'trainerId'?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof CreateLessonPerson\n     */\n    'durationMinute'?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof CreateLessonPerson\n     */\n    'basePrice'?: number;\n}\n/**\n * \n * @export\n * @interface CreatePerson\n */\nexport interface CreatePerson {\n    /**\n     * \n     * @type {string}\n     * @memberof CreatePerson\n     */\n    'firstName'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreatePerson\n     */\n    'lastName'?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof CreatePerson\n     */\n    'isTrainer'?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof CreatePerson\n     */\n    'description'?: string | null;\n}\n/**\n * \n * @export\n * @interface CreateRoomPerson\n */\nexport interface CreateRoomPerson {\n    /**\n     * \n     * @type {string}\n     * @memberof CreateRoomPerson\n     */\n    'name'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateRoomPerson\n     */\n    'description'?: string | null;\n}\n/**\n * \n * @export\n * @enum {string}\n */\n\nexport const DiscountView = {\n    D0: 'D0',\n    D5: 'D5',\n    D10: 'D10',\n    D15: 'D15',\n    D20: 'D20',\n    D25: 'D25',\n    D30: 'D30',\n    D40: 'D40',\n    D50: 'D50',\n    D60: 'D60',\n    D70: 'D70',\n    D80: 'D80',\n    D90: 'D90'\n} as const;\n\nexport type DiscountView = typeof DiscountView[keyof typeof DiscountView];\n\n\n/**\n * \n * @export\n * @interface EditAbonnement\n */\nexport interface EditAbonnement {\n    /**\n     * \n     * @type {string}\n     * @memberof EditAbonnement\n     */\n    'name'?: string;\n    /**\n     * \n     * @type {AbonnementValidityView}\n     * @memberof EditAbonnement\n     */\n    'validity'?: AbonnementValidityView;\n    /**\n     * \n     * @type {number}\n     * @memberof EditAbonnement\n     */\n    'numberOfVisits'?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof EditAbonnement\n     */\n    'basePrice'?: number;\n    /**\n     * \n     * @type {DiscountView}\n     * @memberof EditAbonnement\n     */\n    'discount'?: DiscountView;\n    /**\n     * \n     * @type {Array<number>}\n     * @memberof EditAbonnement\n     */\n    'lessonIds'?: Array<number>;\n}\n/**\n * \n * @export\n * @interface EditLesson\n */\nexport interface EditLesson {\n    /**\n     * \n     * @type {string}\n     * @memberof EditLesson\n     */\n    'name'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof EditLesson\n     */\n    'description'?: string | null;\n    /**\n     * \n     * @type {number}\n     * @memberof EditLesson\n     */\n    'trainerId'?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof EditLesson\n     */\n    'durationMinute'?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof EditLesson\n     */\n    'basePrice'?: number;\n}\n/**\n * \n * @export\n * @interface EditPerson\n */\nexport interface EditPerson {\n    /**\n     * \n     * @type {string}\n     * @memberof EditPerson\n     */\n    'firstName'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof EditPerson\n     */\n    'lastName'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof EditPerson\n     */\n    'description'?: string | null;\n}\n/**\n * \n * @export\n * @interface EditRoom\n */\nexport interface EditRoom {\n    /**\n     * \n     * @type {string}\n     * @memberof EditRoom\n     */\n    'name'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof EditRoom\n     */\n    'description'?: string | null;\n}\n/**\n * \n * @export\n * @interface ErrorResponse\n */\nexport interface ErrorResponse {\n    /**\n     * \n     * @type {string}\n     * @memberof ErrorResponse\n     */\n    'error'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ErrorResponse\n     */\n    'code'?: string;\n}\n/**\n * \n * @export\n * @interface LessonView\n */\nexport interface LessonView {\n    /**\n     * \n     * @type {number}\n     * @memberof LessonView\n     */\n    'id'?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof LessonView\n     */\n    'name'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof LessonView\n     */\n    'description'?: string | null;\n    /**\n     * \n     * @type {number}\n     * @memberof LessonView\n     */\n    'trainerId'?: number;\n    /**\n     * \n     * @type {Person}\n     * @memberof LessonView\n     */\n    'trainer'?: Person;\n    /**\n     * \n     * @type {number}\n     * @memberof LessonView\n     */\n    'durationMinute'?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof LessonView\n     */\n    'basePrice'?: number;\n}\n/**\n * \n * @export\n * @interface LoggedPerson\n */\nexport interface LoggedPerson {\n    /**\n     * \n     * @type {string}\n     * @memberof LoggedPerson\n     */\n    'firstName'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof LoggedPerson\n     */\n    'lastName'?: string;\n    /**\n     * \n     * @type {AuthRoleView}\n     * @memberof LoggedPerson\n     */\n    'role'?: AuthRoleView;\n    /**\n     * \n     * @type {string}\n     * @memberof LoggedPerson\n     */\n    'email'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof LoggedPerson\n     */\n    'accessToken'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof LoggedPerson\n     */\n    'refreshToken'?: string;\n}\n/**\n * \n * @export\n * @interface LoginUser\n */\nexport interface LoginUser {\n    /**\n     * \n     * @type {string}\n     * @memberof LoginUser\n     */\n    'email'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof LoginUser\n     */\n    'password'?: string;\n}\n/**\n * \n * @export\n * @interface PaginatedAbonnementView\n */\nexport interface PaginatedAbonnementView {\n    /**\n     * \n     * @type {number}\n     * @memberof PaginatedAbonnementView\n     */\n    'pageNumber'?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof PaginatedAbonnementView\n     */\n    'pageSize'?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof PaginatedAbonnementView\n     */\n    'totalPages'?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof PaginatedAbonnementView\n     */\n    'totalRecords'?: number;\n    /**\n     * \n     * @type {boolean}\n     * @memberof PaginatedAbonnementView\n     */\n    'nextPageExists'?: boolean;\n    /**\n     * \n     * @type {Array<AbonnementView>}\n     * @memberof PaginatedAbonnementView\n     */\n    'results'?: Array<AbonnementView> | null;\n}\n/**\n * \n * @export\n * @interface PaginatedLessonView\n */\nexport interface PaginatedLessonView {\n    /**\n     * \n     * @type {number}\n     * @memberof PaginatedLessonView\n     */\n    'pageNumber'?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof PaginatedLessonView\n     */\n    'pageSize'?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof PaginatedLessonView\n     */\n    'totalPages'?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof PaginatedLessonView\n     */\n    'totalRecords'?: number;\n    /**\n     * \n     * @type {boolean}\n     * @memberof PaginatedLessonView\n     */\n    'nextPageExists'?: boolean;\n    /**\n     * \n     * @type {Array<LessonView>}\n     * @memberof PaginatedLessonView\n     */\n    'results'?: Array<LessonView> | null;\n}\n/**\n * \n * @export\n * @interface PaginatedPerson\n */\nexport interface PaginatedPerson {\n    /**\n     * \n     * @type {number}\n     * @memberof PaginatedPerson\n     */\n    'pageNumber'?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof PaginatedPerson\n     */\n    'pageSize'?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof PaginatedPerson\n     */\n    'totalPages'?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof PaginatedPerson\n     */\n    'totalRecords'?: number;\n    /**\n     * \n     * @type {boolean}\n     * @memberof PaginatedPerson\n     */\n    'nextPageExists'?: boolean;\n    /**\n     * \n     * @type {Array<Person>}\n     * @memberof PaginatedPerson\n     */\n    'results'?: Array<Person> | null;\n}\n/**\n * \n * @export\n * @interface PaginatedRoomView\n */\nexport interface PaginatedRoomView {\n    /**\n     * \n     * @type {number}\n     * @memberof PaginatedRoomView\n     */\n    'pageNumber'?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof PaginatedRoomView\n     */\n    'pageSize'?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof PaginatedRoomView\n     */\n    'totalPages'?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof PaginatedRoomView\n     */\n    'totalRecords'?: number;\n    /**\n     * \n     * @type {boolean}\n     * @memberof PaginatedRoomView\n     */\n    'nextPageExists'?: boolean;\n    /**\n     * \n     * @type {Array<RoomView>}\n     * @memberof PaginatedRoomView\n     */\n    'results'?: Array<RoomView> | null;\n}\n/**\n * \n * @export\n * @interface PaginatedSoldAbonnementView\n */\nexport interface PaginatedSoldAbonnementView {\n    /**\n     * \n     * @type {number}\n     * @memberof PaginatedSoldAbonnementView\n     */\n    'pageNumber'?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof PaginatedSoldAbonnementView\n     */\n    'pageSize'?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof PaginatedSoldAbonnementView\n     */\n    'totalPages'?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof PaginatedSoldAbonnementView\n     */\n    'totalRecords'?: number;\n    /**\n     * \n     * @type {boolean}\n     * @memberof PaginatedSoldAbonnementView\n     */\n    'nextPageExists'?: boolean;\n    /**\n     * \n     * @type {Array<SoldAbonnementView>}\n     * @memberof PaginatedSoldAbonnementView\n     */\n    'results'?: Array<SoldAbonnementView> | null;\n}\n/**\n * \n * @export\n * @interface PasswordReset\n */\nexport interface PasswordReset {\n    /**\n     * \n     * @type {string}\n     * @memberof PasswordReset\n     */\n    'confirmCode'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof PasswordReset\n     */\n    'password'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof PasswordReset\n     */\n    'passwordConfirm'?: string;\n}\n/**\n * \n * @export\n * @interface PasswordResetQuery\n */\nexport interface PasswordResetQuery {\n    /**\n     * \n     * @type {string}\n     * @memberof PasswordResetQuery\n     */\n    'email'?: string;\n}\n/**\n * \n * @export\n * @interface Person\n */\nexport interface Person {\n    /**\n     * \n     * @type {number}\n     * @memberof Person\n     */\n    'id'?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof Person\n     */\n    'firstName'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Person\n     */\n    'lastName'?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof Person\n     */\n    'isTrainer'?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof Person\n     */\n    'description'?: string | null;\n    /**\n     * \n     * @type {boolean}\n     * @memberof Person\n     */\n    'haveAuth'?: boolean;\n    /**\n     * \n     * @type {AuthView}\n     * @memberof Person\n     */\n    'auth'?: AuthView;\n}\n/**\n * \n * @export\n * @interface PropertyError\n */\nexport interface PropertyError {\n    /**\n     * \n     * @type {string}\n     * @memberof PropertyError\n     */\n    'name'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof PropertyError\n     */\n    'error'?: string;\n}\n/**\n * \n * @export\n * @interface Refresh\n */\nexport interface Refresh {\n    /**\n     * \n     * @type {string}\n     * @memberof Refresh\n     */\n    'token'?: string;\n}\n/**\n * \n * @export\n * @interface ResultAbonnementView\n */\nexport interface ResultAbonnementView {\n    /**\n     * \n     * @type {AbonnementView}\n     * @memberof ResultAbonnementView\n     */\n    'result'?: AbonnementView;\n    /**\n     * \n     * @type {string}\n     * @memberof ResultAbonnementView\n     */\n    'error'?: string | null;\n    /**\n     * \n     * @type {boolean}\n     * @memberof ResultAbonnementView\n     */\n    'ok'?: boolean;\n}\n/**\n * \n * @export\n * @interface ResultLessonView\n */\nexport interface ResultLessonView {\n    /**\n     * \n     * @type {LessonView}\n     * @memberof ResultLessonView\n     */\n    'result'?: LessonView;\n    /**\n     * \n     * @type {string}\n     * @memberof ResultLessonView\n     */\n    'error'?: string | null;\n    /**\n     * \n     * @type {boolean}\n     * @memberof ResultLessonView\n     */\n    'ok'?: boolean;\n}\n/**\n * \n * @export\n * @interface ResultLoggedPerson\n */\nexport interface ResultLoggedPerson {\n    /**\n     * \n     * @type {LoggedPerson}\n     * @memberof ResultLoggedPerson\n     */\n    'result'?: LoggedPerson;\n    /**\n     * \n     * @type {string}\n     * @memberof ResultLoggedPerson\n     */\n    'error'?: string | null;\n    /**\n     * \n     * @type {boolean}\n     * @memberof ResultLoggedPerson\n     */\n    'ok'?: boolean;\n}\n/**\n * \n * @export\n * @interface ResultPaginatedAbonnementView\n */\nexport interface ResultPaginatedAbonnementView {\n    /**\n     * \n     * @type {PaginatedAbonnementView}\n     * @memberof ResultPaginatedAbonnementView\n     */\n    'result'?: PaginatedAbonnementView;\n    /**\n     * \n     * @type {string}\n     * @memberof ResultPaginatedAbonnementView\n     */\n    'error'?: string | null;\n    /**\n     * \n     * @type {boolean}\n     * @memberof ResultPaginatedAbonnementView\n     */\n    'ok'?: boolean;\n}\n/**\n * \n * @export\n * @interface ResultPaginatedLessonView\n */\nexport interface ResultPaginatedLessonView {\n    /**\n     * \n     * @type {PaginatedLessonView}\n     * @memberof ResultPaginatedLessonView\n     */\n    'result'?: PaginatedLessonView;\n    /**\n     * \n     * @type {string}\n     * @memberof ResultPaginatedLessonView\n     */\n    'error'?: string | null;\n    /**\n     * \n     * @type {boolean}\n     * @memberof ResultPaginatedLessonView\n     */\n    'ok'?: boolean;\n}\n/**\n * \n * @export\n * @interface ResultPaginatedPerson\n */\nexport interface ResultPaginatedPerson {\n    /**\n     * \n     * @type {PaginatedPerson}\n     * @memberof ResultPaginatedPerson\n     */\n    'result'?: PaginatedPerson;\n    /**\n     * \n     * @type {string}\n     * @memberof ResultPaginatedPerson\n     */\n    'error'?: string | null;\n    /**\n     * \n     * @type {boolean}\n     * @memberof ResultPaginatedPerson\n     */\n    'ok'?: boolean;\n}\n/**\n * \n * @export\n * @interface ResultPaginatedRoomView\n */\nexport interface ResultPaginatedRoomView {\n    /**\n     * \n     * @type {PaginatedRoomView}\n     * @memberof ResultPaginatedRoomView\n     */\n    'result'?: PaginatedRoomView;\n    /**\n     * \n     * @type {string}\n     * @memberof ResultPaginatedRoomView\n     */\n    'error'?: string | null;\n    /**\n     * \n     * @type {boolean}\n     * @memberof ResultPaginatedRoomView\n     */\n    'ok'?: boolean;\n}\n/**\n * \n * @export\n * @interface ResultPaginatedSoldAbonnementView\n */\nexport interface ResultPaginatedSoldAbonnementView {\n    /**\n     * \n     * @type {PaginatedSoldAbonnementView}\n     * @memberof ResultPaginatedSoldAbonnementView\n     */\n    'result'?: PaginatedSoldAbonnementView;\n    /**\n     * \n     * @type {string}\n     * @memberof ResultPaginatedSoldAbonnementView\n     */\n    'error'?: string | null;\n    /**\n     * \n     * @type {boolean}\n     * @memberof ResultPaginatedSoldAbonnementView\n     */\n    'ok'?: boolean;\n}\n/**\n * \n * @export\n * @interface ResultPerson\n */\nexport interface ResultPerson {\n    /**\n     * \n     * @type {Person}\n     * @memberof ResultPerson\n     */\n    'result'?: Person;\n    /**\n     * \n     * @type {string}\n     * @memberof ResultPerson\n     */\n    'error'?: string | null;\n    /**\n     * \n     * @type {boolean}\n     * @memberof ResultPerson\n     */\n    'ok'?: boolean;\n}\n/**\n * \n * @export\n * @interface ResultRoomView\n */\nexport interface ResultRoomView {\n    /**\n     * \n     * @type {RoomView}\n     * @memberof ResultRoomView\n     */\n    'result'?: RoomView;\n    /**\n     * \n     * @type {string}\n     * @memberof ResultRoomView\n     */\n    'error'?: string | null;\n    /**\n     * \n     * @type {boolean}\n     * @memberof ResultRoomView\n     */\n    'ok'?: boolean;\n}\n/**\n * \n * @export\n * @interface ResultSoldAbonnementView\n */\nexport interface ResultSoldAbonnementView {\n    /**\n     * \n     * @type {SoldAbonnementView}\n     * @memberof ResultSoldAbonnementView\n     */\n    'result'?: SoldAbonnementView;\n    /**\n     * \n     * @type {string}\n     * @memberof ResultSoldAbonnementView\n     */\n    'error'?: string | null;\n    /**\n     * \n     * @type {boolean}\n     * @memberof ResultSoldAbonnementView\n     */\n    'ok'?: boolean;\n}\n/**\n * \n * @export\n * @interface ResultUnit\n */\nexport interface ResultUnit {\n    /**\n     * \n     * @type {object}\n     * @memberof ResultUnit\n     */\n    'result'?: object;\n    /**\n     * \n     * @type {string}\n     * @memberof ResultUnit\n     */\n    'error'?: string | null;\n    /**\n     * \n     * @type {boolean}\n     * @memberof ResultUnit\n     */\n    'ok'?: boolean;\n}\n/**\n * \n * @export\n * @interface RoomView\n */\nexport interface RoomView {\n    /**\n     * \n     * @type {number}\n     * @memberof RoomView\n     */\n    'id'?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof RoomView\n     */\n    'name'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RoomView\n     */\n    'description'?: string | null;\n}\n/**\n * \n * @export\n * @interface SaleAbonnement\n */\nexport interface SaleAbonnement {\n    /**\n     * \n     * @type {number}\n     * @memberof SaleAbonnement\n     */\n    'personId'?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof SaleAbonnement\n     */\n    'abonnementId'?: number;\n    /**\n     * \n     * @type {DiscountView}\n     * @memberof SaleAbonnement\n     */\n    'discount'?: DiscountView;\n}\n/**\n * \n * @export\n * @interface SoldAbonnementView\n */\nexport interface SoldAbonnementView {\n    /**\n     * \n     * @type {number}\n     * @memberof SoldAbonnementView\n     */\n    'id'?: number;\n    /**\n     * \n     * @type {boolean}\n     * @memberof SoldAbonnementView\n     */\n    'active'?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof SoldAbonnementView\n     */\n    'dateSale'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SoldAbonnementView\n     */\n    'dateExpiration'?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof SoldAbonnementView\n     */\n    'priceSold'?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof SoldAbonnementView\n     */\n    'visitCounter'?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof SoldAbonnementView\n     */\n    'name'?: string;\n    /**\n     * \n     * @type {AbonnementValidityView}\n     * @memberof SoldAbonnementView\n     */\n    'validity'?: AbonnementValidityView;\n    /**\n     * \n     * @type {number}\n     * @memberof SoldAbonnementView\n     */\n    'numberOfVisits'?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof SoldAbonnementView\n     */\n    'basePrice'?: number;\n    /**\n     * \n     * @type {DiscountView}\n     * @memberof SoldAbonnementView\n     */\n    'discount'?: DiscountView;\n    /**\n     * \n     * @type {Array<LessonView>}\n     * @memberof SoldAbonnementView\n     */\n    'lessons'?: Array<LessonView>;\n}\n/**\n * \n * @export\n * @interface ValidError\n */\nexport interface ValidError {\n    /**\n     * \n     * @type {Array<PropertyError>}\n     * @memberof ValidError\n     */\n    'properties'?: Array<PropertyError>;\n}\n\n/**\n * AbonnementApi - axios parameter creator\n * @export\n */\nexport const AbonnementApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @summary Обновляет данные абонимента\n         * @param {number} abonnementId \n         * @param {EditAbonnement} [editAbonnement] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1AbonnementAbonnementIdPut: async (abonnementId: number, editAbonnement?: EditAbonnement, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'abonnementId' is not null or undefined\n            assertParamExists('apiV1AbonnementAbonnementIdPut', 'abonnementId', abonnementId)\n            const localVarPath = `/api/v1/abonnement/{abonnementId}`\n                .replace(`{${\"abonnementId\"}}`, encodeURIComponent(String(abonnementId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            await setApiKeyToObject(localVarHeaderParameter, \"Authorization\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(editAbonnement, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Возвращает список абониментов\n         * @param {number} pageSize \n         * @param {number} pageNumber \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1AbonnementGet: async (pageSize: number, pageNumber: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'pageSize' is not null or undefined\n            assertParamExists('apiV1AbonnementGet', 'pageSize', pageSize)\n            // verify required parameter 'pageNumber' is not null or undefined\n            assertParamExists('apiV1AbonnementGet', 'pageNumber', pageNumber)\n            const localVarPath = `/api/v1/abonnement`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            await setApiKeyToObject(localVarHeaderParameter, \"Authorization\", configuration)\n\n            if (pageSize !== undefined) {\n                localVarQueryParameter['pageSize'] = pageSize;\n            }\n\n            if (pageNumber !== undefined) {\n                localVarQueryParameter['pageNumber'] = pageNumber;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Создает новый абонимент\n         * @param {CreateAbonnement} [createAbonnement] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1AbonnementPost: async (createAbonnement?: CreateAbonnement, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/v1/abonnement`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            await setApiKeyToObject(localVarHeaderParameter, \"Authorization\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(createAbonnement, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Возвращает список купленных абониментов пользователя\n         * @param {number} personId \n         * @param {number} pageSize \n         * @param {number} pageNumber \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1AbonnementSoldPersonIdGet: async (personId: number, pageSize: number, pageNumber: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'personId' is not null or undefined\n            assertParamExists('apiV1AbonnementSoldPersonIdGet', 'personId', personId)\n            // verify required parameter 'pageSize' is not null or undefined\n            assertParamExists('apiV1AbonnementSoldPersonIdGet', 'pageSize', pageSize)\n            // verify required parameter 'pageNumber' is not null or undefined\n            assertParamExists('apiV1AbonnementSoldPersonIdGet', 'pageNumber', pageNumber)\n            const localVarPath = `/api/v1/abonnement/sold/{personId}`\n                .replace(`{${\"personId\"}}`, encodeURIComponent(String(personId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            await setApiKeyToObject(localVarHeaderParameter, \"Authorization\", configuration)\n\n            if (pageSize !== undefined) {\n                localVarQueryParameter['pageSize'] = pageSize;\n            }\n\n            if (pageNumber !== undefined) {\n                localVarQueryParameter['pageNumber'] = pageNumber;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Продажа абонимента\n         * @param {SaleAbonnement} [saleAbonnement] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1AbonnementSoldPost: async (saleAbonnement?: SaleAbonnement, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/v1/abonnement/sold`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            await setApiKeyToObject(localVarHeaderParameter, \"Authorization\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(saleAbonnement, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * AbonnementApi - functional programming interface\n * @export\n */\nexport const AbonnementApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = AbonnementApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * \n         * @summary Обновляет данные абонимента\n         * @param {number} abonnementId \n         * @param {EditAbonnement} [editAbonnement] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiV1AbonnementAbonnementIdPut(abonnementId: number, editAbonnement?: EditAbonnement, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultAbonnementView>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AbonnementAbonnementIdPut(abonnementId, editAbonnement, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Возвращает список абониментов\n         * @param {number} pageSize \n         * @param {number} pageNumber \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiV1AbonnementGet(pageSize: number, pageNumber: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultPaginatedAbonnementView>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AbonnementGet(pageSize, pageNumber, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Создает новый абонимент\n         * @param {CreateAbonnement} [createAbonnement] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiV1AbonnementPost(createAbonnement?: CreateAbonnement, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultAbonnementView>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AbonnementPost(createAbonnement, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Возвращает список купленных абониментов пользователя\n         * @param {number} personId \n         * @param {number} pageSize \n         * @param {number} pageNumber \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiV1AbonnementSoldPersonIdGet(personId: number, pageSize: number, pageNumber: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultPaginatedSoldAbonnementView>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AbonnementSoldPersonIdGet(personId, pageSize, pageNumber, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Продажа абонимента\n         * @param {SaleAbonnement} [saleAbonnement] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiV1AbonnementSoldPost(saleAbonnement?: SaleAbonnement, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultSoldAbonnementView>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AbonnementSoldPost(saleAbonnement, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    }\n};\n\n/**\n * AbonnementApi - factory interface\n * @export\n */\nexport const AbonnementApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = AbonnementApiFp(configuration)\n    return {\n        /**\n         * \n         * @summary Обновляет данные абонимента\n         * @param {number} abonnementId \n         * @param {EditAbonnement} [editAbonnement] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1AbonnementAbonnementIdPut(abonnementId: number, editAbonnement?: EditAbonnement, options?: any): AxiosPromise<ResultAbonnementView> {\n            return localVarFp.apiV1AbonnementAbonnementIdPut(abonnementId, editAbonnement, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Возвращает список абониментов\n         * @param {number} pageSize \n         * @param {number} pageNumber \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1AbonnementGet(pageSize: number, pageNumber: number, options?: any): AxiosPromise<ResultPaginatedAbonnementView> {\n            return localVarFp.apiV1AbonnementGet(pageSize, pageNumber, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Создает новый абонимент\n         * @param {CreateAbonnement} [createAbonnement] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1AbonnementPost(createAbonnement?: CreateAbonnement, options?: any): AxiosPromise<ResultAbonnementView> {\n            return localVarFp.apiV1AbonnementPost(createAbonnement, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Возвращает список купленных абониментов пользователя\n         * @param {number} personId \n         * @param {number} pageSize \n         * @param {number} pageNumber \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1AbonnementSoldPersonIdGet(personId: number, pageSize: number, pageNumber: number, options?: any): AxiosPromise<ResultPaginatedSoldAbonnementView> {\n            return localVarFp.apiV1AbonnementSoldPersonIdGet(personId, pageSize, pageNumber, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Продажа абонимента\n         * @param {SaleAbonnement} [saleAbonnement] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1AbonnementSoldPost(saleAbonnement?: SaleAbonnement, options?: any): AxiosPromise<ResultSoldAbonnementView> {\n            return localVarFp.apiV1AbonnementSoldPost(saleAbonnement, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * AbonnementApi - object-oriented interface\n * @export\n * @class AbonnementApi\n * @extends {BaseAPI}\n */\nexport class AbonnementApi extends BaseAPI {\n    /**\n     * \n     * @summary Обновляет данные абонимента\n     * @param {number} abonnementId \n     * @param {EditAbonnement} [editAbonnement] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AbonnementApi\n     */\n    public apiV1AbonnementAbonnementIdPut(abonnementId: number, editAbonnement?: EditAbonnement, options?: AxiosRequestConfig) {\n        return AbonnementApiFp(this.configuration).apiV1AbonnementAbonnementIdPut(abonnementId, editAbonnement, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Возвращает список абониментов\n     * @param {number} pageSize \n     * @param {number} pageNumber \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AbonnementApi\n     */\n    public apiV1AbonnementGet(pageSize: number, pageNumber: number, options?: AxiosRequestConfig) {\n        return AbonnementApiFp(this.configuration).apiV1AbonnementGet(pageSize, pageNumber, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Создает новый абонимент\n     * @param {CreateAbonnement} [createAbonnement] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AbonnementApi\n     */\n    public apiV1AbonnementPost(createAbonnement?: CreateAbonnement, options?: AxiosRequestConfig) {\n        return AbonnementApiFp(this.configuration).apiV1AbonnementPost(createAbonnement, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Возвращает список купленных абониментов пользователя\n     * @param {number} personId \n     * @param {number} pageSize \n     * @param {number} pageNumber \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AbonnementApi\n     */\n    public apiV1AbonnementSoldPersonIdGet(personId: number, pageSize: number, pageNumber: number, options?: AxiosRequestConfig) {\n        return AbonnementApiFp(this.configuration).apiV1AbonnementSoldPersonIdGet(personId, pageSize, pageNumber, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Продажа абонимента\n     * @param {SaleAbonnement} [saleAbonnement] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AbonnementApi\n     */\n    public apiV1AbonnementSoldPost(saleAbonnement?: SaleAbonnement, options?: AxiosRequestConfig) {\n        return AbonnementApiFp(this.configuration).apiV1AbonnementSoldPost(saleAbonnement, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n\n/**\n * AuthApi - axios parameter creator\n * @export\n */\nexport const AuthApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @summary Активация созданного пользователя\n         * @param {ActivateAuth} [activateAuth] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1AuthActivatePost: async (activateAuth?: ActivateAuth, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/v1/auth/activate`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(activateAuth, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Авторизация пользователя\n         * @param {LoginUser} [loginUser] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1AuthLoginPost: async (loginUser?: LoginUser, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/v1/auth/login`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(loginUser, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Смена пароля на основе токена отправленного на почту\n         * @param {PasswordReset} [passwordReset] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1AuthPasswordResetPost: async (passwordReset?: PasswordReset, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/v1/auth/password-reset`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(passwordReset, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Запрос на смену пароля\n         * @param {PasswordResetQuery} [passwordResetQuery] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1AuthPasswordResetQueryPost: async (passwordResetQuery?: PasswordResetQuery, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/v1/auth/password-reset-query`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(passwordResetQuery, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Создание аккаунта для пользователя\n         * @param {number} personId \n         * @param {CreateAuth} [createAuth] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1AuthPersonIdPost: async (personId: number, createAuth?: CreateAuth, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'personId' is not null or undefined\n            assertParamExists('apiV1AuthPersonIdPost', 'personId', personId)\n            const localVarPath = `/api/v1/auth/{personId}`\n                .replace(`{${\"personId\"}}`, encodeURIComponent(String(personId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            await setApiKeyToObject(localVarHeaderParameter, \"Authorization\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(createAuth, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Получение нового token с помощью refresh token\n         * @param {Refresh} [refresh] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1AuthRefreshPost: async (refresh?: Refresh, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/v1/auth/refresh`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(refresh, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * AuthApi - functional programming interface\n * @export\n */\nexport const AuthApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * \n         * @summary Активация созданного пользователя\n         * @param {ActivateAuth} [activateAuth] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiV1AuthActivatePost(activateAuth?: ActivateAuth, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultUnit>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AuthActivatePost(activateAuth, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Авторизация пользователя\n         * @param {LoginUser} [loginUser] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiV1AuthLoginPost(loginUser?: LoginUser, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultLoggedPerson>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AuthLoginPost(loginUser, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Смена пароля на основе токена отправленного на почту\n         * @param {PasswordReset} [passwordReset] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiV1AuthPasswordResetPost(passwordReset?: PasswordReset, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultUnit>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AuthPasswordResetPost(passwordReset, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Запрос на смену пароля\n         * @param {PasswordResetQuery} [passwordResetQuery] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiV1AuthPasswordResetQueryPost(passwordResetQuery?: PasswordResetQuery, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultUnit>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AuthPasswordResetQueryPost(passwordResetQuery, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Создание аккаунта для пользователя\n         * @param {number} personId \n         * @param {CreateAuth} [createAuth] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiV1AuthPersonIdPost(personId: number, createAuth?: CreateAuth, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultUnit>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AuthPersonIdPost(personId, createAuth, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Получение нового token с помощью refresh token\n         * @param {Refresh} [refresh] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiV1AuthRefreshPost(refresh?: Refresh, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultLoggedPerson>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AuthRefreshPost(refresh, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    }\n};\n\n/**\n * AuthApi - factory interface\n * @export\n */\nexport const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = AuthApiFp(configuration)\n    return {\n        /**\n         * \n         * @summary Активация созданного пользователя\n         * @param {ActivateAuth} [activateAuth] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1AuthActivatePost(activateAuth?: ActivateAuth, options?: any): AxiosPromise<ResultUnit> {\n            return localVarFp.apiV1AuthActivatePost(activateAuth, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Авторизация пользователя\n         * @param {LoginUser} [loginUser] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1AuthLoginPost(loginUser?: LoginUser, options?: any): AxiosPromise<ResultLoggedPerson> {\n            return localVarFp.apiV1AuthLoginPost(loginUser, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Смена пароля на основе токена отправленного на почту\n         * @param {PasswordReset} [passwordReset] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1AuthPasswordResetPost(passwordReset?: PasswordReset, options?: any): AxiosPromise<ResultUnit> {\n            return localVarFp.apiV1AuthPasswordResetPost(passwordReset, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Запрос на смену пароля\n         * @param {PasswordResetQuery} [passwordResetQuery] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1AuthPasswordResetQueryPost(passwordResetQuery?: PasswordResetQuery, options?: any): AxiosPromise<ResultUnit> {\n            return localVarFp.apiV1AuthPasswordResetQueryPost(passwordResetQuery, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Создание аккаунта для пользователя\n         * @param {number} personId \n         * @param {CreateAuth} [createAuth] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1AuthPersonIdPost(personId: number, createAuth?: CreateAuth, options?: any): AxiosPromise<ResultUnit> {\n            return localVarFp.apiV1AuthPersonIdPost(personId, createAuth, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Получение нового token с помощью refresh token\n         * @param {Refresh} [refresh] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1AuthRefreshPost(refresh?: Refresh, options?: any): AxiosPromise<ResultLoggedPerson> {\n            return localVarFp.apiV1AuthRefreshPost(refresh, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * AuthApi - object-oriented interface\n * @export\n * @class AuthApi\n * @extends {BaseAPI}\n */\nexport class AuthApi extends BaseAPI {\n    /**\n     * \n     * @summary Активация созданного пользователя\n     * @param {ActivateAuth} [activateAuth] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AuthApi\n     */\n    public apiV1AuthActivatePost(activateAuth?: ActivateAuth, options?: AxiosRequestConfig) {\n        return AuthApiFp(this.configuration).apiV1AuthActivatePost(activateAuth, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Авторизация пользователя\n     * @param {LoginUser} [loginUser] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AuthApi\n     */\n    public apiV1AuthLoginPost(loginUser?: LoginUser, options?: AxiosRequestConfig) {\n        return AuthApiFp(this.configuration).apiV1AuthLoginPost(loginUser, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Смена пароля на основе токена отправленного на почту\n     * @param {PasswordReset} [passwordReset] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AuthApi\n     */\n    public apiV1AuthPasswordResetPost(passwordReset?: PasswordReset, options?: AxiosRequestConfig) {\n        return AuthApiFp(this.configuration).apiV1AuthPasswordResetPost(passwordReset, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Запрос на смену пароля\n     * @param {PasswordResetQuery} [passwordResetQuery] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AuthApi\n     */\n    public apiV1AuthPasswordResetQueryPost(passwordResetQuery?: PasswordResetQuery, options?: AxiosRequestConfig) {\n        return AuthApiFp(this.configuration).apiV1AuthPasswordResetQueryPost(passwordResetQuery, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Создание аккаунта для пользователя\n     * @param {number} personId \n     * @param {CreateAuth} [createAuth] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AuthApi\n     */\n    public apiV1AuthPersonIdPost(personId: number, createAuth?: CreateAuth, options?: AxiosRequestConfig) {\n        return AuthApiFp(this.configuration).apiV1AuthPersonIdPost(personId, createAuth, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Получение нового token с помощью refresh token\n     * @param {Refresh} [refresh] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AuthApi\n     */\n    public apiV1AuthRefreshPost(refresh?: Refresh, options?: AxiosRequestConfig) {\n        return AuthApiFp(this.configuration).apiV1AuthRefreshPost(refresh, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n\n/**\n * LessonApi - axios parameter creator\n * @export\n */\nexport const LessonApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @summary Возвращает список занятий\n         * @param {number} pageSize \n         * @param {number} pageNumber \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1LessonGet: async (pageSize: number, pageNumber: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'pageSize' is not null or undefined\n            assertParamExists('apiV1LessonGet', 'pageSize', pageSize)\n            // verify required parameter 'pageNumber' is not null or undefined\n            assertParamExists('apiV1LessonGet', 'pageNumber', pageNumber)\n            const localVarPath = `/api/v1/lesson`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            await setApiKeyToObject(localVarHeaderParameter, \"Authorization\", configuration)\n\n            if (pageSize !== undefined) {\n                localVarQueryParameter['pageSize'] = pageSize;\n            }\n\n            if (pageNumber !== undefined) {\n                localVarQueryParameter['pageNumber'] = pageNumber;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Обновляет данные занятия\n         * @param {number} lessonId \n         * @param {EditLesson} [editLesson] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1LessonLessonIdPut: async (lessonId: number, editLesson?: EditLesson, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'lessonId' is not null or undefined\n            assertParamExists('apiV1LessonLessonIdPut', 'lessonId', lessonId)\n            const localVarPath = `/api/v1/lesson/{lessonId}`\n                .replace(`{${\"lessonId\"}}`, encodeURIComponent(String(lessonId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            await setApiKeyToObject(localVarHeaderParameter, \"Authorization\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(editLesson, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Создает новое занятие\n         * @param {CreateLessonPerson} [createLessonPerson] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1LessonPost: async (createLessonPerson?: CreateLessonPerson, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/v1/lesson`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            await setApiKeyToObject(localVarHeaderParameter, \"Authorization\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(createLessonPerson, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * LessonApi - functional programming interface\n * @export\n */\nexport const LessonApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = LessonApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * \n         * @summary Возвращает список занятий\n         * @param {number} pageSize \n         * @param {number} pageNumber \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiV1LessonGet(pageSize: number, pageNumber: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultPaginatedLessonView>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1LessonGet(pageSize, pageNumber, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Обновляет данные занятия\n         * @param {number} lessonId \n         * @param {EditLesson} [editLesson] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiV1LessonLessonIdPut(lessonId: number, editLesson?: EditLesson, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultLessonView>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1LessonLessonIdPut(lessonId, editLesson, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Создает новое занятие\n         * @param {CreateLessonPerson} [createLessonPerson] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiV1LessonPost(createLessonPerson?: CreateLessonPerson, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultLessonView>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1LessonPost(createLessonPerson, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    }\n};\n\n/**\n * LessonApi - factory interface\n * @export\n */\nexport const LessonApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = LessonApiFp(configuration)\n    return {\n        /**\n         * \n         * @summary Возвращает список занятий\n         * @param {number} pageSize \n         * @param {number} pageNumber \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1LessonGet(pageSize: number, pageNumber: number, options?: any): AxiosPromise<ResultPaginatedLessonView> {\n            return localVarFp.apiV1LessonGet(pageSize, pageNumber, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Обновляет данные занятия\n         * @param {number} lessonId \n         * @param {EditLesson} [editLesson] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1LessonLessonIdPut(lessonId: number, editLesson?: EditLesson, options?: any): AxiosPromise<ResultLessonView> {\n            return localVarFp.apiV1LessonLessonIdPut(lessonId, editLesson, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Создает новое занятие\n         * @param {CreateLessonPerson} [createLessonPerson] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1LessonPost(createLessonPerson?: CreateLessonPerson, options?: any): AxiosPromise<ResultLessonView> {\n            return localVarFp.apiV1LessonPost(createLessonPerson, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * LessonApi - object-oriented interface\n * @export\n * @class LessonApi\n * @extends {BaseAPI}\n */\nexport class LessonApi extends BaseAPI {\n    /**\n     * \n     * @summary Возвращает список занятий\n     * @param {number} pageSize \n     * @param {number} pageNumber \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof LessonApi\n     */\n    public apiV1LessonGet(pageSize: number, pageNumber: number, options?: AxiosRequestConfig) {\n        return LessonApiFp(this.configuration).apiV1LessonGet(pageSize, pageNumber, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Обновляет данные занятия\n     * @param {number} lessonId \n     * @param {EditLesson} [editLesson] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof LessonApi\n     */\n    public apiV1LessonLessonIdPut(lessonId: number, editLesson?: EditLesson, options?: AxiosRequestConfig) {\n        return LessonApiFp(this.configuration).apiV1LessonLessonIdPut(lessonId, editLesson, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Создает новое занятие\n     * @param {CreateLessonPerson} [createLessonPerson] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof LessonApi\n     */\n    public apiV1LessonPost(createLessonPerson?: CreateLessonPerson, options?: AxiosRequestConfig) {\n        return LessonApiFp(this.configuration).apiV1LessonPost(createLessonPerson, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n\n/**\n * PersonApi - axios parameter creator\n * @export\n */\nexport const PersonApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @summary Возвращает список пользователей\n         * @param {number} pageSize \n         * @param {number} pageNumber \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1PersonGet: async (pageSize: number, pageNumber: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'pageSize' is not null or undefined\n            assertParamExists('apiV1PersonGet', 'pageSize', pageSize)\n            // verify required parameter 'pageNumber' is not null or undefined\n            assertParamExists('apiV1PersonGet', 'pageNumber', pageNumber)\n            const localVarPath = `/api/v1/person`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            await setApiKeyToObject(localVarHeaderParameter, \"Authorization\", configuration)\n\n            if (pageSize !== undefined) {\n                localVarQueryParameter['pageSize'] = pageSize;\n            }\n\n            if (pageNumber !== undefined) {\n                localVarQueryParameter['pageNumber'] = pageNumber;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Возвращает пользователя по id\n         * @param {number} personId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1PersonPersonIdGet: async (personId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'personId' is not null or undefined\n            assertParamExists('apiV1PersonPersonIdGet', 'personId', personId)\n            const localVarPath = `/api/v1/person/{personId}`\n                .replace(`{${\"personId\"}}`, encodeURIComponent(String(personId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            await setApiKeyToObject(localVarHeaderParameter, \"Authorization\", configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Обновляет данные пользователя\n         * @param {number} personId \n         * @param {EditPerson} [editPerson] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1PersonPersonIdPut: async (personId: number, editPerson?: EditPerson, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'personId' is not null or undefined\n            assertParamExists('apiV1PersonPersonIdPut', 'personId', personId)\n            const localVarPath = `/api/v1/person/{personId}`\n                .replace(`{${\"personId\"}}`, encodeURIComponent(String(personId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            await setApiKeyToObject(localVarHeaderParameter, \"Authorization\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(editPerson, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Создает нового пользователя\n         * @param {CreatePerson} [createPerson] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1PersonPost: async (createPerson?: CreatePerson, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/v1/person`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            await setApiKeyToObject(localVarHeaderParameter, \"Authorization\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(createPerson, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Возвращает текущего авторизованного пользователя\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1PersonSelfGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/v1/person/self`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            await setApiKeyToObject(localVarHeaderParameter, \"Authorization\", configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * PersonApi - functional programming interface\n * @export\n */\nexport const PersonApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = PersonApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * \n         * @summary Возвращает список пользователей\n         * @param {number} pageSize \n         * @param {number} pageNumber \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiV1PersonGet(pageSize: number, pageNumber: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultPaginatedPerson>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PersonGet(pageSize, pageNumber, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Возвращает пользователя по id\n         * @param {number} personId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiV1PersonPersonIdGet(personId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultPerson>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PersonPersonIdGet(personId, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Обновляет данные пользователя\n         * @param {number} personId \n         * @param {EditPerson} [editPerson] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiV1PersonPersonIdPut(personId: number, editPerson?: EditPerson, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultPerson>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PersonPersonIdPut(personId, editPerson, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Создает нового пользователя\n         * @param {CreatePerson} [createPerson] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiV1PersonPost(createPerson?: CreatePerson, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultPerson>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PersonPost(createPerson, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Возвращает текущего авторизованного пользователя\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiV1PersonSelfGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultPerson>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PersonSelfGet(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    }\n};\n\n/**\n * PersonApi - factory interface\n * @export\n */\nexport const PersonApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = PersonApiFp(configuration)\n    return {\n        /**\n         * \n         * @summary Возвращает список пользователей\n         * @param {number} pageSize \n         * @param {number} pageNumber \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1PersonGet(pageSize: number, pageNumber: number, options?: any): AxiosPromise<ResultPaginatedPerson> {\n            return localVarFp.apiV1PersonGet(pageSize, pageNumber, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Возвращает пользователя по id\n         * @param {number} personId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1PersonPersonIdGet(personId: number, options?: any): AxiosPromise<ResultPerson> {\n            return localVarFp.apiV1PersonPersonIdGet(personId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Обновляет данные пользователя\n         * @param {number} personId \n         * @param {EditPerson} [editPerson] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1PersonPersonIdPut(personId: number, editPerson?: EditPerson, options?: any): AxiosPromise<ResultPerson> {\n            return localVarFp.apiV1PersonPersonIdPut(personId, editPerson, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Создает нового пользователя\n         * @param {CreatePerson} [createPerson] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1PersonPost(createPerson?: CreatePerson, options?: any): AxiosPromise<ResultPerson> {\n            return localVarFp.apiV1PersonPost(createPerson, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Возвращает текущего авторизованного пользователя\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1PersonSelfGet(options?: any): AxiosPromise<ResultPerson> {\n            return localVarFp.apiV1PersonSelfGet(options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * PersonApi - object-oriented interface\n * @export\n * @class PersonApi\n * @extends {BaseAPI}\n */\nexport class PersonApi extends BaseAPI {\n    /**\n     * \n     * @summary Возвращает список пользователей\n     * @param {number} pageSize \n     * @param {number} pageNumber \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PersonApi\n     */\n    public apiV1PersonGet(pageSize: number, pageNumber: number, options?: AxiosRequestConfig) {\n        return PersonApiFp(this.configuration).apiV1PersonGet(pageSize, pageNumber, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Возвращает пользователя по id\n     * @param {number} personId \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PersonApi\n     */\n    public apiV1PersonPersonIdGet(personId: number, options?: AxiosRequestConfig) {\n        return PersonApiFp(this.configuration).apiV1PersonPersonIdGet(personId, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Обновляет данные пользователя\n     * @param {number} personId \n     * @param {EditPerson} [editPerson] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PersonApi\n     */\n    public apiV1PersonPersonIdPut(personId: number, editPerson?: EditPerson, options?: AxiosRequestConfig) {\n        return PersonApiFp(this.configuration).apiV1PersonPersonIdPut(personId, editPerson, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Создает нового пользователя\n     * @param {CreatePerson} [createPerson] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PersonApi\n     */\n    public apiV1PersonPost(createPerson?: CreatePerson, options?: AxiosRequestConfig) {\n        return PersonApiFp(this.configuration).apiV1PersonPost(createPerson, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Возвращает текущего авторизованного пользователя\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PersonApi\n     */\n    public apiV1PersonSelfGet(options?: AxiosRequestConfig) {\n        return PersonApiFp(this.configuration).apiV1PersonSelfGet(options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n\n/**\n * RoomApi - axios parameter creator\n * @export\n */\nexport const RoomApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @summary Возвращает список помещений\n         * @param {number} pageSize \n         * @param {number} pageNumber \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1RoomGet: async (pageSize: number, pageNumber: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'pageSize' is not null or undefined\n            assertParamExists('apiV1RoomGet', 'pageSize', pageSize)\n            // verify required parameter 'pageNumber' is not null or undefined\n            assertParamExists('apiV1RoomGet', 'pageNumber', pageNumber)\n            const localVarPath = `/api/v1/room`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            await setApiKeyToObject(localVarHeaderParameter, \"Authorization\", configuration)\n\n            if (pageSize !== undefined) {\n                localVarQueryParameter['pageSize'] = pageSize;\n            }\n\n            if (pageNumber !== undefined) {\n                localVarQueryParameter['pageNumber'] = pageNumber;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Создает новое помещение\n         * @param {CreateRoomPerson} [createRoomPerson] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1RoomPost: async (createRoomPerson?: CreateRoomPerson, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/v1/room`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            await setApiKeyToObject(localVarHeaderParameter, \"Authorization\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(createRoomPerson, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Обновляет данные помещения\n         * @param {number} roomId \n         * @param {EditRoom} [editRoom] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1RoomRoomIdPut: async (roomId: number, editRoom?: EditRoom, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'roomId' is not null or undefined\n            assertParamExists('apiV1RoomRoomIdPut', 'roomId', roomId)\n            const localVarPath = `/api/v1/room/{roomId}`\n                .replace(`{${\"roomId\"}}`, encodeURIComponent(String(roomId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            await setApiKeyToObject(localVarHeaderParameter, \"Authorization\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(editRoom, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * RoomApi - functional programming interface\n * @export\n */\nexport const RoomApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = RoomApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * \n         * @summary Возвращает список помещений\n         * @param {number} pageSize \n         * @param {number} pageNumber \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiV1RoomGet(pageSize: number, pageNumber: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultPaginatedRoomView>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1RoomGet(pageSize, pageNumber, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Создает новое помещение\n         * @param {CreateRoomPerson} [createRoomPerson] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiV1RoomPost(createRoomPerson?: CreateRoomPerson, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultRoomView>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1RoomPost(createRoomPerson, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Обновляет данные помещения\n         * @param {number} roomId \n         * @param {EditRoom} [editRoom] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiV1RoomRoomIdPut(roomId: number, editRoom?: EditRoom, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultRoomView>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1RoomRoomIdPut(roomId, editRoom, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    }\n};\n\n/**\n * RoomApi - factory interface\n * @export\n */\nexport const RoomApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = RoomApiFp(configuration)\n    return {\n        /**\n         * \n         * @summary Возвращает список помещений\n         * @param {number} pageSize \n         * @param {number} pageNumber \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1RoomGet(pageSize: number, pageNumber: number, options?: any): AxiosPromise<ResultPaginatedRoomView> {\n            return localVarFp.apiV1RoomGet(pageSize, pageNumber, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Создает новое помещение\n         * @param {CreateRoomPerson} [createRoomPerson] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1RoomPost(createRoomPerson?: CreateRoomPerson, options?: any): AxiosPromise<ResultRoomView> {\n            return localVarFp.apiV1RoomPost(createRoomPerson, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Обновляет данные помещения\n         * @param {number} roomId \n         * @param {EditRoom} [editRoom] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1RoomRoomIdPut(roomId: number, editRoom?: EditRoom, options?: any): AxiosPromise<ResultRoomView> {\n            return localVarFp.apiV1RoomRoomIdPut(roomId, editRoom, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * RoomApi - object-oriented interface\n * @export\n * @class RoomApi\n * @extends {BaseAPI}\n */\nexport class RoomApi extends BaseAPI {\n    /**\n     * \n     * @summary Возвращает список помещений\n     * @param {number} pageSize \n     * @param {number} pageNumber \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof RoomApi\n     */\n    public apiV1RoomGet(pageSize: number, pageNumber: number, options?: AxiosRequestConfig) {\n        return RoomApiFp(this.configuration).apiV1RoomGet(pageSize, pageNumber, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Создает новое помещение\n     * @param {CreateRoomPerson} [createRoomPerson] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof RoomApi\n     */\n    public apiV1RoomPost(createRoomPerson?: CreateRoomPerson, options?: AxiosRequestConfig) {\n        return RoomApiFp(this.configuration).apiV1RoomPost(createRoomPerson, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Обновляет данные помещения\n     * @param {number} roomId \n     * @param {EditRoom} [editRoom] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof RoomApi\n     */\n    public apiV1RoomRoomIdPut(roomId: number, editRoom?: EditRoom, options?: AxiosRequestConfig) {\n        return RoomApiFp(this.configuration).apiV1RoomRoomIdPut(roomId, editRoom, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Uritmix.Api\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface ConfigurationParameters {\n    apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);\n    username?: string;\n    password?: string;\n    accessToken?: string | Promise<string> | ((name?: string, scopes?: string[]) => string) | ((name?: string, scopes?: string[]) => Promise<string>);\n    basePath?: string;\n    baseOptions?: any;\n    formDataCtor?: new () => any;\n}\n\nexport class Configuration {\n    /**\n     * parameter for apiKey security\n     * @param name security name\n     * @memberof Configuration\n     */\n    apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);\n    /**\n     * parameter for basic security\n     *\n     * @type {string}\n     * @memberof Configuration\n     */\n    username?: string;\n    /**\n     * parameter for basic security\n     *\n     * @type {string}\n     * @memberof Configuration\n     */\n    password?: string;\n    /**\n     * parameter for oauth2 security\n     * @param name security name\n     * @param scopes oauth2 scope\n     * @memberof Configuration\n     */\n    accessToken?: string | Promise<string> | ((name?: string, scopes?: string[]) => string) | ((name?: string, scopes?: string[]) => Promise<string>);\n    /**\n     * override base path\n     *\n     * @type {string}\n     * @memberof Configuration\n     */\n    basePath?: string;\n    /**\n     * base options for axios calls\n     *\n     * @type {any}\n     * @memberof Configuration\n     */\n    baseOptions?: any;\n    /**\n     * The FormData constructor that will be used to create multipart form data\n     * requests. You can inject this here so that execution environments that\n     * do not support the FormData class can still run the generated client.\n     *\n     * @type {new () => FormData}\n     */\n    formDataCtor?: new () => any;\n\n    constructor(param: ConfigurationParameters = {}) {\n        this.apiKey = param.apiKey;\n        this.username = param.username;\n        this.password = param.password;\n        this.accessToken = param.accessToken;\n        this.basePath = param.basePath;\n        this.baseOptions = param.baseOptions;\n        this.formDataCtor = param.formDataCtor;\n    }\n\n    /**\n     * Check if the given MIME is a JSON MIME.\n     * JSON MIME examples:\n     *   application/json\n     *   application/json; charset=UTF8\n     *   APPLICATION/JSON\n     *   application/vnd.company+json\n     * @param mime - MIME (Multipurpose Internet Mail Extensions)\n     * @return True if the given MIME is JSON, false otherwise.\n     */\n    public isJsonMime(mime: string): boolean {\n        const jsonMime: RegExp = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');\n        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');\n    }\n}\n"],"names":["Api","BASE_PATH","replace","BaseAPI","configuration","basePath","axios","globalAxios","this","RequiredError","field","msg","_this","_inheritsLoose","Error","DUMMY_BASE_URL","assertParamExists","functionName","paramName","paramValue","setApiKeyToObject","object","keyParamName","apiKey","_context","setSearchParams","url","searchParams","URLSearchParams","search","objects","key","Array","isArray","item","append","set","toString","serializeDataIfNeeded","value","requestOptions","nonString","isJsonMime","headers","JSON","stringify","undefined","toPathString","pathname","hash","createRequestFunction","axiosArgs","axiosRequestArgs","options","request","AbonnementApiAxiosParamCreator","apiV1AbonnementAbonnementIdPut","abonnementId","editAbonnement","localVarPath","encodeURIComponent","String","localVarUrlObj","URL","baseOptions","localVarRequestOptions","method","localVarHeaderParameter","localVarQueryParameter","data","apiV1AbonnementGet","pageSize","pageNumber","_context2","apiV1AbonnementPost","createAbonnement","_context3","apiV1AbonnementSoldPersonIdGet","personId","_context4","apiV1AbonnementSoldPost","saleAbonnement","_context5","AbonnementApiFp","localVarAxiosParamCreator","AbonnementApi","_proto","then","_this2","_this3","_this4","_this5","AuthApiAxiosParamCreator","apiV1AuthActivatePost","activateAuth","apiV1AuthLoginPost","loginUser","apiV1AuthPasswordResetPost","passwordReset","apiV1AuthPasswordResetQueryPost","passwordResetQuery","apiV1AuthPersonIdPost","createAuth","_context15","apiV1AuthRefreshPost","refresh","AuthApiFp","AuthApi","_proto2","_this6","_this7","_this8","_this9","_this10","_this11","LessonApiAxiosParamCreator","apiV1LessonGet","_context23","apiV1LessonLessonIdPut","lessonId","editLesson","_context24","apiV1LessonPost","createLessonPerson","_context25","LessonApiFp","LessonApi","_proto3","_this12","_this13","_this14","PersonApiAxiosParamCreator","apiV1PersonGet","_context29","apiV1PersonPersonIdGet","_context30","apiV1PersonPersonIdPut","editPerson","_context31","apiV1PersonPost","createPerson","_context32","apiV1PersonSelfGet","_context33","PersonApiFp","PersonApi","_proto4","_this15","_this16","_this17","_this18","_this19","RoomApiAxiosParamCreator","apiV1RoomGet","_context39","apiV1RoomPost","createRoomPerson","_context40","apiV1RoomRoomIdPut","roomId","editRoom","_context41","RoomApiFp","RoomApi","_proto5","_this20","_this21","_this22","Configuration","param","username","password","accessToken","formDataCtor","mime","jsonMime","RegExp","test","toLowerCase","OneDay","OneMonth","ThreeMonths","HalfYear","Year","Manager","Admin","Server","NotActivated","Activated","Blocked","D0","D5","D10","D15","D20","D25","D30","D40","D50","D60","D70","D80","D90","localVarFp","API_URL","process","env","REACT_API_URL","api"],"mappings":"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"}