/**
 * Uritmix.Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { Configuration } from './configuration';
import { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { RequestArgs, BaseAPI } from './base';
/**
 *
 * @export
 * @interface Abonnement
 */
export interface Abonnement {
    /**
     *
     * @type {number}
     * @memberof Abonnement
     */
    'id'?: number;
    /**
     *
     * @type {string}
     * @memberof Abonnement
     */
    'name'?: string;
    /**
     *
     * @type {AbonnementValidityView}
     * @memberof Abonnement
     */
    'validity'?: AbonnementValidityView;
    /**
     *
     * @type {number}
     * @memberof Abonnement
     */
    'numberOfVisits'?: number;
    /**
     *
     * @type {number}
     * @memberof Abonnement
     */
    'basePrice'?: number;
    /**
     *
     * @type {DiscountView}
     * @memberof Abonnement
     */
    'discount'?: DiscountView;
    /**
     *
     * @type {Array<Lesson>}
     * @memberof Abonnement
     */
    'lessons'?: Array<Lesson>;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare const AbonnementValidityView: {
    readonly OneDay: "OneDay";
    readonly OneMonth: "OneMonth";
    readonly ThreeMonths: "ThreeMonths";
    readonly HalfYear: "HalfYear";
    readonly Year: "Year";
};
export declare type AbonnementValidityView = typeof AbonnementValidityView[keyof typeof AbonnementValidityView];
/**
 *
 * @export
 * @interface ActivateAuth
 */
export interface ActivateAuth {
    /**
     *
     * @type {string}
     * @memberof ActivateAuth
     */
    'confirmCode'?: string;
    /**
     *
     * @type {string}
     * @memberof ActivateAuth
     */
    'password'?: string;
    /**
     *
     * @type {string}
     * @memberof ActivateAuth
     */
    'passwordConfirm'?: string;
}
/**
 *
 * @export
 * @interface Auth
 */
export interface Auth {
    /**
     *
     * @type {AuthRoleView}
     * @memberof Auth
     */
    'role'?: AuthRoleView;
    /**
     *
     * @type {AuthStatusView}
     * @memberof Auth
     */
    'status'?: AuthStatusView;
    /**
     *
     * @type {string}
     * @memberof Auth
     */
    'email'?: string;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare const AuthRoleView: {
    readonly Manager: "Manager";
    readonly Admin: "Admin";
    readonly Server: "Server";
};
export declare type AuthRoleView = typeof AuthRoleView[keyof typeof AuthRoleView];
/**
 *
 * @export
 * @enum {string}
 */
export declare const AuthStatusView: {
    readonly NotActivated: "NotActivated";
    readonly Activated: "Activated";
    readonly Blocked: "Blocked";
};
export declare type AuthStatusView = typeof AuthStatusView[keyof typeof AuthStatusView];
/**
 *
 * @export
 * @interface CreateAbonnement
 */
export interface CreateAbonnement {
    /**
     *
     * @type {string}
     * @memberof CreateAbonnement
     */
    'name'?: string;
    /**
     *
     * @type {AbonnementValidityView}
     * @memberof CreateAbonnement
     */
    'validity'?: AbonnementValidityView;
    /**
     *
     * @type {number}
     * @memberof CreateAbonnement
     */
    'numberOfVisits'?: number;
    /**
     *
     * @type {number}
     * @memberof CreateAbonnement
     */
    'basePrice'?: number;
    /**
     *
     * @type {DiscountView}
     * @memberof CreateAbonnement
     */
    'discount'?: DiscountView;
    /**
     *
     * @type {Array<number>}
     * @memberof CreateAbonnement
     */
    'lessonIds'?: Array<number>;
}
/**
 *
 * @export
 * @interface CreateAuth
 */
export interface CreateAuth {
    /**
     *
     * @type {string}
     * @memberof CreateAuth
     */
    'email'?: string;
    /**
     *
     * @type {AuthRoleView}
     * @memberof CreateAuth
     */
    'role'?: AuthRoleView;
}
/**
 *
 * @export
 * @interface CreateLessonPerson
 */
export interface CreateLessonPerson {
    /**
     *
     * @type {string}
     * @memberof CreateLessonPerson
     */
    'name'?: string;
    /**
     *
     * @type {string}
     * @memberof CreateLessonPerson
     */
    'description'?: string | null;
    /**
     *
     * @type {number}
     * @memberof CreateLessonPerson
     */
    'trainerId'?: number;
    /**
     *
     * @type {number}
     * @memberof CreateLessonPerson
     */
    'durationMinute'?: number;
    /**
     *
     * @type {number}
     * @memberof CreateLessonPerson
     */
    'basePrice'?: number;
}
/**
 *
 * @export
 * @interface CreatePerson
 */
export interface CreatePerson {
    /**
     *
     * @type {string}
     * @memberof CreatePerson
     */
    'firstName'?: string;
    /**
     *
     * @type {string}
     * @memberof CreatePerson
     */
    'lastName'?: string;
    /**
     *
     * @type {boolean}
     * @memberof CreatePerson
     */
    'isTrainer'?: boolean;
    /**
     *
     * @type {string}
     * @memberof CreatePerson
     */
    'description'?: string | null;
}
/**
 *
 * @export
 * @interface CreateRoomPerson
 */
export interface CreateRoomPerson {
    /**
     *
     * @type {string}
     * @memberof CreateRoomPerson
     */
    'name'?: string;
    /**
     *
     * @type {string}
     * @memberof CreateRoomPerson
     */
    'description'?: string | null;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare const DiscountView: {
    readonly D0: "D0";
    readonly D5: "D5";
    readonly D10: "D10";
    readonly D15: "D15";
    readonly D20: "D20";
    readonly D25: "D25";
    readonly D30: "D30";
    readonly D40: "D40";
    readonly D50: "D50";
    readonly D60: "D60";
    readonly D70: "D70";
    readonly D80: "D80";
    readonly D90: "D90";
};
export declare type DiscountView = typeof DiscountView[keyof typeof DiscountView];
/**
 *
 * @export
 * @interface EditAbonnement
 */
export interface EditAbonnement {
    /**
     *
     * @type {string}
     * @memberof EditAbonnement
     */
    'name'?: string;
    /**
     *
     * @type {AbonnementValidityView}
     * @memberof EditAbonnement
     */
    'validity'?: AbonnementValidityView;
    /**
     *
     * @type {number}
     * @memberof EditAbonnement
     */
    'numberOfVisits'?: number;
    /**
     *
     * @type {number}
     * @memberof EditAbonnement
     */
    'basePrice'?: number;
    /**
     *
     * @type {DiscountView}
     * @memberof EditAbonnement
     */
    'discount'?: DiscountView;
    /**
     *
     * @type {Array<number>}
     * @memberof EditAbonnement
     */
    'lessonIds'?: Array<number>;
}
/**
 *
 * @export
 * @interface EditLesson
 */
export interface EditLesson {
    /**
     *
     * @type {string}
     * @memberof EditLesson
     */
    'name'?: string;
    /**
     *
     * @type {string}
     * @memberof EditLesson
     */
    'description'?: string | null;
    /**
     *
     * @type {number}
     * @memberof EditLesson
     */
    'trainerId'?: number;
    /**
     *
     * @type {number}
     * @memberof EditLesson
     */
    'durationMinute'?: number;
    /**
     *
     * @type {number}
     * @memberof EditLesson
     */
    'basePrice'?: number;
}
/**
 *
 * @export
 * @interface EditPerson
 */
export interface EditPerson {
    /**
     *
     * @type {string}
     * @memberof EditPerson
     */
    'firstName'?: string;
    /**
     *
     * @type {string}
     * @memberof EditPerson
     */
    'lastName'?: string;
    /**
     *
     * @type {string}
     * @memberof EditPerson
     */
    'description'?: string | null;
}
/**
 *
 * @export
 * @interface EditRoom
 */
export interface EditRoom {
    /**
     *
     * @type {string}
     * @memberof EditRoom
     */
    'name'?: string;
    /**
     *
     * @type {string}
     * @memberof EditRoom
     */
    'description'?: string | null;
}
/**
 *
 * @export
 * @interface ErrorResponse
 */
export interface ErrorResponse {
    /**
     *
     * @type {string}
     * @memberof ErrorResponse
     */
    'error'?: string;
    /**
     *
     * @type {string}
     * @memberof ErrorResponse
     */
    'code'?: string;
}
/**
 *
 * @export
 * @interface Lesson
 */
export interface Lesson {
    /**
     *
     * @type {number}
     * @memberof Lesson
     */
    'id'?: number;
    /**
     *
     * @type {string}
     * @memberof Lesson
     */
    'name'?: string;
    /**
     *
     * @type {string}
     * @memberof Lesson
     */
    'description'?: string | null;
    /**
     *
     * @type {number}
     * @memberof Lesson
     */
    'trainerId'?: number;
    /**
     *
     * @type {Person}
     * @memberof Lesson
     */
    'trainer'?: Person;
    /**
     *
     * @type {number}
     * @memberof Lesson
     */
    'durationMinute'?: number;
    /**
     *
     * @type {number}
     * @memberof Lesson
     */
    'basePrice'?: number;
}
/**
 *
 * @export
 * @interface LoggedPerson
 */
export interface LoggedPerson {
    /**
     *
     * @type {string}
     * @memberof LoggedPerson
     */
    'firstName'?: string;
    /**
     *
     * @type {string}
     * @memberof LoggedPerson
     */
    'lastName'?: string;
    /**
     *
     * @type {AuthRoleView}
     * @memberof LoggedPerson
     */
    'role'?: AuthRoleView;
    /**
     *
     * @type {string}
     * @memberof LoggedPerson
     */
    'email'?: string;
    /**
     *
     * @type {string}
     * @memberof LoggedPerson
     */
    'accessToken'?: string;
    /**
     *
     * @type {string}
     * @memberof LoggedPerson
     */
    'refreshToken'?: string;
}
/**
 *
 * @export
 * @interface LoginUser
 */
export interface LoginUser {
    /**
     *
     * @type {string}
     * @memberof LoginUser
     */
    'email'?: string;
    /**
     *
     * @type {string}
     * @memberof LoginUser
     */
    'password'?: string;
}
/**
 *
 * @export
 * @interface PaginatedAbonnement
 */
export interface PaginatedAbonnement {
    /**
     *
     * @type {number}
     * @memberof PaginatedAbonnement
     */
    'pageNumber'?: number;
    /**
     *
     * @type {number}
     * @memberof PaginatedAbonnement
     */
    'pageSize'?: number;
    /**
     *
     * @type {number}
     * @memberof PaginatedAbonnement
     */
    'totalPages'?: number;
    /**
     *
     * @type {number}
     * @memberof PaginatedAbonnement
     */
    'totalRecords'?: number;
    /**
     *
     * @type {boolean}
     * @memberof PaginatedAbonnement
     */
    'nextPageExists'?: boolean;
    /**
     *
     * @type {Array<Abonnement>}
     * @memberof PaginatedAbonnement
     */
    'results'?: Array<Abonnement> | null;
}
/**
 *
 * @export
 * @interface PaginatedLesson
 */
export interface PaginatedLesson {
    /**
     *
     * @type {number}
     * @memberof PaginatedLesson
     */
    'pageNumber'?: number;
    /**
     *
     * @type {number}
     * @memberof PaginatedLesson
     */
    'pageSize'?: number;
    /**
     *
     * @type {number}
     * @memberof PaginatedLesson
     */
    'totalPages'?: number;
    /**
     *
     * @type {number}
     * @memberof PaginatedLesson
     */
    'totalRecords'?: number;
    /**
     *
     * @type {boolean}
     * @memberof PaginatedLesson
     */
    'nextPageExists'?: boolean;
    /**
     *
     * @type {Array<Lesson>}
     * @memberof PaginatedLesson
     */
    'results'?: Array<Lesson> | null;
}
/**
 *
 * @export
 * @interface PaginatedPerson
 */
export interface PaginatedPerson {
    /**
     *
     * @type {number}
     * @memberof PaginatedPerson
     */
    'pageNumber'?: number;
    /**
     *
     * @type {number}
     * @memberof PaginatedPerson
     */
    'pageSize'?: number;
    /**
     *
     * @type {number}
     * @memberof PaginatedPerson
     */
    'totalPages'?: number;
    /**
     *
     * @type {number}
     * @memberof PaginatedPerson
     */
    'totalRecords'?: number;
    /**
     *
     * @type {boolean}
     * @memberof PaginatedPerson
     */
    'nextPageExists'?: boolean;
    /**
     *
     * @type {Array<Person>}
     * @memberof PaginatedPerson
     */
    'results'?: Array<Person> | null;
}
/**
 *
 * @export
 * @interface PaginatedRoom
 */
export interface PaginatedRoom {
    /**
     *
     * @type {number}
     * @memberof PaginatedRoom
     */
    'pageNumber'?: number;
    /**
     *
     * @type {number}
     * @memberof PaginatedRoom
     */
    'pageSize'?: number;
    /**
     *
     * @type {number}
     * @memberof PaginatedRoom
     */
    'totalPages'?: number;
    /**
     *
     * @type {number}
     * @memberof PaginatedRoom
     */
    'totalRecords'?: number;
    /**
     *
     * @type {boolean}
     * @memberof PaginatedRoom
     */
    'nextPageExists'?: boolean;
    /**
     *
     * @type {Array<Room>}
     * @memberof PaginatedRoom
     */
    'results'?: Array<Room> | null;
}
/**
 *
 * @export
 * @interface PaginatedSoldAbonnement
 */
export interface PaginatedSoldAbonnement {
    /**
     *
     * @type {number}
     * @memberof PaginatedSoldAbonnement
     */
    'pageNumber'?: number;
    /**
     *
     * @type {number}
     * @memberof PaginatedSoldAbonnement
     */
    'pageSize'?: number;
    /**
     *
     * @type {number}
     * @memberof PaginatedSoldAbonnement
     */
    'totalPages'?: number;
    /**
     *
     * @type {number}
     * @memberof PaginatedSoldAbonnement
     */
    'totalRecords'?: number;
    /**
     *
     * @type {boolean}
     * @memberof PaginatedSoldAbonnement
     */
    'nextPageExists'?: boolean;
    /**
     *
     * @type {Array<SoldAbonnement>}
     * @memberof PaginatedSoldAbonnement
     */
    'results'?: Array<SoldAbonnement> | null;
}
/**
 *
 * @export
 * @interface PasswordReset
 */
export interface PasswordReset {
    /**
     *
     * @type {string}
     * @memberof PasswordReset
     */
    'confirmCode'?: string;
    /**
     *
     * @type {string}
     * @memberof PasswordReset
     */
    'password'?: string;
    /**
     *
     * @type {string}
     * @memberof PasswordReset
     */
    'passwordConfirm'?: string;
}
/**
 *
 * @export
 * @interface PasswordResetQuery
 */
export interface PasswordResetQuery {
    /**
     *
     * @type {string}
     * @memberof PasswordResetQuery
     */
    'email'?: string;
}
/**
 *
 * @export
 * @interface Person
 */
export interface Person {
    /**
     *
     * @type {number}
     * @memberof Person
     */
    'id'?: number;
    /**
     *
     * @type {string}
     * @memberof Person
     */
    'firstName'?: string;
    /**
     *
     * @type {string}
     * @memberof Person
     */
    'lastName'?: string;
    /**
     *
     * @type {boolean}
     * @memberof Person
     */
    'isTrainer'?: boolean;
    /**
     *
     * @type {string}
     * @memberof Person
     */
    'description'?: string | null;
    /**
     *
     * @type {boolean}
     * @memberof Person
     */
    'haveAuth'?: boolean;
    /**
     *
     * @type {Auth}
     * @memberof Person
     */
    'auth'?: Auth;
}
/**
 *
 * @export
 * @interface PropertyError
 */
export interface PropertyError {
    /**
     *
     * @type {string}
     * @memberof PropertyError
     */
    'name'?: string;
    /**
     *
     * @type {string}
     * @memberof PropertyError
     */
    'error'?: string;
}
/**
 *
 * @export
 * @interface Refresh
 */
export interface Refresh {
    /**
     *
     * @type {string}
     * @memberof Refresh
     */
    'token'?: string;
}
/**
 *
 * @export
 * @interface ResultAbonnement
 */
export interface ResultAbonnement {
    /**
     *
     * @type {Abonnement}
     * @memberof ResultAbonnement
     */
    'result'?: Abonnement;
    /**
     *
     * @type {string}
     * @memberof ResultAbonnement
     */
    'error'?: string | null;
    /**
     *
     * @type {boolean}
     * @memberof ResultAbonnement
     */
    'ok'?: boolean;
}
/**
 *
 * @export
 * @interface ResultLesson
 */
export interface ResultLesson {
    /**
     *
     * @type {Lesson}
     * @memberof ResultLesson
     */
    'result'?: Lesson;
    /**
     *
     * @type {string}
     * @memberof ResultLesson
     */
    'error'?: string | null;
    /**
     *
     * @type {boolean}
     * @memberof ResultLesson
     */
    'ok'?: boolean;
}
/**
 *
 * @export
 * @interface ResultLoggedPerson
 */
export interface ResultLoggedPerson {
    /**
     *
     * @type {LoggedPerson}
     * @memberof ResultLoggedPerson
     */
    'result'?: LoggedPerson;
    /**
     *
     * @type {string}
     * @memberof ResultLoggedPerson
     */
    'error'?: string | null;
    /**
     *
     * @type {boolean}
     * @memberof ResultLoggedPerson
     */
    'ok'?: boolean;
}
/**
 *
 * @export
 * @interface ResultPaginatedAbonnement
 */
export interface ResultPaginatedAbonnement {
    /**
     *
     * @type {PaginatedAbonnement}
     * @memberof ResultPaginatedAbonnement
     */
    'result'?: PaginatedAbonnement;
    /**
     *
     * @type {string}
     * @memberof ResultPaginatedAbonnement
     */
    'error'?: string | null;
    /**
     *
     * @type {boolean}
     * @memberof ResultPaginatedAbonnement
     */
    'ok'?: boolean;
}
/**
 *
 * @export
 * @interface ResultPaginatedLesson
 */
export interface ResultPaginatedLesson {
    /**
     *
     * @type {PaginatedLesson}
     * @memberof ResultPaginatedLesson
     */
    'result'?: PaginatedLesson;
    /**
     *
     * @type {string}
     * @memberof ResultPaginatedLesson
     */
    'error'?: string | null;
    /**
     *
     * @type {boolean}
     * @memberof ResultPaginatedLesson
     */
    'ok'?: boolean;
}
/**
 *
 * @export
 * @interface ResultPaginatedPerson
 */
export interface ResultPaginatedPerson {
    /**
     *
     * @type {PaginatedPerson}
     * @memberof ResultPaginatedPerson
     */
    'result'?: PaginatedPerson;
    /**
     *
     * @type {string}
     * @memberof ResultPaginatedPerson
     */
    'error'?: string | null;
    /**
     *
     * @type {boolean}
     * @memberof ResultPaginatedPerson
     */
    'ok'?: boolean;
}
/**
 *
 * @export
 * @interface ResultPaginatedRoom
 */
export interface ResultPaginatedRoom {
    /**
     *
     * @type {PaginatedRoom}
     * @memberof ResultPaginatedRoom
     */
    'result'?: PaginatedRoom;
    /**
     *
     * @type {string}
     * @memberof ResultPaginatedRoom
     */
    'error'?: string | null;
    /**
     *
     * @type {boolean}
     * @memberof ResultPaginatedRoom
     */
    'ok'?: boolean;
}
/**
 *
 * @export
 * @interface ResultPaginatedSoldAbonnement
 */
export interface ResultPaginatedSoldAbonnement {
    /**
     *
     * @type {PaginatedSoldAbonnement}
     * @memberof ResultPaginatedSoldAbonnement
     */
    'result'?: PaginatedSoldAbonnement;
    /**
     *
     * @type {string}
     * @memberof ResultPaginatedSoldAbonnement
     */
    'error'?: string | null;
    /**
     *
     * @type {boolean}
     * @memberof ResultPaginatedSoldAbonnement
     */
    'ok'?: boolean;
}
/**
 *
 * @export
 * @interface ResultPerson
 */
export interface ResultPerson {
    /**
     *
     * @type {Person}
     * @memberof ResultPerson
     */
    'result'?: Person;
    /**
     *
     * @type {string}
     * @memberof ResultPerson
     */
    'error'?: string | null;
    /**
     *
     * @type {boolean}
     * @memberof ResultPerson
     */
    'ok'?: boolean;
}
/**
 *
 * @export
 * @interface ResultRoom
 */
export interface ResultRoom {
    /**
     *
     * @type {Room}
     * @memberof ResultRoom
     */
    'result'?: Room;
    /**
     *
     * @type {string}
     * @memberof ResultRoom
     */
    'error'?: string | null;
    /**
     *
     * @type {boolean}
     * @memberof ResultRoom
     */
    'ok'?: boolean;
}
/**
 *
 * @export
 * @interface ResultSoldAbonnement
 */
export interface ResultSoldAbonnement {
    /**
     *
     * @type {SoldAbonnement}
     * @memberof ResultSoldAbonnement
     */
    'result'?: SoldAbonnement;
    /**
     *
     * @type {string}
     * @memberof ResultSoldAbonnement
     */
    'error'?: string | null;
    /**
     *
     * @type {boolean}
     * @memberof ResultSoldAbonnement
     */
    'ok'?: boolean;
}
/**
 *
 * @export
 * @interface ResultUnit
 */
export interface ResultUnit {
    /**
     *
     * @type {object}
     * @memberof ResultUnit
     */
    'result'?: object;
    /**
     *
     * @type {string}
     * @memberof ResultUnit
     */
    'error'?: string | null;
    /**
     *
     * @type {boolean}
     * @memberof ResultUnit
     */
    'ok'?: boolean;
}
/**
 *
 * @export
 * @interface Room
 */
export interface Room {
    /**
     *
     * @type {number}
     * @memberof Room
     */
    'id'?: number;
    /**
     *
     * @type {string}
     * @memberof Room
     */
    'name'?: string;
    /**
     *
     * @type {string}
     * @memberof Room
     */
    'description'?: string | null;
}
/**
 *
 * @export
 * @interface SaleAbonnement
 */
export interface SaleAbonnement {
    /**
     *
     * @type {number}
     * @memberof SaleAbonnement
     */
    'personId'?: number;
    /**
     *
     * @type {number}
     * @memberof SaleAbonnement
     */
    'abonnementId'?: number;
    /**
     *
     * @type {DiscountView}
     * @memberof SaleAbonnement
     */
    'discount'?: DiscountView;
}
/**
 *
 * @export
 * @interface SoldAbonnement
 */
export interface SoldAbonnement {
    /**
     *
     * @type {number}
     * @memberof SoldAbonnement
     */
    'id'?: number;
    /**
     *
     * @type {boolean}
     * @memberof SoldAbonnement
     */
    'active'?: boolean;
    /**
     *
     * @type {string}
     * @memberof SoldAbonnement
     */
    'dateSale'?: string;
    /**
     *
     * @type {string}
     * @memberof SoldAbonnement
     */
    'dateExpiration'?: string;
    /**
     *
     * @type {number}
     * @memberof SoldAbonnement
     */
    'priceSold'?: number;
    /**
     *
     * @type {number}
     * @memberof SoldAbonnement
     */
    'visitCounter'?: number;
    /**
     *
     * @type {string}
     * @memberof SoldAbonnement
     */
    'name'?: string;
    /**
     *
     * @type {AbonnementValidityView}
     * @memberof SoldAbonnement
     */
    'validity'?: AbonnementValidityView;
    /**
     *
     * @type {number}
     * @memberof SoldAbonnement
     */
    'numberOfVisits'?: number;
    /**
     *
     * @type {number}
     * @memberof SoldAbonnement
     */
    'basePrice'?: number;
    /**
     *
     * @type {DiscountView}
     * @memberof SoldAbonnement
     */
    'discount'?: DiscountView;
    /**
     *
     * @type {Array<Lesson>}
     * @memberof SoldAbonnement
     */
    'lessons'?: Array<Lesson>;
}
/**
 *
 * @export
 * @interface ValidError
 */
export interface ValidError {
    /**
     *
     * @type {Array<PropertyError>}
     * @memberof ValidError
     */
    'properties'?: Array<PropertyError>;
}
/**
 * AbonnementApi - axios parameter creator
 * @export
 */
export declare const AbonnementApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     *
     * @summary Обновляет данные абонимента
     * @param {number} abonnementId
     * @param {EditAbonnement} [editAbonnement]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AbonnementAbonnementIdPut: (abonnementId: number, editAbonnement?: EditAbonnement | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Возвращает список абониментов
     * @param {number} pageSize
     * @param {number} pageNumber
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AbonnementGet: (pageSize: number, pageNumber: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Создает новый абонимент
     * @param {CreateAbonnement} [createAbonnement]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AbonnementPost: (createAbonnement?: CreateAbonnement | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Возвращает список купленных абониментов пользователя
     * @param {number} personId
     * @param {number} pageSize
     * @param {number} pageNumber
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AbonnementSoldPersonIdGet: (personId: number, pageSize: number, pageNumber: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Продажа абонимента
     * @param {SaleAbonnement} [saleAbonnement]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AbonnementSoldPost: (saleAbonnement?: SaleAbonnement | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * AbonnementApi - functional programming interface
 * @export
 */
export declare const AbonnementApiFp: (configuration?: Configuration | undefined) => {
    /**
     *
     * @summary Обновляет данные абонимента
     * @param {number} abonnementId
     * @param {EditAbonnement} [editAbonnement]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AbonnementAbonnementIdPut(abonnementId: number, editAbonnement?: EditAbonnement | undefined, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<ResultAbonnement>>;
    /**
     *
     * @summary Возвращает список абониментов
     * @param {number} pageSize
     * @param {number} pageNumber
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AbonnementGet(pageSize: number, pageNumber: number, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<ResultPaginatedAbonnement>>;
    /**
     *
     * @summary Создает новый абонимент
     * @param {CreateAbonnement} [createAbonnement]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AbonnementPost(createAbonnement?: CreateAbonnement | undefined, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<ResultAbonnement>>;
    /**
     *
     * @summary Возвращает список купленных абониментов пользователя
     * @param {number} personId
     * @param {number} pageSize
     * @param {number} pageNumber
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AbonnementSoldPersonIdGet(personId: number, pageSize: number, pageNumber: number, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<ResultPaginatedSoldAbonnement>>;
    /**
     *
     * @summary Продажа абонимента
     * @param {SaleAbonnement} [saleAbonnement]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AbonnementSoldPost(saleAbonnement?: SaleAbonnement | undefined, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<ResultSoldAbonnement>>;
};
/**
 * AbonnementApi - factory interface
 * @export
 */
export declare const AbonnementApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     *
     * @summary Обновляет данные абонимента
     * @param {number} abonnementId
     * @param {EditAbonnement} [editAbonnement]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AbonnementAbonnementIdPut(abonnementId: number, editAbonnement?: EditAbonnement | undefined, options?: any): AxiosPromise<ResultAbonnement>;
    /**
     *
     * @summary Возвращает список абониментов
     * @param {number} pageSize
     * @param {number} pageNumber
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AbonnementGet(pageSize: number, pageNumber: number, options?: any): AxiosPromise<ResultPaginatedAbonnement>;
    /**
     *
     * @summary Создает новый абонимент
     * @param {CreateAbonnement} [createAbonnement]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AbonnementPost(createAbonnement?: CreateAbonnement | undefined, options?: any): AxiosPromise<ResultAbonnement>;
    /**
     *
     * @summary Возвращает список купленных абониментов пользователя
     * @param {number} personId
     * @param {number} pageSize
     * @param {number} pageNumber
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AbonnementSoldPersonIdGet(personId: number, pageSize: number, pageNumber: number, options?: any): AxiosPromise<ResultPaginatedSoldAbonnement>;
    /**
     *
     * @summary Продажа абонимента
     * @param {SaleAbonnement} [saleAbonnement]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AbonnementSoldPost(saleAbonnement?: SaleAbonnement | undefined, options?: any): AxiosPromise<ResultSoldAbonnement>;
};
/**
 * AbonnementApi - object-oriented interface
 * @export
 * @class AbonnementApi
 * @extends {BaseAPI}
 */
export declare class AbonnementApi extends BaseAPI {
    /**
     *
     * @summary Обновляет данные абонимента
     * @param {number} abonnementId
     * @param {EditAbonnement} [editAbonnement]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AbonnementApi
     */
    apiV1AbonnementAbonnementIdPut(abonnementId: number, editAbonnement?: EditAbonnement, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ResultAbonnement, any>>;
    /**
     *
     * @summary Возвращает список абониментов
     * @param {number} pageSize
     * @param {number} pageNumber
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AbonnementApi
     */
    apiV1AbonnementGet(pageSize: number, pageNumber: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ResultPaginatedAbonnement, any>>;
    /**
     *
     * @summary Создает новый абонимент
     * @param {CreateAbonnement} [createAbonnement]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AbonnementApi
     */
    apiV1AbonnementPost(createAbonnement?: CreateAbonnement, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ResultAbonnement, any>>;
    /**
     *
     * @summary Возвращает список купленных абониментов пользователя
     * @param {number} personId
     * @param {number} pageSize
     * @param {number} pageNumber
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AbonnementApi
     */
    apiV1AbonnementSoldPersonIdGet(personId: number, pageSize: number, pageNumber: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ResultPaginatedSoldAbonnement, any>>;
    /**
     *
     * @summary Продажа абонимента
     * @param {SaleAbonnement} [saleAbonnement]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AbonnementApi
     */
    apiV1AbonnementSoldPost(saleAbonnement?: SaleAbonnement, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ResultSoldAbonnement, any>>;
}
/**
 * AuthApi - axios parameter creator
 * @export
 */
export declare const AuthApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     *
     * @summary Активация созданного пользователя
     * @param {ActivateAuth} [activateAuth]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AuthActivatePost: (activateAuth?: ActivateAuth | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Авторизация пользователя
     * @param {LoginUser} [loginUser]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AuthLoginPost: (loginUser?: LoginUser | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Смена пароля на основе токена отправленного на почту
     * @param {PasswordReset} [passwordReset]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AuthPasswordResetPost: (passwordReset?: PasswordReset | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Запрос на смену пароля
     * @param {PasswordResetQuery} [passwordResetQuery]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AuthPasswordResetQueryPost: (passwordResetQuery?: PasswordResetQuery | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Создание аккаунта для пользователя
     * @param {number} personId
     * @param {CreateAuth} [createAuth]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AuthPersonIdPost: (personId: number, createAuth?: CreateAuth | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Получение нового token с помощью refresh token
     * @param {Refresh} [refresh]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AuthRefreshPost: (refresh?: Refresh | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * AuthApi - functional programming interface
 * @export
 */
export declare const AuthApiFp: (configuration?: Configuration | undefined) => {
    /**
     *
     * @summary Активация созданного пользователя
     * @param {ActivateAuth} [activateAuth]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AuthActivatePost(activateAuth?: ActivateAuth | undefined, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<ResultUnit>>;
    /**
     *
     * @summary Авторизация пользователя
     * @param {LoginUser} [loginUser]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AuthLoginPost(loginUser?: LoginUser | undefined, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<ResultLoggedPerson>>;
    /**
     *
     * @summary Смена пароля на основе токена отправленного на почту
     * @param {PasswordReset} [passwordReset]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AuthPasswordResetPost(passwordReset?: PasswordReset | undefined, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<ResultUnit>>;
    /**
     *
     * @summary Запрос на смену пароля
     * @param {PasswordResetQuery} [passwordResetQuery]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AuthPasswordResetQueryPost(passwordResetQuery?: PasswordResetQuery | undefined, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<ResultUnit>>;
    /**
     *
     * @summary Создание аккаунта для пользователя
     * @param {number} personId
     * @param {CreateAuth} [createAuth]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AuthPersonIdPost(personId: number, createAuth?: CreateAuth | undefined, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<ResultUnit>>;
    /**
     *
     * @summary Получение нового token с помощью refresh token
     * @param {Refresh} [refresh]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AuthRefreshPost(refresh?: Refresh | undefined, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<ResultLoggedPerson>>;
};
/**
 * AuthApi - factory interface
 * @export
 */
export declare const AuthApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     *
     * @summary Активация созданного пользователя
     * @param {ActivateAuth} [activateAuth]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AuthActivatePost(activateAuth?: ActivateAuth | undefined, options?: any): AxiosPromise<ResultUnit>;
    /**
     *
     * @summary Авторизация пользователя
     * @param {LoginUser} [loginUser]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AuthLoginPost(loginUser?: LoginUser | undefined, options?: any): AxiosPromise<ResultLoggedPerson>;
    /**
     *
     * @summary Смена пароля на основе токена отправленного на почту
     * @param {PasswordReset} [passwordReset]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AuthPasswordResetPost(passwordReset?: PasswordReset | undefined, options?: any): AxiosPromise<ResultUnit>;
    /**
     *
     * @summary Запрос на смену пароля
     * @param {PasswordResetQuery} [passwordResetQuery]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AuthPasswordResetQueryPost(passwordResetQuery?: PasswordResetQuery | undefined, options?: any): AxiosPromise<ResultUnit>;
    /**
     *
     * @summary Создание аккаунта для пользователя
     * @param {number} personId
     * @param {CreateAuth} [createAuth]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AuthPersonIdPost(personId: number, createAuth?: CreateAuth | undefined, options?: any): AxiosPromise<ResultUnit>;
    /**
     *
     * @summary Получение нового token с помощью refresh token
     * @param {Refresh} [refresh]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AuthRefreshPost(refresh?: Refresh | undefined, options?: any): AxiosPromise<ResultLoggedPerson>;
};
/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export declare class AuthApi extends BaseAPI {
    /**
     *
     * @summary Активация созданного пользователя
     * @param {ActivateAuth} [activateAuth]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    apiV1AuthActivatePost(activateAuth?: ActivateAuth, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ResultUnit, any>>;
    /**
     *
     * @summary Авторизация пользователя
     * @param {LoginUser} [loginUser]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    apiV1AuthLoginPost(loginUser?: LoginUser, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ResultLoggedPerson, any>>;
    /**
     *
     * @summary Смена пароля на основе токена отправленного на почту
     * @param {PasswordReset} [passwordReset]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    apiV1AuthPasswordResetPost(passwordReset?: PasswordReset, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ResultUnit, any>>;
    /**
     *
     * @summary Запрос на смену пароля
     * @param {PasswordResetQuery} [passwordResetQuery]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    apiV1AuthPasswordResetQueryPost(passwordResetQuery?: PasswordResetQuery, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ResultUnit, any>>;
    /**
     *
     * @summary Создание аккаунта для пользователя
     * @param {number} personId
     * @param {CreateAuth} [createAuth]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    apiV1AuthPersonIdPost(personId: number, createAuth?: CreateAuth, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ResultUnit, any>>;
    /**
     *
     * @summary Получение нового token с помощью refresh token
     * @param {Refresh} [refresh]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    apiV1AuthRefreshPost(refresh?: Refresh, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ResultLoggedPerson, any>>;
}
/**
 * LessonApi - axios parameter creator
 * @export
 */
export declare const LessonApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     *
     * @summary Возвращает список занятий
     * @param {number} pageSize
     * @param {number} pageNumber
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1LessonGet: (pageSize: number, pageNumber: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Обновляет данные занятия
     * @param {number} lessonId
     * @param {EditLesson} [editLesson]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1LessonLessonIdPut: (lessonId: number, editLesson?: EditLesson | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Создает новое занятие
     * @param {CreateLessonPerson} [createLessonPerson]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1LessonPost: (createLessonPerson?: CreateLessonPerson | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * LessonApi - functional programming interface
 * @export
 */
export declare const LessonApiFp: (configuration?: Configuration | undefined) => {
    /**
     *
     * @summary Возвращает список занятий
     * @param {number} pageSize
     * @param {number} pageNumber
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1LessonGet(pageSize: number, pageNumber: number, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<ResultPaginatedLesson>>;
    /**
     *
     * @summary Обновляет данные занятия
     * @param {number} lessonId
     * @param {EditLesson} [editLesson]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1LessonLessonIdPut(lessonId: number, editLesson?: EditLesson | undefined, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<ResultLesson>>;
    /**
     *
     * @summary Создает новое занятие
     * @param {CreateLessonPerson} [createLessonPerson]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1LessonPost(createLessonPerson?: CreateLessonPerson | undefined, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<ResultLesson>>;
};
/**
 * LessonApi - factory interface
 * @export
 */
export declare const LessonApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     *
     * @summary Возвращает список занятий
     * @param {number} pageSize
     * @param {number} pageNumber
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1LessonGet(pageSize: number, pageNumber: number, options?: any): AxiosPromise<ResultPaginatedLesson>;
    /**
     *
     * @summary Обновляет данные занятия
     * @param {number} lessonId
     * @param {EditLesson} [editLesson]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1LessonLessonIdPut(lessonId: number, editLesson?: EditLesson | undefined, options?: any): AxiosPromise<ResultLesson>;
    /**
     *
     * @summary Создает новое занятие
     * @param {CreateLessonPerson} [createLessonPerson]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1LessonPost(createLessonPerson?: CreateLessonPerson | undefined, options?: any): AxiosPromise<ResultLesson>;
};
/**
 * LessonApi - object-oriented interface
 * @export
 * @class LessonApi
 * @extends {BaseAPI}
 */
export declare class LessonApi extends BaseAPI {
    /**
     *
     * @summary Возвращает список занятий
     * @param {number} pageSize
     * @param {number} pageNumber
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LessonApi
     */
    apiV1LessonGet(pageSize: number, pageNumber: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ResultPaginatedLesson, any>>;
    /**
     *
     * @summary Обновляет данные занятия
     * @param {number} lessonId
     * @param {EditLesson} [editLesson]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LessonApi
     */
    apiV1LessonLessonIdPut(lessonId: number, editLesson?: EditLesson, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ResultLesson, any>>;
    /**
     *
     * @summary Создает новое занятие
     * @param {CreateLessonPerson} [createLessonPerson]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LessonApi
     */
    apiV1LessonPost(createLessonPerson?: CreateLessonPerson, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ResultLesson, any>>;
}
/**
 * PersonApi - axios parameter creator
 * @export
 */
export declare const PersonApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     *
     * @summary Возвращает список пользователей
     * @param {number} pageSize
     * @param {number} pageNumber
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PersonGet: (pageSize: number, pageNumber: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Возвращает пользователя по id
     * @param {number} personId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PersonPersonIdGet: (personId: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Обновляет данные пользователя
     * @param {number} personId
     * @param {EditPerson} [editPerson]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PersonPersonIdPut: (personId: number, editPerson?: EditPerson | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Создает нового пользователя
     * @param {CreatePerson} [createPerson]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PersonPost: (createPerson?: CreatePerson | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Возвращает текущего авторизованного пользователя
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PersonSelfGet: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * PersonApi - functional programming interface
 * @export
 */
export declare const PersonApiFp: (configuration?: Configuration | undefined) => {
    /**
     *
     * @summary Возвращает список пользователей
     * @param {number} pageSize
     * @param {number} pageNumber
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PersonGet(pageSize: number, pageNumber: number, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<ResultPaginatedPerson>>;
    /**
     *
     * @summary Возвращает пользователя по id
     * @param {number} personId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PersonPersonIdGet(personId: number, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<ResultPerson>>;
    /**
     *
     * @summary Обновляет данные пользователя
     * @param {number} personId
     * @param {EditPerson} [editPerson]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PersonPersonIdPut(personId: number, editPerson?: EditPerson | undefined, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<ResultPerson>>;
    /**
     *
     * @summary Создает нового пользователя
     * @param {CreatePerson} [createPerson]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PersonPost(createPerson?: CreatePerson | undefined, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<ResultPerson>>;
    /**
     *
     * @summary Возвращает текущего авторизованного пользователя
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PersonSelfGet(options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<ResultPerson>>;
};
/**
 * PersonApi - factory interface
 * @export
 */
export declare const PersonApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     *
     * @summary Возвращает список пользователей
     * @param {number} pageSize
     * @param {number} pageNumber
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PersonGet(pageSize: number, pageNumber: number, options?: any): AxiosPromise<ResultPaginatedPerson>;
    /**
     *
     * @summary Возвращает пользователя по id
     * @param {number} personId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PersonPersonIdGet(personId: number, options?: any): AxiosPromise<ResultPerson>;
    /**
     *
     * @summary Обновляет данные пользователя
     * @param {number} personId
     * @param {EditPerson} [editPerson]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PersonPersonIdPut(personId: number, editPerson?: EditPerson | undefined, options?: any): AxiosPromise<ResultPerson>;
    /**
     *
     * @summary Создает нового пользователя
     * @param {CreatePerson} [createPerson]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PersonPost(createPerson?: CreatePerson | undefined, options?: any): AxiosPromise<ResultPerson>;
    /**
     *
     * @summary Возвращает текущего авторизованного пользователя
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1PersonSelfGet(options?: any): AxiosPromise<ResultPerson>;
};
/**
 * PersonApi - object-oriented interface
 * @export
 * @class PersonApi
 * @extends {BaseAPI}
 */
export declare class PersonApi extends BaseAPI {
    /**
     *
     * @summary Возвращает список пользователей
     * @param {number} pageSize
     * @param {number} pageNumber
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonApi
     */
    apiV1PersonGet(pageSize: number, pageNumber: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ResultPaginatedPerson, any>>;
    /**
     *
     * @summary Возвращает пользователя по id
     * @param {number} personId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonApi
     */
    apiV1PersonPersonIdGet(personId: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ResultPerson, any>>;
    /**
     *
     * @summary Обновляет данные пользователя
     * @param {number} personId
     * @param {EditPerson} [editPerson]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonApi
     */
    apiV1PersonPersonIdPut(personId: number, editPerson?: EditPerson, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ResultPerson, any>>;
    /**
     *
     * @summary Создает нового пользователя
     * @param {CreatePerson} [createPerson]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonApi
     */
    apiV1PersonPost(createPerson?: CreatePerson, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ResultPerson, any>>;
    /**
     *
     * @summary Возвращает текущего авторизованного пользователя
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonApi
     */
    apiV1PersonSelfGet(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ResultPerson, any>>;
}
/**
 * RoomApi - axios parameter creator
 * @export
 */
export declare const RoomApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     *
     * @summary Возвращает список помещений
     * @param {number} pageSize
     * @param {number} pageNumber
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1RoomGet: (pageSize: number, pageNumber: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Создает новое помещение
     * @param {CreateRoomPerson} [createRoomPerson]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1RoomPost: (createRoomPerson?: CreateRoomPerson | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Обновляет данные помещения
     * @param {number} roomId
     * @param {EditRoom} [editRoom]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1RoomRoomIdPut: (roomId: number, editRoom?: EditRoom | undefined, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * RoomApi - functional programming interface
 * @export
 */
export declare const RoomApiFp: (configuration?: Configuration | undefined) => {
    /**
     *
     * @summary Возвращает список помещений
     * @param {number} pageSize
     * @param {number} pageNumber
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1RoomGet(pageSize: number, pageNumber: number, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<ResultPaginatedRoom>>;
    /**
     *
     * @summary Создает новое помещение
     * @param {CreateRoomPerson} [createRoomPerson]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1RoomPost(createRoomPerson?: CreateRoomPerson | undefined, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<ResultRoom>>;
    /**
     *
     * @summary Обновляет данные помещения
     * @param {number} roomId
     * @param {EditRoom} [editRoom]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1RoomRoomIdPut(roomId: number, editRoom?: EditRoom | undefined, options?: AxiosRequestConfig<any> | undefined): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<ResultRoom>>;
};
/**
 * RoomApi - factory interface
 * @export
 */
export declare const RoomApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     *
     * @summary Возвращает список помещений
     * @param {number} pageSize
     * @param {number} pageNumber
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1RoomGet(pageSize: number, pageNumber: number, options?: any): AxiosPromise<ResultPaginatedRoom>;
    /**
     *
     * @summary Создает новое помещение
     * @param {CreateRoomPerson} [createRoomPerson]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1RoomPost(createRoomPerson?: CreateRoomPerson | undefined, options?: any): AxiosPromise<ResultRoom>;
    /**
     *
     * @summary Обновляет данные помещения
     * @param {number} roomId
     * @param {EditRoom} [editRoom]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1RoomRoomIdPut(roomId: number, editRoom?: EditRoom | undefined, options?: any): AxiosPromise<ResultRoom>;
};
/**
 * RoomApi - object-oriented interface
 * @export
 * @class RoomApi
 * @extends {BaseAPI}
 */
export declare class RoomApi extends BaseAPI {
    /**
     *
     * @summary Возвращает список помещений
     * @param {number} pageSize
     * @param {number} pageNumber
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomApi
     */
    apiV1RoomGet(pageSize: number, pageNumber: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ResultPaginatedRoom, any>>;
    /**
     *
     * @summary Создает новое помещение
     * @param {CreateRoomPerson} [createRoomPerson]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomApi
     */
    apiV1RoomPost(createRoomPerson?: CreateRoomPerson, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ResultRoom, any>>;
    /**
     *
     * @summary Обновляет данные помещения
     * @param {number} roomId
     * @param {EditRoom} [editRoom]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomApi
     */
    apiV1RoomRoomIdPut(roomId: number, editRoom?: EditRoom, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ResultRoom, any>>;
}
