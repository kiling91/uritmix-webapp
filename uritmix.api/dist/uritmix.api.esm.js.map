{"version":3,"file":"uritmix.api.esm.js","sources":["../src/api/base.ts","../src/api/common.ts","../src/api/api.ts","../src/api/configuration.ts","../src/api/index.ts","../src/index.tsx"],"sourcesContent":["/* tslint:disable */\n/* eslint-disable */\n/**\n * Uritmix.Api\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport { Configuration } from \"./configuration\";\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';\n\nexport const BASE_PATH = \"http://localhost\".replace(/\\/+$/, \"\");\n\n/**\n *\n * @export\n */\nexport const COLLECTION_FORMATS = {\n    csv: \",\",\n    ssv: \" \",\n    tsv: \"\\t\",\n    pipes: \"|\",\n};\n\n/**\n *\n * @export\n * @interface RequestArgs\n */\nexport interface RequestArgs {\n    url: string;\n    options: AxiosRequestConfig;\n}\n\n/**\n *\n * @export\n * @class BaseAPI\n */\nexport class BaseAPI {\n    protected configuration: Configuration | undefined;\n\n    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected axios: AxiosInstance = globalAxios) {\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = configuration.basePath || this.basePath;\n        }\n    }\n};\n\n/**\n *\n * @export\n * @class RequiredError\n * @extends {Error}\n */\nexport class RequiredError extends Error {\n    name: \"RequiredError\" = \"RequiredError\";\n    constructor(public field: string, msg?: string) {\n        super(msg);\n    }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Uritmix.Api\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport { Configuration } from \"./configuration\";\nimport { RequiredError, RequestArgs } from \"./base\";\nimport { AxiosInstance, AxiosResponse } from 'axios';\n\n/**\n *\n * @export\n */\nexport const DUMMY_BASE_URL = 'https://example.com'\n\n/**\n *\n * @throws {RequiredError}\n * @export\n */\nexport const assertParamExists = function (functionName: string, paramName: string, paramValue: unknown) {\n    if (paramValue === null || paramValue === undefined) {\n        throw new RequiredError(paramName, `Required parameter ${paramName} was null or undefined when calling ${functionName}.`);\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setApiKeyToObject = async function (object: any, keyParamName: string, configuration?: Configuration) {\n    if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n            ? await configuration.apiKey(keyParamName)\n            : await configuration.apiKey;\n        object[keyParamName] = localVarApiKeyValue;\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setBasicAuthToObject = function (object: any, configuration?: Configuration) {\n    if (configuration && (configuration.username || configuration.password)) {\n        object[\"auth\"] = { username: configuration.username, password: configuration.password };\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setBearerAuthToObject = async function (object: any, configuration?: Configuration) {\n    if (configuration && configuration.accessToken) {\n        const accessToken = typeof configuration.accessToken === 'function'\n            ? await configuration.accessToken()\n            : await configuration.accessToken;\n        object[\"Authorization\"] = \"Bearer \" + accessToken;\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setOAuthToObject = async function (object: any, name: string, scopes: string[], configuration?: Configuration) {\n    if (configuration && configuration.accessToken) {\n        const localVarAccessTokenValue = typeof configuration.accessToken === 'function'\n            ? await configuration.accessToken(name, scopes)\n            : await configuration.accessToken;\n        object[\"Authorization\"] = \"Bearer \" + localVarAccessTokenValue;\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setSearchParams = function (url: URL, ...objects: any[]) {\n    const searchParams = new URLSearchParams(url.search);\n    for (const object of objects) {\n        for (const key in object) {\n            if (Array.isArray(object[key])) {\n                searchParams.delete(key);\n                for (const item of object[key]) {\n                    searchParams.append(key, item);\n                }\n            } else {\n                searchParams.set(key, object[key]);\n            }\n        }\n    }\n    url.search = searchParams.toString();\n}\n\n/**\n *\n * @export\n */\nexport const serializeDataIfNeeded = function (value: any, requestOptions: any, configuration?: Configuration) {\n    const nonString = typeof value !== 'string';\n    const needsSerialization = nonString && configuration && configuration.isJsonMime\n        ? configuration.isJsonMime(requestOptions.headers['Content-Type'])\n        : nonString;\n    return needsSerialization\n        ? JSON.stringify(value !== undefined ? value : {})\n        : (value || \"\");\n}\n\n/**\n *\n * @export\n */\nexport const toPathString = function (url: URL) {\n    return url.pathname + url.search + url.hash\n}\n\n/**\n *\n * @export\n */\nexport const createRequestFunction = function (axiosArgs: RequestArgs, globalAxios: AxiosInstance, BASE_PATH: string, configuration?: Configuration) {\n    return <T = unknown, R = AxiosResponse<T>>(axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n        const axiosRequestArgs = {...axiosArgs.options, url: (configuration?.basePath || basePath) + axiosArgs.url};\n        return axios.request<T, R>(axiosRequestArgs);\n    };\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Uritmix.Api\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport { Configuration } from './configuration';\nimport globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';\n\n/**\n * \n * @export\n * @interface Abonnement\n */\nexport interface Abonnement {\n    /**\n     * \n     * @type {number}\n     * @memberof Abonnement\n     */\n    'id'?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof Abonnement\n     */\n    'name'?: string;\n    /**\n     * \n     * @type {AbonnementValidityView}\n     * @memberof Abonnement\n     */\n    'validity'?: AbonnementValidityView;\n    /**\n     * \n     * @type {number}\n     * @memberof Abonnement\n     */\n    'maxNumberOfVisits'?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof Abonnement\n     */\n    'basePrice'?: number;\n    /**\n     * \n     * @type {DiscountView}\n     * @memberof Abonnement\n     */\n    'maxDiscount'?: DiscountView;\n    /**\n     * \n     * @type {Array<Lesson>}\n     * @memberof Abonnement\n     */\n    'lessons'?: Array<Lesson>;\n}\n/**\n * \n * @export\n * @enum {string}\n */\n\nexport const AbonnementValidityView = {\n    OneDay: 'OneDay',\n    OneMonth: 'OneMonth',\n    ThreeMonths: 'ThreeMonths',\n    HalfYear: 'HalfYear',\n    Year: 'Year'\n} as const;\n\nexport type AbonnementValidityView = typeof AbonnementValidityView[keyof typeof AbonnementValidityView];\n\n\n/**\n * \n * @export\n * @interface ActivateAuth\n */\nexport interface ActivateAuth {\n    /**\n     * \n     * @type {string}\n     * @memberof ActivateAuth\n     */\n    'confirmCode'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ActivateAuth\n     */\n    'password'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ActivateAuth\n     */\n    'passwordConfirm'?: string;\n}\n/**\n * \n * @export\n * @interface Auth\n */\nexport interface Auth {\n    /**\n     * \n     * @type {AuthRoleView}\n     * @memberof Auth\n     */\n    'role'?: AuthRoleView;\n    /**\n     * \n     * @type {AuthStatusView}\n     * @memberof Auth\n     */\n    'status'?: AuthStatusView;\n    /**\n     * \n     * @type {string}\n     * @memberof Auth\n     */\n    'email'?: string;\n}\n/**\n * \n * @export\n * @enum {string}\n */\n\nexport const AuthRoleView = {\n    Manager: 'Manager',\n    Admin: 'Admin',\n    Server: 'Server'\n} as const;\n\nexport type AuthRoleView = typeof AuthRoleView[keyof typeof AuthRoleView];\n\n\n/**\n * \n * @export\n * @enum {string}\n */\n\nexport const AuthStatusView = {\n    NotActivated: 'NotActivated',\n    Activated: 'Activated',\n    Blocked: 'Blocked'\n} as const;\n\nexport type AuthStatusView = typeof AuthStatusView[keyof typeof AuthStatusView];\n\n\n/**\n * \n * @export\n * @interface CreateAbonnement\n */\nexport interface CreateAbonnement {\n    /**\n     * \n     * @type {string}\n     * @memberof CreateAbonnement\n     */\n    'name'?: string;\n    /**\n     * \n     * @type {AbonnementValidityView}\n     * @memberof CreateAbonnement\n     */\n    'validity'?: AbonnementValidityView;\n    /**\n     * \n     * @type {number}\n     * @memberof CreateAbonnement\n     */\n    'maxNumberOfVisits'?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof CreateAbonnement\n     */\n    'basePrice'?: number;\n    /**\n     * \n     * @type {DiscountView}\n     * @memberof CreateAbonnement\n     */\n    'maxDiscount'?: DiscountView;\n    /**\n     * \n     * @type {Array<number>}\n     * @memberof CreateAbonnement\n     */\n    'lessonIds'?: Array<number>;\n}\n/**\n * \n * @export\n * @interface CreateAuth\n */\nexport interface CreateAuth {\n    /**\n     * \n     * @type {string}\n     * @memberof CreateAuth\n     */\n    'email'?: string;\n    /**\n     * \n     * @type {AuthRoleView}\n     * @memberof CreateAuth\n     */\n    'role'?: AuthRoleView;\n}\n/**\n * \n * @export\n * @interface CreateEvent\n */\nexport interface CreateEvent {\n    /**\n     * \n     * @type {number}\n     * @memberof CreateEvent\n     */\n    'lessonId'?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof CreateEvent\n     */\n    'roomId'?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateEvent\n     */\n    'startDate'?: string;\n}\n/**\n * \n * @export\n * @interface CreateLesson\n */\nexport interface CreateLesson {\n    /**\n     * \n     * @type {string}\n     * @memberof CreateLesson\n     */\n    'name'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateLesson\n     */\n    'description'?: string | null;\n    /**\n     * \n     * @type {number}\n     * @memberof CreateLesson\n     */\n    'trainerId'?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof CreateLesson\n     */\n    'durationMinute'?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof CreateLesson\n     */\n    'basePrice'?: number;\n}\n/**\n * \n * @export\n * @interface CreatePerson\n */\nexport interface CreatePerson {\n    /**\n     * \n     * @type {string}\n     * @memberof CreatePerson\n     */\n    'firstName'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreatePerson\n     */\n    'lastName'?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof CreatePerson\n     */\n    'isTrainer'?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof CreatePerson\n     */\n    'description'?: string | null;\n}\n/**\n * \n * @export\n * @interface CreateRoom\n */\nexport interface CreateRoom {\n    /**\n     * \n     * @type {string}\n     * @memberof CreateRoom\n     */\n    'name'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateRoom\n     */\n    'description'?: string | null;\n}\n/**\n * \n * @export\n * @enum {string}\n */\n\nexport const DiscountView = {\n    D0: 'D0',\n    D5: 'D5',\n    D10: 'D10',\n    D15: 'D15',\n    D20: 'D20',\n    D25: 'D25',\n    D30: 'D30',\n    D40: 'D40',\n    D50: 'D50',\n    D60: 'D60',\n    D70: 'D70',\n    D80: 'D80',\n    D90: 'D90'\n} as const;\n\nexport type DiscountView = typeof DiscountView[keyof typeof DiscountView];\n\n\n/**\n * \n * @export\n * @interface EditAbonnement\n */\nexport interface EditAbonnement {\n    /**\n     * \n     * @type {string}\n     * @memberof EditAbonnement\n     */\n    'name'?: string;\n    /**\n     * \n     * @type {AbonnementValidityView}\n     * @memberof EditAbonnement\n     */\n    'validity'?: AbonnementValidityView;\n    /**\n     * \n     * @type {number}\n     * @memberof EditAbonnement\n     */\n    'maxNumberOfVisits'?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof EditAbonnement\n     */\n    'basePrice'?: number;\n    /**\n     * \n     * @type {DiscountView}\n     * @memberof EditAbonnement\n     */\n    'maxDiscount'?: DiscountView;\n    /**\n     * \n     * @type {Array<number>}\n     * @memberof EditAbonnement\n     */\n    'lessonIds'?: Array<number>;\n}\n/**\n * \n * @export\n * @interface EditEvent\n */\nexport interface EditEvent {\n    /**\n     * \n     * @type {number}\n     * @memberof EditEvent\n     */\n    'lessonId'?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof EditEvent\n     */\n    'roomId'?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof EditEvent\n     */\n    'startDate'?: string;\n}\n/**\n * \n * @export\n * @interface EditLesson\n */\nexport interface EditLesson {\n    /**\n     * \n     * @type {string}\n     * @memberof EditLesson\n     */\n    'name'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof EditLesson\n     */\n    'description'?: string | null;\n    /**\n     * \n     * @type {number}\n     * @memberof EditLesson\n     */\n    'trainerId'?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof EditLesson\n     */\n    'durationMinute'?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof EditLesson\n     */\n    'basePrice'?: number;\n}\n/**\n * \n * @export\n * @interface EditPerson\n */\nexport interface EditPerson {\n    /**\n     * \n     * @type {string}\n     * @memberof EditPerson\n     */\n    'firstName'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof EditPerson\n     */\n    'lastName'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof EditPerson\n     */\n    'description'?: string | null;\n}\n/**\n * \n * @export\n * @interface EditRoom\n */\nexport interface EditRoom {\n    /**\n     * \n     * @type {string}\n     * @memberof EditRoom\n     */\n    'name'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof EditRoom\n     */\n    'description'?: string | null;\n}\n/**\n * \n * @export\n * @interface ErrorResponse\n */\nexport interface ErrorResponse {\n    /**\n     * \n     * @type {string}\n     * @memberof ErrorResponse\n     */\n    'error'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ErrorResponse\n     */\n    'code'?: string;\n}\n/**\n * \n * @export\n * @interface Event\n */\nexport interface Event {\n    /**\n     * \n     * @type {number}\n     * @memberof Event\n     */\n    'id'?: number;\n    /**\n     * \n     * @type {EventTypeView}\n     * @memberof Event\n     */\n    'type'?: EventTypeView;\n    /**\n     * \n     * @type {number}\n     * @memberof Event\n     */\n    'lessonId'?: number;\n    /**\n     * \n     * @type {Lesson}\n     * @memberof Event\n     */\n    'lesson'?: Lesson;\n    /**\n     * \n     * @type {number}\n     * @memberof Event\n     */\n    'roomId'?: number;\n    /**\n     * \n     * @type {Room}\n     * @memberof Event\n     */\n    'room'?: Room;\n    /**\n     * \n     * @type {string}\n     * @memberof Event\n     */\n    'startDate'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Event\n     */\n    'endDate'?: string;\n}\n/**\n * \n * @export\n * @enum {string}\n */\n\nexport const EventTypeView = {\n    NotStarted: 'NotStarted',\n    InProgress: 'InProgress',\n    Finished: 'Finished'\n} as const;\n\nexport type EventTypeView = typeof EventTypeView[keyof typeof EventTypeView];\n\n\n/**\n * \n * @export\n * @interface Lesson\n */\nexport interface Lesson {\n    /**\n     * \n     * @type {number}\n     * @memberof Lesson\n     */\n    'id'?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof Lesson\n     */\n    'name'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Lesson\n     */\n    'description'?: string | null;\n    /**\n     * \n     * @type {Person}\n     * @memberof Lesson\n     */\n    'trainer'?: Person;\n    /**\n     * \n     * @type {number}\n     * @memberof Lesson\n     */\n    'durationMinute'?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof Lesson\n     */\n    'basePrice'?: number;\n}\n/**\n * \n * @export\n * @interface LoggedPerson\n */\nexport interface LoggedPerson {\n    /**\n     * \n     * @type {string}\n     * @memberof LoggedPerson\n     */\n    'firstName'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof LoggedPerson\n     */\n    'lastName'?: string;\n    /**\n     * \n     * @type {AuthRoleView}\n     * @memberof LoggedPerson\n     */\n    'role'?: AuthRoleView;\n    /**\n     * \n     * @type {string}\n     * @memberof LoggedPerson\n     */\n    'email'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof LoggedPerson\n     */\n    'accessToken'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof LoggedPerson\n     */\n    'refreshToken'?: string;\n}\n/**\n * \n * @export\n * @interface LoginUser\n */\nexport interface LoginUser {\n    /**\n     * \n     * @type {string}\n     * @memberof LoginUser\n     */\n    'email'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof LoginUser\n     */\n    'password'?: string;\n}\n/**\n * \n * @export\n * @interface Logout\n */\nexport interface Logout {\n    /**\n     * \n     * @type {string}\n     * @memberof Logout\n     */\n    'token'?: string;\n}\n/**\n * \n * @export\n * @interface PaginatedAbonnement\n */\nexport interface PaginatedAbonnement {\n    /**\n     * \n     * @type {number}\n     * @memberof PaginatedAbonnement\n     */\n    'pageNumber'?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof PaginatedAbonnement\n     */\n    'pageSize'?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof PaginatedAbonnement\n     */\n    'totalPages'?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof PaginatedAbonnement\n     */\n    'totalRecords'?: number;\n    /**\n     * \n     * @type {boolean}\n     * @memberof PaginatedAbonnement\n     */\n    'nextPageExists'?: boolean;\n    /**\n     * \n     * @type {Array<Abonnement>}\n     * @memberof PaginatedAbonnement\n     */\n    'results'?: Array<Abonnement> | null;\n}\n/**\n * \n * @export\n * @interface PaginatedLesson\n */\nexport interface PaginatedLesson {\n    /**\n     * \n     * @type {number}\n     * @memberof PaginatedLesson\n     */\n    'pageNumber'?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof PaginatedLesson\n     */\n    'pageSize'?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof PaginatedLesson\n     */\n    'totalPages'?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof PaginatedLesson\n     */\n    'totalRecords'?: number;\n    /**\n     * \n     * @type {boolean}\n     * @memberof PaginatedLesson\n     */\n    'nextPageExists'?: boolean;\n    /**\n     * \n     * @type {Array<Lesson>}\n     * @memberof PaginatedLesson\n     */\n    'results'?: Array<Lesson> | null;\n}\n/**\n * \n * @export\n * @interface PaginatedPerson\n */\nexport interface PaginatedPerson {\n    /**\n     * \n     * @type {number}\n     * @memberof PaginatedPerson\n     */\n    'pageNumber'?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof PaginatedPerson\n     */\n    'pageSize'?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof PaginatedPerson\n     */\n    'totalPages'?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof PaginatedPerson\n     */\n    'totalRecords'?: number;\n    /**\n     * \n     * @type {boolean}\n     * @memberof PaginatedPerson\n     */\n    'nextPageExists'?: boolean;\n    /**\n     * \n     * @type {Array<Person>}\n     * @memberof PaginatedPerson\n     */\n    'results'?: Array<Person> | null;\n}\n/**\n * \n * @export\n * @interface PaginatedRoom\n */\nexport interface PaginatedRoom {\n    /**\n     * \n     * @type {number}\n     * @memberof PaginatedRoom\n     */\n    'pageNumber'?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof PaginatedRoom\n     */\n    'pageSize'?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof PaginatedRoom\n     */\n    'totalPages'?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof PaginatedRoom\n     */\n    'totalRecords'?: number;\n    /**\n     * \n     * @type {boolean}\n     * @memberof PaginatedRoom\n     */\n    'nextPageExists'?: boolean;\n    /**\n     * \n     * @type {Array<Room>}\n     * @memberof PaginatedRoom\n     */\n    'results'?: Array<Room> | null;\n}\n/**\n * \n * @export\n * @interface PaginatedSoldAbonnement\n */\nexport interface PaginatedSoldAbonnement {\n    /**\n     * \n     * @type {number}\n     * @memberof PaginatedSoldAbonnement\n     */\n    'pageNumber'?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof PaginatedSoldAbonnement\n     */\n    'pageSize'?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof PaginatedSoldAbonnement\n     */\n    'totalPages'?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof PaginatedSoldAbonnement\n     */\n    'totalRecords'?: number;\n    /**\n     * \n     * @type {boolean}\n     * @memberof PaginatedSoldAbonnement\n     */\n    'nextPageExists'?: boolean;\n    /**\n     * \n     * @type {Array<SoldAbonnement>}\n     * @memberof PaginatedSoldAbonnement\n     */\n    'results'?: Array<SoldAbonnement> | null;\n}\n/**\n * \n * @export\n * @interface PasswordReset\n */\nexport interface PasswordReset {\n    /**\n     * \n     * @type {string}\n     * @memberof PasswordReset\n     */\n    'confirmCode'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof PasswordReset\n     */\n    'password'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof PasswordReset\n     */\n    'passwordConfirm'?: string;\n}\n/**\n * \n * @export\n * @interface PasswordResetQuery\n */\nexport interface PasswordResetQuery {\n    /**\n     * \n     * @type {string}\n     * @memberof PasswordResetQuery\n     */\n    'email'?: string;\n}\n/**\n * \n * @export\n * @interface Person\n */\nexport interface Person {\n    /**\n     * \n     * @type {number}\n     * @memberof Person\n     */\n    'id'?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof Person\n     */\n    'firstName'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Person\n     */\n    'lastName'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Person\n     */\n    'description'?: string | null;\n    /**\n     * \n     * @type {boolean}\n     * @memberof Person\n     */\n    'isTrainer'?: boolean;\n    /**\n     * \n     * @type {boolean}\n     * @memberof Person\n     */\n    'haveAuth'?: boolean;\n    /**\n     * \n     * @type {Auth}\n     * @memberof Person\n     */\n    'auth'?: Auth;\n}\n/**\n * \n * @export\n * @enum {string}\n */\n\nexport const PersonTypeView = {\n    All: 'All',\n    Trainer: 'Trainer',\n    Account: 'Account'\n} as const;\n\nexport type PersonTypeView = typeof PersonTypeView[keyof typeof PersonTypeView];\n\n\n/**\n * \n * @export\n * @interface PropertyError\n */\nexport interface PropertyError {\n    /**\n     * \n     * @type {string}\n     * @memberof PropertyError\n     */\n    'name'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof PropertyError\n     */\n    'error'?: string;\n}\n/**\n * \n * @export\n * @interface Refresh\n */\nexport interface Refresh {\n    /**\n     * \n     * @type {string}\n     * @memberof Refresh\n     */\n    'token'?: string;\n}\n/**\n * \n * @export\n * @interface ResultAbonnement\n */\nexport interface ResultAbonnement {\n    /**\n     * \n     * @type {Abonnement}\n     * @memberof ResultAbonnement\n     */\n    'result'?: Abonnement;\n    /**\n     * \n     * @type {string}\n     * @memberof ResultAbonnement\n     */\n    'error'?: string | null;\n    /**\n     * \n     * @type {boolean}\n     * @memberof ResultAbonnement\n     */\n    'ok'?: boolean;\n}\n/**\n * \n * @export\n * @interface ResultEvent\n */\nexport interface ResultEvent {\n    /**\n     * \n     * @type {Event}\n     * @memberof ResultEvent\n     */\n    'result'?: Event;\n    /**\n     * \n     * @type {string}\n     * @memberof ResultEvent\n     */\n    'error'?: string | null;\n    /**\n     * \n     * @type {boolean}\n     * @memberof ResultEvent\n     */\n    'ok'?: boolean;\n}\n/**\n * \n * @export\n * @interface ResultLesson\n */\nexport interface ResultLesson {\n    /**\n     * \n     * @type {Lesson}\n     * @memberof ResultLesson\n     */\n    'result'?: Lesson;\n    /**\n     * \n     * @type {string}\n     * @memberof ResultLesson\n     */\n    'error'?: string | null;\n    /**\n     * \n     * @type {boolean}\n     * @memberof ResultLesson\n     */\n    'ok'?: boolean;\n}\n/**\n * \n * @export\n * @interface ResultListEvent\n */\nexport interface ResultListEvent {\n    /**\n     * \n     * @type {Array<Event>}\n     * @memberof ResultListEvent\n     */\n    'result'?: Array<Event> | null;\n    /**\n     * \n     * @type {string}\n     * @memberof ResultListEvent\n     */\n    'error'?: string | null;\n    /**\n     * \n     * @type {boolean}\n     * @memberof ResultListEvent\n     */\n    'ok'?: boolean;\n}\n/**\n * \n * @export\n * @interface ResultLoggedPerson\n */\nexport interface ResultLoggedPerson {\n    /**\n     * \n     * @type {LoggedPerson}\n     * @memberof ResultLoggedPerson\n     */\n    'result'?: LoggedPerson;\n    /**\n     * \n     * @type {string}\n     * @memberof ResultLoggedPerson\n     */\n    'error'?: string | null;\n    /**\n     * \n     * @type {boolean}\n     * @memberof ResultLoggedPerson\n     */\n    'ok'?: boolean;\n}\n/**\n * \n * @export\n * @interface ResultPaginatedAbonnement\n */\nexport interface ResultPaginatedAbonnement {\n    /**\n     * \n     * @type {PaginatedAbonnement}\n     * @memberof ResultPaginatedAbonnement\n     */\n    'result'?: PaginatedAbonnement;\n    /**\n     * \n     * @type {string}\n     * @memberof ResultPaginatedAbonnement\n     */\n    'error'?: string | null;\n    /**\n     * \n     * @type {boolean}\n     * @memberof ResultPaginatedAbonnement\n     */\n    'ok'?: boolean;\n}\n/**\n * \n * @export\n * @interface ResultPaginatedLesson\n */\nexport interface ResultPaginatedLesson {\n    /**\n     * \n     * @type {PaginatedLesson}\n     * @memberof ResultPaginatedLesson\n     */\n    'result'?: PaginatedLesson;\n    /**\n     * \n     * @type {string}\n     * @memberof ResultPaginatedLesson\n     */\n    'error'?: string | null;\n    /**\n     * \n     * @type {boolean}\n     * @memberof ResultPaginatedLesson\n     */\n    'ok'?: boolean;\n}\n/**\n * \n * @export\n * @interface ResultPaginatedPerson\n */\nexport interface ResultPaginatedPerson {\n    /**\n     * \n     * @type {PaginatedPerson}\n     * @memberof ResultPaginatedPerson\n     */\n    'result'?: PaginatedPerson;\n    /**\n     * \n     * @type {string}\n     * @memberof ResultPaginatedPerson\n     */\n    'error'?: string | null;\n    /**\n     * \n     * @type {boolean}\n     * @memberof ResultPaginatedPerson\n     */\n    'ok'?: boolean;\n}\n/**\n * \n * @export\n * @interface ResultPaginatedRoom\n */\nexport interface ResultPaginatedRoom {\n    /**\n     * \n     * @type {PaginatedRoom}\n     * @memberof ResultPaginatedRoom\n     */\n    'result'?: PaginatedRoom;\n    /**\n     * \n     * @type {string}\n     * @memberof ResultPaginatedRoom\n     */\n    'error'?: string | null;\n    /**\n     * \n     * @type {boolean}\n     * @memberof ResultPaginatedRoom\n     */\n    'ok'?: boolean;\n}\n/**\n * \n * @export\n * @interface ResultPaginatedSoldAbonnement\n */\nexport interface ResultPaginatedSoldAbonnement {\n    /**\n     * \n     * @type {PaginatedSoldAbonnement}\n     * @memberof ResultPaginatedSoldAbonnement\n     */\n    'result'?: PaginatedSoldAbonnement;\n    /**\n     * \n     * @type {string}\n     * @memberof ResultPaginatedSoldAbonnement\n     */\n    'error'?: string | null;\n    /**\n     * \n     * @type {boolean}\n     * @memberof ResultPaginatedSoldAbonnement\n     */\n    'ok'?: boolean;\n}\n/**\n * \n * @export\n * @interface ResultPerson\n */\nexport interface ResultPerson {\n    /**\n     * \n     * @type {Person}\n     * @memberof ResultPerson\n     */\n    'result'?: Person;\n    /**\n     * \n     * @type {string}\n     * @memberof ResultPerson\n     */\n    'error'?: string | null;\n    /**\n     * \n     * @type {boolean}\n     * @memberof ResultPerson\n     */\n    'ok'?: boolean;\n}\n/**\n * \n * @export\n * @interface ResultRoom\n */\nexport interface ResultRoom {\n    /**\n     * \n     * @type {Room}\n     * @memberof ResultRoom\n     */\n    'result'?: Room;\n    /**\n     * \n     * @type {string}\n     * @memberof ResultRoom\n     */\n    'error'?: string | null;\n    /**\n     * \n     * @type {boolean}\n     * @memberof ResultRoom\n     */\n    'ok'?: boolean;\n}\n/**\n * \n * @export\n * @interface ResultSoldAbonnement\n */\nexport interface ResultSoldAbonnement {\n    /**\n     * \n     * @type {SoldAbonnement}\n     * @memberof ResultSoldAbonnement\n     */\n    'result'?: SoldAbonnement;\n    /**\n     * \n     * @type {string}\n     * @memberof ResultSoldAbonnement\n     */\n    'error'?: string | null;\n    /**\n     * \n     * @type {boolean}\n     * @memberof ResultSoldAbonnement\n     */\n    'ok'?: boolean;\n}\n/**\n * \n * @export\n * @interface ResultUnit\n */\nexport interface ResultUnit {\n    /**\n     * \n     * @type {object}\n     * @memberof ResultUnit\n     */\n    'result'?: object;\n    /**\n     * \n     * @type {string}\n     * @memberof ResultUnit\n     */\n    'error'?: string | null;\n    /**\n     * \n     * @type {boolean}\n     * @memberof ResultUnit\n     */\n    'ok'?: boolean;\n}\n/**\n * \n * @export\n * @interface Room\n */\nexport interface Room {\n    /**\n     * \n     * @type {number}\n     * @memberof Room\n     */\n    'id'?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof Room\n     */\n    'name'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Room\n     */\n    'description'?: string | null;\n}\n/**\n * \n * @export\n * @interface SaleAbonnement\n */\nexport interface SaleAbonnement {\n    /**\n     * \n     * @type {number}\n     * @memberof SaleAbonnement\n     */\n    'personId'?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof SaleAbonnement\n     */\n    'abonnementId'?: number;\n    /**\n     * \n     * @type {DiscountView}\n     * @memberof SaleAbonnement\n     */\n    'discount'?: DiscountView;\n}\n/**\n * \n * @export\n * @interface SoldAbonnement\n */\nexport interface SoldAbonnement {\n    /**\n     * \n     * @type {number}\n     * @memberof SoldAbonnement\n     */\n    'id'?: number;\n    /**\n     * \n     * @type {boolean}\n     * @memberof SoldAbonnement\n     */\n    'active'?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof SoldAbonnement\n     */\n    'dateSale'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SoldAbonnement\n     */\n    'dateExpiration'?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof SoldAbonnement\n     */\n    'priceSold'?: number;\n    /**\n     * \n     * @type {DiscountView}\n     * @memberof SoldAbonnement\n     */\n    'discount'?: DiscountView;\n    /**\n     * \n     * @type {number}\n     * @memberof SoldAbonnement\n     */\n    'visitCounter'?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof SoldAbonnement\n     */\n    'name'?: string;\n    /**\n     * \n     * @type {AbonnementValidityView}\n     * @memberof SoldAbonnement\n     */\n    'validity'?: AbonnementValidityView;\n    /**\n     * \n     * @type {number}\n     * @memberof SoldAbonnement\n     */\n    'maxNumberOfVisits'?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof SoldAbonnement\n     */\n    'basePrice'?: number;\n    /**\n     * \n     * @type {Array<Lesson>}\n     * @memberof SoldAbonnement\n     */\n    'lessons'?: Array<Lesson>;\n}\n/**\n * \n * @export\n * @interface ValidError\n */\nexport interface ValidError {\n    /**\n     * \n     * @type {Array<PropertyError>}\n     * @memberof ValidError\n     */\n    'properties'?: Array<PropertyError>;\n}\n\n/**\n * AbonnementApi - axios parameter creator\n * @export\n */\nexport const AbonnementApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @summary Возвращает абоннемент по id\n         * @param {number} abonnementId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1AbonnementAbonnementIdGet: async (abonnementId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'abonnementId' is not null or undefined\n            assertParamExists('apiV1AbonnementAbonnementIdGet', 'abonnementId', abonnementId)\n            const localVarPath = `/api/v1/abonnement/{abonnementId}`\n                .replace(`{${\"abonnementId\"}}`, encodeURIComponent(String(abonnementId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            await setApiKeyToObject(localVarHeaderParameter, \"Authorization\", configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Обновляет данные абонимента\n         * @param {number} abonnementId \n         * @param {EditAbonnement} [editAbonnement] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1AbonnementAbonnementIdPut: async (abonnementId: number, editAbonnement?: EditAbonnement, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'abonnementId' is not null or undefined\n            assertParamExists('apiV1AbonnementAbonnementIdPut', 'abonnementId', abonnementId)\n            const localVarPath = `/api/v1/abonnement/{abonnementId}`\n                .replace(`{${\"abonnementId\"}}`, encodeURIComponent(String(abonnementId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            await setApiKeyToObject(localVarHeaderParameter, \"Authorization\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(editAbonnement, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Возвращает список абониментов\n         * @param {number} pageSize \n         * @param {number} pageNumber \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1AbonnementGet: async (pageSize: number, pageNumber: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'pageSize' is not null or undefined\n            assertParamExists('apiV1AbonnementGet', 'pageSize', pageSize)\n            // verify required parameter 'pageNumber' is not null or undefined\n            assertParamExists('apiV1AbonnementGet', 'pageNumber', pageNumber)\n            const localVarPath = `/api/v1/abonnement`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            await setApiKeyToObject(localVarHeaderParameter, \"Authorization\", configuration)\n\n            if (pageSize !== undefined) {\n                localVarQueryParameter['pageSize'] = pageSize;\n            }\n\n            if (pageNumber !== undefined) {\n                localVarQueryParameter['pageNumber'] = pageNumber;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Создает новый абонимент\n         * @param {CreateAbonnement} [createAbonnement] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1AbonnementPost: async (createAbonnement?: CreateAbonnement, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/v1/abonnement`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            await setApiKeyToObject(localVarHeaderParameter, \"Authorization\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(createAbonnement, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Возвращает список купленных абониментов пользователя\n         * @param {number} personId \n         * @param {number} pageSize \n         * @param {number} pageNumber \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1AbonnementSoldPersonIdGet: async (personId: number, pageSize: number, pageNumber: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'personId' is not null or undefined\n            assertParamExists('apiV1AbonnementSoldPersonIdGet', 'personId', personId)\n            // verify required parameter 'pageSize' is not null or undefined\n            assertParamExists('apiV1AbonnementSoldPersonIdGet', 'pageSize', pageSize)\n            // verify required parameter 'pageNumber' is not null or undefined\n            assertParamExists('apiV1AbonnementSoldPersonIdGet', 'pageNumber', pageNumber)\n            const localVarPath = `/api/v1/abonnement/sold/{personId}`\n                .replace(`{${\"personId\"}}`, encodeURIComponent(String(personId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            await setApiKeyToObject(localVarHeaderParameter, \"Authorization\", configuration)\n\n            if (pageSize !== undefined) {\n                localVarQueryParameter['pageSize'] = pageSize;\n            }\n\n            if (pageNumber !== undefined) {\n                localVarQueryParameter['pageNumber'] = pageNumber;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Продажа абонимента\n         * @param {SaleAbonnement} [saleAbonnement] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1AbonnementSoldPost: async (saleAbonnement?: SaleAbonnement, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/v1/abonnement/sold`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            await setApiKeyToObject(localVarHeaderParameter, \"Authorization\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(saleAbonnement, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * AbonnementApi - functional programming interface\n * @export\n */\nexport const AbonnementApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = AbonnementApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * \n         * @summary Возвращает абоннемент по id\n         * @param {number} abonnementId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiV1AbonnementAbonnementIdGet(abonnementId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultAbonnement>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AbonnementAbonnementIdGet(abonnementId, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Обновляет данные абонимента\n         * @param {number} abonnementId \n         * @param {EditAbonnement} [editAbonnement] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiV1AbonnementAbonnementIdPut(abonnementId: number, editAbonnement?: EditAbonnement, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultAbonnement>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AbonnementAbonnementIdPut(abonnementId, editAbonnement, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Возвращает список абониментов\n         * @param {number} pageSize \n         * @param {number} pageNumber \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiV1AbonnementGet(pageSize: number, pageNumber: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultPaginatedAbonnement>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AbonnementGet(pageSize, pageNumber, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Создает новый абонимент\n         * @param {CreateAbonnement} [createAbonnement] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiV1AbonnementPost(createAbonnement?: CreateAbonnement, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultAbonnement>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AbonnementPost(createAbonnement, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Возвращает список купленных абониментов пользователя\n         * @param {number} personId \n         * @param {number} pageSize \n         * @param {number} pageNumber \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiV1AbonnementSoldPersonIdGet(personId: number, pageSize: number, pageNumber: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultPaginatedSoldAbonnement>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AbonnementSoldPersonIdGet(personId, pageSize, pageNumber, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Продажа абонимента\n         * @param {SaleAbonnement} [saleAbonnement] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiV1AbonnementSoldPost(saleAbonnement?: SaleAbonnement, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultSoldAbonnement>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AbonnementSoldPost(saleAbonnement, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    }\n};\n\n/**\n * AbonnementApi - factory interface\n * @export\n */\nexport const AbonnementApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = AbonnementApiFp(configuration)\n    return {\n        /**\n         * \n         * @summary Возвращает абоннемент по id\n         * @param {number} abonnementId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1AbonnementAbonnementIdGet(abonnementId: number, options?: any): AxiosPromise<ResultAbonnement> {\n            return localVarFp.apiV1AbonnementAbonnementIdGet(abonnementId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Обновляет данные абонимента\n         * @param {number} abonnementId \n         * @param {EditAbonnement} [editAbonnement] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1AbonnementAbonnementIdPut(abonnementId: number, editAbonnement?: EditAbonnement, options?: any): AxiosPromise<ResultAbonnement> {\n            return localVarFp.apiV1AbonnementAbonnementIdPut(abonnementId, editAbonnement, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Возвращает список абониментов\n         * @param {number} pageSize \n         * @param {number} pageNumber \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1AbonnementGet(pageSize: number, pageNumber: number, options?: any): AxiosPromise<ResultPaginatedAbonnement> {\n            return localVarFp.apiV1AbonnementGet(pageSize, pageNumber, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Создает новый абонимент\n         * @param {CreateAbonnement} [createAbonnement] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1AbonnementPost(createAbonnement?: CreateAbonnement, options?: any): AxiosPromise<ResultAbonnement> {\n            return localVarFp.apiV1AbonnementPost(createAbonnement, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Возвращает список купленных абониментов пользователя\n         * @param {number} personId \n         * @param {number} pageSize \n         * @param {number} pageNumber \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1AbonnementSoldPersonIdGet(personId: number, pageSize: number, pageNumber: number, options?: any): AxiosPromise<ResultPaginatedSoldAbonnement> {\n            return localVarFp.apiV1AbonnementSoldPersonIdGet(personId, pageSize, pageNumber, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Продажа абонимента\n         * @param {SaleAbonnement} [saleAbonnement] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1AbonnementSoldPost(saleAbonnement?: SaleAbonnement, options?: any): AxiosPromise<ResultSoldAbonnement> {\n            return localVarFp.apiV1AbonnementSoldPost(saleAbonnement, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * AbonnementApi - object-oriented interface\n * @export\n * @class AbonnementApi\n * @extends {BaseAPI}\n */\nexport class AbonnementApi extends BaseAPI {\n    /**\n     * \n     * @summary Возвращает абоннемент по id\n     * @param {number} abonnementId \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AbonnementApi\n     */\n    public apiV1AbonnementAbonnementIdGet(abonnementId: number, options?: AxiosRequestConfig) {\n        return AbonnementApiFp(this.configuration).apiV1AbonnementAbonnementIdGet(abonnementId, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Обновляет данные абонимента\n     * @param {number} abonnementId \n     * @param {EditAbonnement} [editAbonnement] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AbonnementApi\n     */\n    public apiV1AbonnementAbonnementIdPut(abonnementId: number, editAbonnement?: EditAbonnement, options?: AxiosRequestConfig) {\n        return AbonnementApiFp(this.configuration).apiV1AbonnementAbonnementIdPut(abonnementId, editAbonnement, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Возвращает список абониментов\n     * @param {number} pageSize \n     * @param {number} pageNumber \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AbonnementApi\n     */\n    public apiV1AbonnementGet(pageSize: number, pageNumber: number, options?: AxiosRequestConfig) {\n        return AbonnementApiFp(this.configuration).apiV1AbonnementGet(pageSize, pageNumber, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Создает новый абонимент\n     * @param {CreateAbonnement} [createAbonnement] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AbonnementApi\n     */\n    public apiV1AbonnementPost(createAbonnement?: CreateAbonnement, options?: AxiosRequestConfig) {\n        return AbonnementApiFp(this.configuration).apiV1AbonnementPost(createAbonnement, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Возвращает список купленных абониментов пользователя\n     * @param {number} personId \n     * @param {number} pageSize \n     * @param {number} pageNumber \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AbonnementApi\n     */\n    public apiV1AbonnementSoldPersonIdGet(personId: number, pageSize: number, pageNumber: number, options?: AxiosRequestConfig) {\n        return AbonnementApiFp(this.configuration).apiV1AbonnementSoldPersonIdGet(personId, pageSize, pageNumber, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Продажа абонимента\n     * @param {SaleAbonnement} [saleAbonnement] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AbonnementApi\n     */\n    public apiV1AbonnementSoldPost(saleAbonnement?: SaleAbonnement, options?: AxiosRequestConfig) {\n        return AbonnementApiFp(this.configuration).apiV1AbonnementSoldPost(saleAbonnement, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n\n/**\n * AuthApi - axios parameter creator\n * @export\n */\nexport const AuthApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @summary Активация созданного пользователя\n         * @param {ActivateAuth} [activateAuth] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1AuthActivatePost: async (activateAuth?: ActivateAuth, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/v1/auth/activate`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(activateAuth, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Авторизация пользователя\n         * @param {LoginUser} [loginUser] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1AuthLoginPost: async (loginUser?: LoginUser, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/v1/auth/login`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(loginUser, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Разлогин пользователя\n         * @param {Logout} [logout] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1AuthLogoutPost: async (logout?: Logout, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/v1/auth/logout`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(logout, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Смена пароля на основе токена отправленного на почту\n         * @param {PasswordReset} [passwordReset] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1AuthPasswordResetPost: async (passwordReset?: PasswordReset, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/v1/auth/password-reset`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(passwordReset, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Запрос на смену пароля\n         * @param {PasswordResetQuery} [passwordResetQuery] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1AuthPasswordResetQueryPost: async (passwordResetQuery?: PasswordResetQuery, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/v1/auth/password-reset-query`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(passwordResetQuery, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Создание аккаунта для пользователя\n         * @param {number} personId \n         * @param {CreateAuth} [createAuth] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1AuthPersonIdPost: async (personId: number, createAuth?: CreateAuth, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'personId' is not null or undefined\n            assertParamExists('apiV1AuthPersonIdPost', 'personId', personId)\n            const localVarPath = `/api/v1/auth/{personId}`\n                .replace(`{${\"personId\"}}`, encodeURIComponent(String(personId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            await setApiKeyToObject(localVarHeaderParameter, \"Authorization\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(createAuth, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Получение нового token с помощью refresh token\n         * @param {Refresh} [refresh] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1AuthRefreshPost: async (refresh?: Refresh, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/v1/auth/refresh`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(refresh, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * AuthApi - functional programming interface\n * @export\n */\nexport const AuthApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * \n         * @summary Активация созданного пользователя\n         * @param {ActivateAuth} [activateAuth] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiV1AuthActivatePost(activateAuth?: ActivateAuth, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultUnit>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AuthActivatePost(activateAuth, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Авторизация пользователя\n         * @param {LoginUser} [loginUser] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiV1AuthLoginPost(loginUser?: LoginUser, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultLoggedPerson>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AuthLoginPost(loginUser, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Разлогин пользователя\n         * @param {Logout} [logout] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiV1AuthLogoutPost(logout?: Logout, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultUnit>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AuthLogoutPost(logout, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Смена пароля на основе токена отправленного на почту\n         * @param {PasswordReset} [passwordReset] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiV1AuthPasswordResetPost(passwordReset?: PasswordReset, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultUnit>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AuthPasswordResetPost(passwordReset, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Запрос на смену пароля\n         * @param {PasswordResetQuery} [passwordResetQuery] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiV1AuthPasswordResetQueryPost(passwordResetQuery?: PasswordResetQuery, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultUnit>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AuthPasswordResetQueryPost(passwordResetQuery, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Создание аккаунта для пользователя\n         * @param {number} personId \n         * @param {CreateAuth} [createAuth] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiV1AuthPersonIdPost(personId: number, createAuth?: CreateAuth, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultUnit>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AuthPersonIdPost(personId, createAuth, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Получение нового token с помощью refresh token\n         * @param {Refresh} [refresh] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiV1AuthRefreshPost(refresh?: Refresh, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultLoggedPerson>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AuthRefreshPost(refresh, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    }\n};\n\n/**\n * AuthApi - factory interface\n * @export\n */\nexport const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = AuthApiFp(configuration)\n    return {\n        /**\n         * \n         * @summary Активация созданного пользователя\n         * @param {ActivateAuth} [activateAuth] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1AuthActivatePost(activateAuth?: ActivateAuth, options?: any): AxiosPromise<ResultUnit> {\n            return localVarFp.apiV1AuthActivatePost(activateAuth, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Авторизация пользователя\n         * @param {LoginUser} [loginUser] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1AuthLoginPost(loginUser?: LoginUser, options?: any): AxiosPromise<ResultLoggedPerson> {\n            return localVarFp.apiV1AuthLoginPost(loginUser, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Разлогин пользователя\n         * @param {Logout} [logout] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1AuthLogoutPost(logout?: Logout, options?: any): AxiosPromise<ResultUnit> {\n            return localVarFp.apiV1AuthLogoutPost(logout, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Смена пароля на основе токена отправленного на почту\n         * @param {PasswordReset} [passwordReset] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1AuthPasswordResetPost(passwordReset?: PasswordReset, options?: any): AxiosPromise<ResultUnit> {\n            return localVarFp.apiV1AuthPasswordResetPost(passwordReset, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Запрос на смену пароля\n         * @param {PasswordResetQuery} [passwordResetQuery] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1AuthPasswordResetQueryPost(passwordResetQuery?: PasswordResetQuery, options?: any): AxiosPromise<ResultUnit> {\n            return localVarFp.apiV1AuthPasswordResetQueryPost(passwordResetQuery, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Создание аккаунта для пользователя\n         * @param {number} personId \n         * @param {CreateAuth} [createAuth] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1AuthPersonIdPost(personId: number, createAuth?: CreateAuth, options?: any): AxiosPromise<ResultUnit> {\n            return localVarFp.apiV1AuthPersonIdPost(personId, createAuth, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Получение нового token с помощью refresh token\n         * @param {Refresh} [refresh] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1AuthRefreshPost(refresh?: Refresh, options?: any): AxiosPromise<ResultLoggedPerson> {\n            return localVarFp.apiV1AuthRefreshPost(refresh, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * AuthApi - object-oriented interface\n * @export\n * @class AuthApi\n * @extends {BaseAPI}\n */\nexport class AuthApi extends BaseAPI {\n    /**\n     * \n     * @summary Активация созданного пользователя\n     * @param {ActivateAuth} [activateAuth] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AuthApi\n     */\n    public apiV1AuthActivatePost(activateAuth?: ActivateAuth, options?: AxiosRequestConfig) {\n        return AuthApiFp(this.configuration).apiV1AuthActivatePost(activateAuth, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Авторизация пользователя\n     * @param {LoginUser} [loginUser] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AuthApi\n     */\n    public apiV1AuthLoginPost(loginUser?: LoginUser, options?: AxiosRequestConfig) {\n        return AuthApiFp(this.configuration).apiV1AuthLoginPost(loginUser, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Разлогин пользователя\n     * @param {Logout} [logout] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AuthApi\n     */\n    public apiV1AuthLogoutPost(logout?: Logout, options?: AxiosRequestConfig) {\n        return AuthApiFp(this.configuration).apiV1AuthLogoutPost(logout, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Смена пароля на основе токена отправленного на почту\n     * @param {PasswordReset} [passwordReset] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AuthApi\n     */\n    public apiV1AuthPasswordResetPost(passwordReset?: PasswordReset, options?: AxiosRequestConfig) {\n        return AuthApiFp(this.configuration).apiV1AuthPasswordResetPost(passwordReset, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Запрос на смену пароля\n     * @param {PasswordResetQuery} [passwordResetQuery] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AuthApi\n     */\n    public apiV1AuthPasswordResetQueryPost(passwordResetQuery?: PasswordResetQuery, options?: AxiosRequestConfig) {\n        return AuthApiFp(this.configuration).apiV1AuthPasswordResetQueryPost(passwordResetQuery, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Создание аккаунта для пользователя\n     * @param {number} personId \n     * @param {CreateAuth} [createAuth] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AuthApi\n     */\n    public apiV1AuthPersonIdPost(personId: number, createAuth?: CreateAuth, options?: AxiosRequestConfig) {\n        return AuthApiFp(this.configuration).apiV1AuthPersonIdPost(personId, createAuth, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Получение нового token с помощью refresh token\n     * @param {Refresh} [refresh] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AuthApi\n     */\n    public apiV1AuthRefreshPost(refresh?: Refresh, options?: AxiosRequestConfig) {\n        return AuthApiFp(this.configuration).apiV1AuthRefreshPost(refresh, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n\n/**\n * EventApi - axios parameter creator\n * @export\n */\nexport const EventApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @summary Обновляет событие\n         * @param {number} eventId \n         * @param {EditEvent} [editEvent] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1EventEventIdPut: async (eventId: number, editEvent?: EditEvent, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'eventId' is not null or undefined\n            assertParamExists('apiV1EventEventIdPut', 'eventId', eventId)\n            const localVarPath = `/api/v1/event/{eventId}`\n                .replace(`{${\"eventId\"}}`, encodeURIComponent(String(eventId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            await setApiKeyToObject(localVarHeaderParameter, \"Authorization\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(editEvent, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Возвращает список событий\n         * @param {string} [startDate] \n         * @param {string} [endDate] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1EventGet: async (startDate?: string, endDate?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/v1/event`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            await setApiKeyToObject(localVarHeaderParameter, \"Authorization\", configuration)\n\n            if (startDate !== undefined) {\n                localVarQueryParameter['startDate'] = (startDate as any instanceof Date) ?\n                    (startDate as any).toISOString() :\n                    startDate;\n            }\n\n            if (endDate !== undefined) {\n                localVarQueryParameter['endDate'] = (endDate as any instanceof Date) ?\n                    (endDate as any).toISOString() :\n                    endDate;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Создает новое событие занятия\n         * @param {CreateEvent} [createEvent] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1EventPost: async (createEvent?: CreateEvent, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/v1/event`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            await setApiKeyToObject(localVarHeaderParameter, \"Authorization\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(createEvent, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * EventApi - functional programming interface\n * @export\n */\nexport const EventApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = EventApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * \n         * @summary Обновляет событие\n         * @param {number} eventId \n         * @param {EditEvent} [editEvent] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiV1EventEventIdPut(eventId: number, editEvent?: EditEvent, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultEvent>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1EventEventIdPut(eventId, editEvent, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Возвращает список событий\n         * @param {string} [startDate] \n         * @param {string} [endDate] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiV1EventGet(startDate?: string, endDate?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultListEvent>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1EventGet(startDate, endDate, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Создает новое событие занятия\n         * @param {CreateEvent} [createEvent] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiV1EventPost(createEvent?: CreateEvent, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultEvent>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1EventPost(createEvent, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    }\n};\n\n/**\n * EventApi - factory interface\n * @export\n */\nexport const EventApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = EventApiFp(configuration)\n    return {\n        /**\n         * \n         * @summary Обновляет событие\n         * @param {number} eventId \n         * @param {EditEvent} [editEvent] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1EventEventIdPut(eventId: number, editEvent?: EditEvent, options?: any): AxiosPromise<ResultEvent> {\n            return localVarFp.apiV1EventEventIdPut(eventId, editEvent, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Возвращает список событий\n         * @param {string} [startDate] \n         * @param {string} [endDate] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1EventGet(startDate?: string, endDate?: string, options?: any): AxiosPromise<ResultListEvent> {\n            return localVarFp.apiV1EventGet(startDate, endDate, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Создает новое событие занятия\n         * @param {CreateEvent} [createEvent] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1EventPost(createEvent?: CreateEvent, options?: any): AxiosPromise<ResultEvent> {\n            return localVarFp.apiV1EventPost(createEvent, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * EventApi - object-oriented interface\n * @export\n * @class EventApi\n * @extends {BaseAPI}\n */\nexport class EventApi extends BaseAPI {\n    /**\n     * \n     * @summary Обновляет событие\n     * @param {number} eventId \n     * @param {EditEvent} [editEvent] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof EventApi\n     */\n    public apiV1EventEventIdPut(eventId: number, editEvent?: EditEvent, options?: AxiosRequestConfig) {\n        return EventApiFp(this.configuration).apiV1EventEventIdPut(eventId, editEvent, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Возвращает список событий\n     * @param {string} [startDate] \n     * @param {string} [endDate] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof EventApi\n     */\n    public apiV1EventGet(startDate?: string, endDate?: string, options?: AxiosRequestConfig) {\n        return EventApiFp(this.configuration).apiV1EventGet(startDate, endDate, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Создает новое событие занятия\n     * @param {CreateEvent} [createEvent] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof EventApi\n     */\n    public apiV1EventPost(createEvent?: CreateEvent, options?: AxiosRequestConfig) {\n        return EventApiFp(this.configuration).apiV1EventPost(createEvent, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n\n/**\n * LessonApi - axios parameter creator\n * @export\n */\nexport const LessonApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @summary Возвращает список занятий\n         * @param {number} pageSize \n         * @param {number} pageNumber \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1LessonGet: async (pageSize: number, pageNumber: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'pageSize' is not null or undefined\n            assertParamExists('apiV1LessonGet', 'pageSize', pageSize)\n            // verify required parameter 'pageNumber' is not null or undefined\n            assertParamExists('apiV1LessonGet', 'pageNumber', pageNumber)\n            const localVarPath = `/api/v1/lesson`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            await setApiKeyToObject(localVarHeaderParameter, \"Authorization\", configuration)\n\n            if (pageSize !== undefined) {\n                localVarQueryParameter['pageSize'] = pageSize;\n            }\n\n            if (pageNumber !== undefined) {\n                localVarQueryParameter['pageNumber'] = pageNumber;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Возвращает занятие по id\n         * @param {number} lessonId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1LessonLessonIdGet: async (lessonId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'lessonId' is not null or undefined\n            assertParamExists('apiV1LessonLessonIdGet', 'lessonId', lessonId)\n            const localVarPath = `/api/v1/lesson/{lessonId}`\n                .replace(`{${\"lessonId\"}}`, encodeURIComponent(String(lessonId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            await setApiKeyToObject(localVarHeaderParameter, \"Authorization\", configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Обновляет данные занятия\n         * @param {number} lessonId \n         * @param {EditLesson} [editLesson] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1LessonLessonIdPut: async (lessonId: number, editLesson?: EditLesson, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'lessonId' is not null or undefined\n            assertParamExists('apiV1LessonLessonIdPut', 'lessonId', lessonId)\n            const localVarPath = `/api/v1/lesson/{lessonId}`\n                .replace(`{${\"lessonId\"}}`, encodeURIComponent(String(lessonId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            await setApiKeyToObject(localVarHeaderParameter, \"Authorization\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(editLesson, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Создает новое занятие\n         * @param {CreateLesson} [createLesson] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1LessonPost: async (createLesson?: CreateLesson, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/v1/lesson`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            await setApiKeyToObject(localVarHeaderParameter, \"Authorization\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(createLesson, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * LessonApi - functional programming interface\n * @export\n */\nexport const LessonApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = LessonApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * \n         * @summary Возвращает список занятий\n         * @param {number} pageSize \n         * @param {number} pageNumber \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiV1LessonGet(pageSize: number, pageNumber: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultPaginatedLesson>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1LessonGet(pageSize, pageNumber, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Возвращает занятие по id\n         * @param {number} lessonId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiV1LessonLessonIdGet(lessonId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultLesson>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1LessonLessonIdGet(lessonId, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Обновляет данные занятия\n         * @param {number} lessonId \n         * @param {EditLesson} [editLesson] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiV1LessonLessonIdPut(lessonId: number, editLesson?: EditLesson, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultLesson>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1LessonLessonIdPut(lessonId, editLesson, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Создает новое занятие\n         * @param {CreateLesson} [createLesson] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiV1LessonPost(createLesson?: CreateLesson, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultLesson>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1LessonPost(createLesson, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    }\n};\n\n/**\n * LessonApi - factory interface\n * @export\n */\nexport const LessonApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = LessonApiFp(configuration)\n    return {\n        /**\n         * \n         * @summary Возвращает список занятий\n         * @param {number} pageSize \n         * @param {number} pageNumber \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1LessonGet(pageSize: number, pageNumber: number, options?: any): AxiosPromise<ResultPaginatedLesson> {\n            return localVarFp.apiV1LessonGet(pageSize, pageNumber, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Возвращает занятие по id\n         * @param {number} lessonId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1LessonLessonIdGet(lessonId: number, options?: any): AxiosPromise<ResultLesson> {\n            return localVarFp.apiV1LessonLessonIdGet(lessonId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Обновляет данные занятия\n         * @param {number} lessonId \n         * @param {EditLesson} [editLesson] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1LessonLessonIdPut(lessonId: number, editLesson?: EditLesson, options?: any): AxiosPromise<ResultLesson> {\n            return localVarFp.apiV1LessonLessonIdPut(lessonId, editLesson, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Создает новое занятие\n         * @param {CreateLesson} [createLesson] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1LessonPost(createLesson?: CreateLesson, options?: any): AxiosPromise<ResultLesson> {\n            return localVarFp.apiV1LessonPost(createLesson, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * LessonApi - object-oriented interface\n * @export\n * @class LessonApi\n * @extends {BaseAPI}\n */\nexport class LessonApi extends BaseAPI {\n    /**\n     * \n     * @summary Возвращает список занятий\n     * @param {number} pageSize \n     * @param {number} pageNumber \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof LessonApi\n     */\n    public apiV1LessonGet(pageSize: number, pageNumber: number, options?: AxiosRequestConfig) {\n        return LessonApiFp(this.configuration).apiV1LessonGet(pageSize, pageNumber, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Возвращает занятие по id\n     * @param {number} lessonId \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof LessonApi\n     */\n    public apiV1LessonLessonIdGet(lessonId: number, options?: AxiosRequestConfig) {\n        return LessonApiFp(this.configuration).apiV1LessonLessonIdGet(lessonId, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Обновляет данные занятия\n     * @param {number} lessonId \n     * @param {EditLesson} [editLesson] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof LessonApi\n     */\n    public apiV1LessonLessonIdPut(lessonId: number, editLesson?: EditLesson, options?: AxiosRequestConfig) {\n        return LessonApiFp(this.configuration).apiV1LessonLessonIdPut(lessonId, editLesson, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Создает новое занятие\n     * @param {CreateLesson} [createLesson] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof LessonApi\n     */\n    public apiV1LessonPost(createLesson?: CreateLesson, options?: AxiosRequestConfig) {\n        return LessonApiFp(this.configuration).apiV1LessonPost(createLesson, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n\n/**\n * PersonApi - axios parameter creator\n * @export\n */\nexport const PersonApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @summary Возвращает список пользователей\n         * @param {number} pageSize \n         * @param {number} pageNumber \n         * @param {PersonTypeView} [type] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1PersonGet: async (pageSize: number, pageNumber: number, type?: PersonTypeView, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'pageSize' is not null or undefined\n            assertParamExists('apiV1PersonGet', 'pageSize', pageSize)\n            // verify required parameter 'pageNumber' is not null or undefined\n            assertParamExists('apiV1PersonGet', 'pageNumber', pageNumber)\n            const localVarPath = `/api/v1/person`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            await setApiKeyToObject(localVarHeaderParameter, \"Authorization\", configuration)\n\n            if (type !== undefined) {\n                localVarQueryParameter['type'] = type;\n            }\n\n            if (pageSize !== undefined) {\n                localVarQueryParameter['pageSize'] = pageSize;\n            }\n\n            if (pageNumber !== undefined) {\n                localVarQueryParameter['pageNumber'] = pageNumber;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Возвращает пользователя по id\n         * @param {number} personId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1PersonPersonIdGet: async (personId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'personId' is not null or undefined\n            assertParamExists('apiV1PersonPersonIdGet', 'personId', personId)\n            const localVarPath = `/api/v1/person/{personId}`\n                .replace(`{${\"personId\"}}`, encodeURIComponent(String(personId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            await setApiKeyToObject(localVarHeaderParameter, \"Authorization\", configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Обновляет данные пользователя\n         * @param {number} personId \n         * @param {EditPerson} [editPerson] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1PersonPersonIdPut: async (personId: number, editPerson?: EditPerson, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'personId' is not null or undefined\n            assertParamExists('apiV1PersonPersonIdPut', 'personId', personId)\n            const localVarPath = `/api/v1/person/{personId}`\n                .replace(`{${\"personId\"}}`, encodeURIComponent(String(personId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            await setApiKeyToObject(localVarHeaderParameter, \"Authorization\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(editPerson, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Создает нового пользователя\n         * @param {CreatePerson} [createPerson] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1PersonPost: async (createPerson?: CreatePerson, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/v1/person`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            await setApiKeyToObject(localVarHeaderParameter, \"Authorization\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(createPerson, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Возвращает текущего авторизованного пользователя\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1PersonSelfGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/v1/person/self`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            await setApiKeyToObject(localVarHeaderParameter, \"Authorization\", configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * PersonApi - functional programming interface\n * @export\n */\nexport const PersonApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = PersonApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * \n         * @summary Возвращает список пользователей\n         * @param {number} pageSize \n         * @param {number} pageNumber \n         * @param {PersonTypeView} [type] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiV1PersonGet(pageSize: number, pageNumber: number, type?: PersonTypeView, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultPaginatedPerson>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PersonGet(pageSize, pageNumber, type, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Возвращает пользователя по id\n         * @param {number} personId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiV1PersonPersonIdGet(personId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultPerson>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PersonPersonIdGet(personId, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Обновляет данные пользователя\n         * @param {number} personId \n         * @param {EditPerson} [editPerson] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiV1PersonPersonIdPut(personId: number, editPerson?: EditPerson, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultPerson>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PersonPersonIdPut(personId, editPerson, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Создает нового пользователя\n         * @param {CreatePerson} [createPerson] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiV1PersonPost(createPerson?: CreatePerson, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultPerson>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PersonPost(createPerson, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Возвращает текущего авторизованного пользователя\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiV1PersonSelfGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultPerson>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PersonSelfGet(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    }\n};\n\n/**\n * PersonApi - factory interface\n * @export\n */\nexport const PersonApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = PersonApiFp(configuration)\n    return {\n        /**\n         * \n         * @summary Возвращает список пользователей\n         * @param {number} pageSize \n         * @param {number} pageNumber \n         * @param {PersonTypeView} [type] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1PersonGet(pageSize: number, pageNumber: number, type?: PersonTypeView, options?: any): AxiosPromise<ResultPaginatedPerson> {\n            return localVarFp.apiV1PersonGet(pageSize, pageNumber, type, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Возвращает пользователя по id\n         * @param {number} personId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1PersonPersonIdGet(personId: number, options?: any): AxiosPromise<ResultPerson> {\n            return localVarFp.apiV1PersonPersonIdGet(personId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Обновляет данные пользователя\n         * @param {number} personId \n         * @param {EditPerson} [editPerson] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1PersonPersonIdPut(personId: number, editPerson?: EditPerson, options?: any): AxiosPromise<ResultPerson> {\n            return localVarFp.apiV1PersonPersonIdPut(personId, editPerson, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Создает нового пользователя\n         * @param {CreatePerson} [createPerson] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1PersonPost(createPerson?: CreatePerson, options?: any): AxiosPromise<ResultPerson> {\n            return localVarFp.apiV1PersonPost(createPerson, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Возвращает текущего авторизованного пользователя\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1PersonSelfGet(options?: any): AxiosPromise<ResultPerson> {\n            return localVarFp.apiV1PersonSelfGet(options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * PersonApi - object-oriented interface\n * @export\n * @class PersonApi\n * @extends {BaseAPI}\n */\nexport class PersonApi extends BaseAPI {\n    /**\n     * \n     * @summary Возвращает список пользователей\n     * @param {number} pageSize \n     * @param {number} pageNumber \n     * @param {PersonTypeView} [type] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PersonApi\n     */\n    public apiV1PersonGet(pageSize: number, pageNumber: number, type?: PersonTypeView, options?: AxiosRequestConfig) {\n        return PersonApiFp(this.configuration).apiV1PersonGet(pageSize, pageNumber, type, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Возвращает пользователя по id\n     * @param {number} personId \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PersonApi\n     */\n    public apiV1PersonPersonIdGet(personId: number, options?: AxiosRequestConfig) {\n        return PersonApiFp(this.configuration).apiV1PersonPersonIdGet(personId, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Обновляет данные пользователя\n     * @param {number} personId \n     * @param {EditPerson} [editPerson] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PersonApi\n     */\n    public apiV1PersonPersonIdPut(personId: number, editPerson?: EditPerson, options?: AxiosRequestConfig) {\n        return PersonApiFp(this.configuration).apiV1PersonPersonIdPut(personId, editPerson, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Создает нового пользователя\n     * @param {CreatePerson} [createPerson] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PersonApi\n     */\n    public apiV1PersonPost(createPerson?: CreatePerson, options?: AxiosRequestConfig) {\n        return PersonApiFp(this.configuration).apiV1PersonPost(createPerson, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Возвращает текущего авторизованного пользователя\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PersonApi\n     */\n    public apiV1PersonSelfGet(options?: AxiosRequestConfig) {\n        return PersonApiFp(this.configuration).apiV1PersonSelfGet(options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n\n/**\n * RoomApi - axios parameter creator\n * @export\n */\nexport const RoomApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @summary Возвращает список помещений\n         * @param {number} pageSize \n         * @param {number} pageNumber \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1RoomGet: async (pageSize: number, pageNumber: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'pageSize' is not null or undefined\n            assertParamExists('apiV1RoomGet', 'pageSize', pageSize)\n            // verify required parameter 'pageNumber' is not null or undefined\n            assertParamExists('apiV1RoomGet', 'pageNumber', pageNumber)\n            const localVarPath = `/api/v1/room`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            await setApiKeyToObject(localVarHeaderParameter, \"Authorization\", configuration)\n\n            if (pageSize !== undefined) {\n                localVarQueryParameter['pageSize'] = pageSize;\n            }\n\n            if (pageNumber !== undefined) {\n                localVarQueryParameter['pageNumber'] = pageNumber;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Создает новое помещение\n         * @param {CreateRoom} [createRoom] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1RoomPost: async (createRoom?: CreateRoom, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/v1/room`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            await setApiKeyToObject(localVarHeaderParameter, \"Authorization\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(createRoom, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Возвращает помещение по id\n         * @param {number} roomId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1RoomRoomIdGet: async (roomId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'roomId' is not null or undefined\n            assertParamExists('apiV1RoomRoomIdGet', 'roomId', roomId)\n            const localVarPath = `/api/v1/room/{roomId}`\n                .replace(`{${\"roomId\"}}`, encodeURIComponent(String(roomId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            await setApiKeyToObject(localVarHeaderParameter, \"Authorization\", configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Обновляет данные помещения\n         * @param {number} roomId \n         * @param {EditRoom} [editRoom] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1RoomRoomIdPut: async (roomId: number, editRoom?: EditRoom, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'roomId' is not null or undefined\n            assertParamExists('apiV1RoomRoomIdPut', 'roomId', roomId)\n            const localVarPath = `/api/v1/room/{roomId}`\n                .replace(`{${\"roomId\"}}`, encodeURIComponent(String(roomId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            await setApiKeyToObject(localVarHeaderParameter, \"Authorization\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(editRoom, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * RoomApi - functional programming interface\n * @export\n */\nexport const RoomApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = RoomApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * \n         * @summary Возвращает список помещений\n         * @param {number} pageSize \n         * @param {number} pageNumber \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiV1RoomGet(pageSize: number, pageNumber: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultPaginatedRoom>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1RoomGet(pageSize, pageNumber, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Создает новое помещение\n         * @param {CreateRoom} [createRoom] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiV1RoomPost(createRoom?: CreateRoom, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultRoom>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1RoomPost(createRoom, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Возвращает помещение по id\n         * @param {number} roomId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiV1RoomRoomIdGet(roomId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultRoom>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1RoomRoomIdGet(roomId, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Обновляет данные помещения\n         * @param {number} roomId \n         * @param {EditRoom} [editRoom] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiV1RoomRoomIdPut(roomId: number, editRoom?: EditRoom, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultRoom>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1RoomRoomIdPut(roomId, editRoom, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    }\n};\n\n/**\n * RoomApi - factory interface\n * @export\n */\nexport const RoomApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = RoomApiFp(configuration)\n    return {\n        /**\n         * \n         * @summary Возвращает список помещений\n         * @param {number} pageSize \n         * @param {number} pageNumber \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1RoomGet(pageSize: number, pageNumber: number, options?: any): AxiosPromise<ResultPaginatedRoom> {\n            return localVarFp.apiV1RoomGet(pageSize, pageNumber, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Создает новое помещение\n         * @param {CreateRoom} [createRoom] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1RoomPost(createRoom?: CreateRoom, options?: any): AxiosPromise<ResultRoom> {\n            return localVarFp.apiV1RoomPost(createRoom, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Возвращает помещение по id\n         * @param {number} roomId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1RoomRoomIdGet(roomId: number, options?: any): AxiosPromise<ResultRoom> {\n            return localVarFp.apiV1RoomRoomIdGet(roomId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Обновляет данные помещения\n         * @param {number} roomId \n         * @param {EditRoom} [editRoom] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1RoomRoomIdPut(roomId: number, editRoom?: EditRoom, options?: any): AxiosPromise<ResultRoom> {\n            return localVarFp.apiV1RoomRoomIdPut(roomId, editRoom, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * RoomApi - object-oriented interface\n * @export\n * @class RoomApi\n * @extends {BaseAPI}\n */\nexport class RoomApi extends BaseAPI {\n    /**\n     * \n     * @summary Возвращает список помещений\n     * @param {number} pageSize \n     * @param {number} pageNumber \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof RoomApi\n     */\n    public apiV1RoomGet(pageSize: number, pageNumber: number, options?: AxiosRequestConfig) {\n        return RoomApiFp(this.configuration).apiV1RoomGet(pageSize, pageNumber, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Создает новое помещение\n     * @param {CreateRoom} [createRoom] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof RoomApi\n     */\n    public apiV1RoomPost(createRoom?: CreateRoom, options?: AxiosRequestConfig) {\n        return RoomApiFp(this.configuration).apiV1RoomPost(createRoom, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Возвращает помещение по id\n     * @param {number} roomId \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof RoomApi\n     */\n    public apiV1RoomRoomIdGet(roomId: number, options?: AxiosRequestConfig) {\n        return RoomApiFp(this.configuration).apiV1RoomRoomIdGet(roomId, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Обновляет данные помещения\n     * @param {number} roomId \n     * @param {EditRoom} [editRoom] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof RoomApi\n     */\n    public apiV1RoomRoomIdPut(roomId: number, editRoom?: EditRoom, options?: AxiosRequestConfig) {\n        return RoomApiFp(this.configuration).apiV1RoomRoomIdPut(roomId, editRoom, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Uritmix.Api\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface ConfigurationParameters {\n    apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);\n    username?: string;\n    password?: string;\n    accessToken?: string | Promise<string> | ((name?: string, scopes?: string[]) => string) | ((name?: string, scopes?: string[]) => Promise<string>);\n    basePath?: string;\n    baseOptions?: any;\n    formDataCtor?: new () => any;\n}\n\nexport class Configuration {\n    /**\n     * parameter for apiKey security\n     * @param name security name\n     * @memberof Configuration\n     */\n    apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);\n    /**\n     * parameter for basic security\n     *\n     * @type {string}\n     * @memberof Configuration\n     */\n    username?: string;\n    /**\n     * parameter for basic security\n     *\n     * @type {string}\n     * @memberof Configuration\n     */\n    password?: string;\n    /**\n     * parameter for oauth2 security\n     * @param name security name\n     * @param scopes oauth2 scope\n     * @memberof Configuration\n     */\n    accessToken?: string | Promise<string> | ((name?: string, scopes?: string[]) => string) | ((name?: string, scopes?: string[]) => Promise<string>);\n    /**\n     * override base path\n     *\n     * @type {string}\n     * @memberof Configuration\n     */\n    basePath?: string;\n    /**\n     * base options for axios calls\n     *\n     * @type {any}\n     * @memberof Configuration\n     */\n    baseOptions?: any;\n    /**\n     * The FormData constructor that will be used to create multipart form data\n     * requests. You can inject this here so that execution environments that\n     * do not support the FormData class can still run the generated client.\n     *\n     * @type {new () => FormData}\n     */\n    formDataCtor?: new () => any;\n\n    constructor(param: ConfigurationParameters = {}) {\n        this.apiKey = param.apiKey;\n        this.username = param.username;\n        this.password = param.password;\n        this.accessToken = param.accessToken;\n        this.basePath = param.basePath;\n        this.baseOptions = param.baseOptions;\n        this.formDataCtor = param.formDataCtor;\n    }\n\n    /**\n     * Check if the given MIME is a JSON MIME.\n     * JSON MIME examples:\n     *   application/json\n     *   application/json; charset=UTF8\n     *   APPLICATION/JSON\n     *   application/vnd.company+json\n     * @param mime - MIME (Multipurpose Internet Mail Extensions)\n     * @return True if the given MIME is JSON, false otherwise.\n     */\n    public isJsonMime(mime: string): boolean {\n        const jsonMime: RegExp = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');\n        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');\n    }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Uritmix.Api\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport * from \"./api\";\nexport * from \"./configuration\";\n\n","import * as api from './api';\nconst API_URL = process.env.REACT_API_URL || 'http://localhost:3000';\n\nexport namespace Api {\n    export const authApi = new api.AuthApi(\n        new api.Configuration({\n            basePath: API_URL\n        })\n    );\n\n    export const personApi = new api.PersonApi(\n        new api.Configuration({\n            basePath: API_URL\n        })\n    );\n\n    export const roomApi = new api.RoomApi(\n        new api.Configuration({\n            basePath: API_URL\n        })\n    );\n\n    export const lessonApi = new api.LessonApi(\n        new api.Configuration({\n            basePath: API_URL\n        })\n    );\n\n    export const abonnementApi = new api.AbonnementApi(\n        new api.Configuration({\n            basePath: API_URL\n        })\n    );\n\n    export const eventApi = new api.EventApi(\n        new api.Configuration({\n            basePath: API_URL\n        })\n    );\n}\n\nexport * as dto from './api';"],"names":["BASE_PATH","replace","BaseAPI","configuration","basePath","axios","globalAxios","RequiredError","field","msg","Error","DUMMY_BASE_URL","assertParamExists","functionName","paramName","paramValue","undefined","setApiKeyToObject","object","keyParamName","apiKey","localVarApiKeyValue","setSearchParams","url","searchParams","URLSearchParams","search","objects","key","Array","isArray","item","append","set","toString","serializeDataIfNeeded","value","requestOptions","nonString","needsSerialization","isJsonMime","headers","JSON","stringify","toPathString","pathname","hash","createRequestFunction","axiosArgs","axiosRequestArgs","options","request","AbonnementValidityView","OneDay","OneMonth","ThreeMonths","HalfYear","Year","AuthRoleView","Manager","Admin","Server","AuthStatusView","NotActivated","Activated","Blocked","DiscountView","D0","D5","D10","D15","D20","D25","D30","D40","D50","D60","D70","D80","D90","EventTypeView","NotStarted","InProgress","Finished","PersonTypeView","All","Trainer","Account","AbonnementApiAxiosParamCreator","apiV1AbonnementAbonnementIdGet","abonnementId","localVarPath","encodeURIComponent","String","localVarUrlObj","URL","baseOptions","localVarRequestOptions","method","localVarHeaderParameter","localVarQueryParameter","headersFromBaseOptions","apiV1AbonnementAbonnementIdPut","editAbonnement","data","apiV1AbonnementGet","pageSize","pageNumber","apiV1AbonnementPost","createAbonnement","apiV1AbonnementSoldPersonIdGet","personId","apiV1AbonnementSoldPost","saleAbonnement","AbonnementApiFp","localVarAxiosParamCreator","localVarAxiosArgs","AbonnementApiFactory","localVarFp","then","AbonnementApi","AuthApiAxiosParamCreator","apiV1AuthActivatePost","activateAuth","apiV1AuthLoginPost","loginUser","apiV1AuthLogoutPost","logout","apiV1AuthPasswordResetPost","passwordReset","apiV1AuthPasswordResetQueryPost","passwordResetQuery","apiV1AuthPersonIdPost","createAuth","apiV1AuthRefreshPost","refresh","AuthApiFp","AuthApiFactory","AuthApi","EventApiAxiosParamCreator","apiV1EventEventIdPut","eventId","editEvent","apiV1EventGet","startDate","endDate","Date","toISOString","apiV1EventPost","createEvent","EventApiFp","EventApiFactory","EventApi","LessonApiAxiosParamCreator","apiV1LessonGet","apiV1LessonLessonIdGet","lessonId","apiV1LessonLessonIdPut","editLesson","apiV1LessonPost","createLesson","LessonApiFp","LessonApiFactory","LessonApi","PersonApiAxiosParamCreator","apiV1PersonGet","type","apiV1PersonPersonIdGet","apiV1PersonPersonIdPut","editPerson","apiV1PersonPost","createPerson","apiV1PersonSelfGet","PersonApiFp","PersonApiFactory","PersonApi","RoomApiAxiosParamCreator","apiV1RoomGet","apiV1RoomPost","createRoom","apiV1RoomRoomIdGet","roomId","apiV1RoomRoomIdPut","editRoom","RoomApiFp","RoomApiFactory","RoomApi","Configuration","param","username","password","accessToken","formDataCtor","mime","jsonMime","RegExp","test","toLowerCase","API_URL","process","env","REACT_API_URL","Api","api"],"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"}