{"version":3,"file":"uritmix.api.esm.js","sources":["../src/api/base.ts","../src/api/common.ts","../src/api/api.ts","../src/api/configuration.ts","../src/api/index.ts","../src/index.tsx"],"sourcesContent":["/* tslint:disable */\n/* eslint-disable */\n/**\n * Uritmix.Api\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport { Configuration } from \"./configuration\";\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';\n\nexport const BASE_PATH = \"http://localhost\".replace(/\\/+$/, \"\");\n\n/**\n *\n * @export\n */\nexport const COLLECTION_FORMATS = {\n    csv: \",\",\n    ssv: \" \",\n    tsv: \"\\t\",\n    pipes: \"|\",\n};\n\n/**\n *\n * @export\n * @interface RequestArgs\n */\nexport interface RequestArgs {\n    url: string;\n    options: AxiosRequestConfig;\n}\n\n/**\n *\n * @export\n * @class BaseAPI\n */\nexport class BaseAPI {\n    protected configuration: Configuration | undefined;\n\n    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected axios: AxiosInstance = globalAxios) {\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = configuration.basePath || this.basePath;\n        }\n    }\n};\n\n/**\n *\n * @export\n * @class RequiredError\n * @extends {Error}\n */\nexport class RequiredError extends Error {\n    name: \"RequiredError\" = \"RequiredError\";\n    constructor(public field: string, msg?: string) {\n        super(msg);\n    }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Uritmix.Api\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport { Configuration } from \"./configuration\";\nimport { RequiredError, RequestArgs } from \"./base\";\nimport { AxiosInstance, AxiosResponse } from 'axios';\n\n/**\n *\n * @export\n */\nexport const DUMMY_BASE_URL = 'https://example.com'\n\n/**\n *\n * @throws {RequiredError}\n * @export\n */\nexport const assertParamExists = function (functionName: string, paramName: string, paramValue: unknown) {\n    if (paramValue === null || paramValue === undefined) {\n        throw new RequiredError(paramName, `Required parameter ${paramName} was null or undefined when calling ${functionName}.`);\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setApiKeyToObject = async function (object: any, keyParamName: string, configuration?: Configuration) {\n    if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n            ? await configuration.apiKey(keyParamName)\n            : await configuration.apiKey;\n        object[keyParamName] = localVarApiKeyValue;\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setBasicAuthToObject = function (object: any, configuration?: Configuration) {\n    if (configuration && (configuration.username || configuration.password)) {\n        object[\"auth\"] = { username: configuration.username, password: configuration.password };\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setBearerAuthToObject = async function (object: any, configuration?: Configuration) {\n    if (configuration && configuration.accessToken) {\n        const accessToken = typeof configuration.accessToken === 'function'\n            ? await configuration.accessToken()\n            : await configuration.accessToken;\n        object[\"Authorization\"] = \"Bearer \" + accessToken;\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setOAuthToObject = async function (object: any, name: string, scopes: string[], configuration?: Configuration) {\n    if (configuration && configuration.accessToken) {\n        const localVarAccessTokenValue = typeof configuration.accessToken === 'function'\n            ? await configuration.accessToken(name, scopes)\n            : await configuration.accessToken;\n        object[\"Authorization\"] = \"Bearer \" + localVarAccessTokenValue;\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setSearchParams = function (url: URL, ...objects: any[]) {\n    const searchParams = new URLSearchParams(url.search);\n    for (const object of objects) {\n        for (const key in object) {\n            if (Array.isArray(object[key])) {\n                searchParams.delete(key);\n                for (const item of object[key]) {\n                    searchParams.append(key, item);\n                }\n            } else {\n                searchParams.set(key, object[key]);\n            }\n        }\n    }\n    url.search = searchParams.toString();\n}\n\n/**\n *\n * @export\n */\nexport const serializeDataIfNeeded = function (value: any, requestOptions: any, configuration?: Configuration) {\n    const nonString = typeof value !== 'string';\n    const needsSerialization = nonString && configuration && configuration.isJsonMime\n        ? configuration.isJsonMime(requestOptions.headers['Content-Type'])\n        : nonString;\n    return needsSerialization\n        ? JSON.stringify(value !== undefined ? value : {})\n        : (value || \"\");\n}\n\n/**\n *\n * @export\n */\nexport const toPathString = function (url: URL) {\n    return url.pathname + url.search + url.hash\n}\n\n/**\n *\n * @export\n */\nexport const createRequestFunction = function (axiosArgs: RequestArgs, globalAxios: AxiosInstance, BASE_PATH: string, configuration?: Configuration) {\n    return <T = unknown, R = AxiosResponse<T>>(axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n        const axiosRequestArgs = {...axiosArgs.options, url: (configuration?.basePath || basePath) + axiosArgs.url};\n        return axios.request<T, R>(axiosRequestArgs);\n    };\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Uritmix.Api\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport { Configuration } from './configuration';\nimport globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';\n\n/**\n * \n * @export\n * @interface Abonnement\n */\nexport interface Abonnement {\n    /**\n     * \n     * @type {number}\n     * @memberof Abonnement\n     */\n    'id'?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof Abonnement\n     */\n    'name'?: string;\n    /**\n     * \n     * @type {AbonnementValidityView}\n     * @memberof Abonnement\n     */\n    'validity'?: AbonnementValidityView;\n    /**\n     * \n     * @type {number}\n     * @memberof Abonnement\n     */\n    'numberOfVisits'?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof Abonnement\n     */\n    'basePrice'?: number;\n    /**\n     * \n     * @type {DiscountView}\n     * @memberof Abonnement\n     */\n    'discount'?: DiscountView;\n    /**\n     * \n     * @type {Array<Lesson>}\n     * @memberof Abonnement\n     */\n    'lessons'?: Array<Lesson>;\n}\n/**\n * \n * @export\n * @enum {string}\n */\n\nexport const AbonnementValidityView = {\n    OneDay: 'OneDay',\n    OneMonth: 'OneMonth',\n    ThreeMonths: 'ThreeMonths',\n    HalfYear: 'HalfYear',\n    Year: 'Year'\n} as const;\n\nexport type AbonnementValidityView = typeof AbonnementValidityView[keyof typeof AbonnementValidityView];\n\n\n/**\n * \n * @export\n * @interface ActivateAuth\n */\nexport interface ActivateAuth {\n    /**\n     * \n     * @type {string}\n     * @memberof ActivateAuth\n     */\n    'confirmCode'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ActivateAuth\n     */\n    'password'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ActivateAuth\n     */\n    'passwordConfirm'?: string;\n}\n/**\n * \n * @export\n * @interface Auth\n */\nexport interface Auth {\n    /**\n     * \n     * @type {AuthRoleView}\n     * @memberof Auth\n     */\n    'role'?: AuthRoleView;\n    /**\n     * \n     * @type {AuthStatusView}\n     * @memberof Auth\n     */\n    'status'?: AuthStatusView;\n    /**\n     * \n     * @type {string}\n     * @memberof Auth\n     */\n    'email'?: string;\n}\n/**\n * \n * @export\n * @enum {string}\n */\n\nexport const AuthRoleView = {\n    Manager: 'Manager',\n    Admin: 'Admin',\n    Server: 'Server'\n} as const;\n\nexport type AuthRoleView = typeof AuthRoleView[keyof typeof AuthRoleView];\n\n\n/**\n * \n * @export\n * @enum {string}\n */\n\nexport const AuthStatusView = {\n    NotActivated: 'NotActivated',\n    Activated: 'Activated',\n    Blocked: 'Blocked'\n} as const;\n\nexport type AuthStatusView = typeof AuthStatusView[keyof typeof AuthStatusView];\n\n\n/**\n * \n * @export\n * @interface CreateAbonnement\n */\nexport interface CreateAbonnement {\n    /**\n     * \n     * @type {string}\n     * @memberof CreateAbonnement\n     */\n    'name'?: string;\n    /**\n     * \n     * @type {AbonnementValidityView}\n     * @memberof CreateAbonnement\n     */\n    'validity'?: AbonnementValidityView;\n    /**\n     * \n     * @type {number}\n     * @memberof CreateAbonnement\n     */\n    'numberOfVisits'?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof CreateAbonnement\n     */\n    'basePrice'?: number;\n    /**\n     * \n     * @type {DiscountView}\n     * @memberof CreateAbonnement\n     */\n    'discount'?: DiscountView;\n    /**\n     * \n     * @type {Array<number>}\n     * @memberof CreateAbonnement\n     */\n    'lessonIds'?: Array<number>;\n}\n/**\n * \n * @export\n * @interface CreateAuth\n */\nexport interface CreateAuth {\n    /**\n     * \n     * @type {string}\n     * @memberof CreateAuth\n     */\n    'email'?: string;\n    /**\n     * \n     * @type {AuthRoleView}\n     * @memberof CreateAuth\n     */\n    'role'?: AuthRoleView;\n}\n/**\n * \n * @export\n * @interface CreateLesson\n */\nexport interface CreateLesson {\n    /**\n     * \n     * @type {string}\n     * @memberof CreateLesson\n     */\n    'name'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateLesson\n     */\n    'description'?: string | null;\n    /**\n     * \n     * @type {number}\n     * @memberof CreateLesson\n     */\n    'trainerId'?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof CreateLesson\n     */\n    'durationMinute'?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof CreateLesson\n     */\n    'basePrice'?: number;\n}\n/**\n * \n * @export\n * @interface CreatePerson\n */\nexport interface CreatePerson {\n    /**\n     * \n     * @type {string}\n     * @memberof CreatePerson\n     */\n    'firstName'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreatePerson\n     */\n    'lastName'?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof CreatePerson\n     */\n    'isTrainer'?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof CreatePerson\n     */\n    'description'?: string | null;\n}\n/**\n * \n * @export\n * @interface CreateRoom\n */\nexport interface CreateRoom {\n    /**\n     * \n     * @type {string}\n     * @memberof CreateRoom\n     */\n    'name'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateRoom\n     */\n    'description'?: string | null;\n}\n/**\n * \n * @export\n * @enum {string}\n */\n\nexport const DiscountView = {\n    D0: 'D0',\n    D5: 'D5',\n    D10: 'D10',\n    D15: 'D15',\n    D20: 'D20',\n    D25: 'D25',\n    D30: 'D30',\n    D40: 'D40',\n    D50: 'D50',\n    D60: 'D60',\n    D70: 'D70',\n    D80: 'D80',\n    D90: 'D90'\n} as const;\n\nexport type DiscountView = typeof DiscountView[keyof typeof DiscountView];\n\n\n/**\n * \n * @export\n * @interface EditAbonnement\n */\nexport interface EditAbonnement {\n    /**\n     * \n     * @type {string}\n     * @memberof EditAbonnement\n     */\n    'name'?: string;\n    /**\n     * \n     * @type {AbonnementValidityView}\n     * @memberof EditAbonnement\n     */\n    'validity'?: AbonnementValidityView;\n    /**\n     * \n     * @type {number}\n     * @memberof EditAbonnement\n     */\n    'numberOfVisits'?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof EditAbonnement\n     */\n    'basePrice'?: number;\n    /**\n     * \n     * @type {DiscountView}\n     * @memberof EditAbonnement\n     */\n    'discount'?: DiscountView;\n    /**\n     * \n     * @type {Array<number>}\n     * @memberof EditAbonnement\n     */\n    'lessonIds'?: Array<number>;\n}\n/**\n * \n * @export\n * @interface EditLesson\n */\nexport interface EditLesson {\n    /**\n     * \n     * @type {string}\n     * @memberof EditLesson\n     */\n    'name'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof EditLesson\n     */\n    'description'?: string | null;\n    /**\n     * \n     * @type {number}\n     * @memberof EditLesson\n     */\n    'trainerId'?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof EditLesson\n     */\n    'durationMinute'?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof EditLesson\n     */\n    'basePrice'?: number;\n}\n/**\n * \n * @export\n * @interface EditPerson\n */\nexport interface EditPerson {\n    /**\n     * \n     * @type {string}\n     * @memberof EditPerson\n     */\n    'firstName'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof EditPerson\n     */\n    'lastName'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof EditPerson\n     */\n    'description'?: string | null;\n}\n/**\n * \n * @export\n * @interface EditRoom\n */\nexport interface EditRoom {\n    /**\n     * \n     * @type {string}\n     * @memberof EditRoom\n     */\n    'name'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof EditRoom\n     */\n    'description'?: string | null;\n}\n/**\n * \n * @export\n * @interface ErrorResponse\n */\nexport interface ErrorResponse {\n    /**\n     * \n     * @type {string}\n     * @memberof ErrorResponse\n     */\n    'error'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ErrorResponse\n     */\n    'code'?: string;\n}\n/**\n * \n * @export\n * @interface Lesson\n */\nexport interface Lesson {\n    /**\n     * \n     * @type {number}\n     * @memberof Lesson\n     */\n    'id'?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof Lesson\n     */\n    'name'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Lesson\n     */\n    'description'?: string | null;\n    /**\n     * \n     * @type {Person}\n     * @memberof Lesson\n     */\n    'trainer'?: Person;\n    /**\n     * \n     * @type {number}\n     * @memberof Lesson\n     */\n    'durationMinute'?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof Lesson\n     */\n    'basePrice'?: number;\n}\n/**\n * \n * @export\n * @interface LoggedPerson\n */\nexport interface LoggedPerson {\n    /**\n     * \n     * @type {string}\n     * @memberof LoggedPerson\n     */\n    'firstName'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof LoggedPerson\n     */\n    'lastName'?: string;\n    /**\n     * \n     * @type {AuthRoleView}\n     * @memberof LoggedPerson\n     */\n    'role'?: AuthRoleView;\n    /**\n     * \n     * @type {string}\n     * @memberof LoggedPerson\n     */\n    'email'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof LoggedPerson\n     */\n    'accessToken'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof LoggedPerson\n     */\n    'refreshToken'?: string;\n}\n/**\n * \n * @export\n * @interface LoginUser\n */\nexport interface LoginUser {\n    /**\n     * \n     * @type {string}\n     * @memberof LoginUser\n     */\n    'email'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof LoginUser\n     */\n    'password'?: string;\n}\n/**\n * \n * @export\n * @interface PaginatedAbonnement\n */\nexport interface PaginatedAbonnement {\n    /**\n     * \n     * @type {number}\n     * @memberof PaginatedAbonnement\n     */\n    'pageNumber'?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof PaginatedAbonnement\n     */\n    'pageSize'?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof PaginatedAbonnement\n     */\n    'totalPages'?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof PaginatedAbonnement\n     */\n    'totalRecords'?: number;\n    /**\n     * \n     * @type {boolean}\n     * @memberof PaginatedAbonnement\n     */\n    'nextPageExists'?: boolean;\n    /**\n     * \n     * @type {Array<Abonnement>}\n     * @memberof PaginatedAbonnement\n     */\n    'results'?: Array<Abonnement> | null;\n}\n/**\n * \n * @export\n * @interface PaginatedLesson\n */\nexport interface PaginatedLesson {\n    /**\n     * \n     * @type {number}\n     * @memberof PaginatedLesson\n     */\n    'pageNumber'?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof PaginatedLesson\n     */\n    'pageSize'?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof PaginatedLesson\n     */\n    'totalPages'?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof PaginatedLesson\n     */\n    'totalRecords'?: number;\n    /**\n     * \n     * @type {boolean}\n     * @memberof PaginatedLesson\n     */\n    'nextPageExists'?: boolean;\n    /**\n     * \n     * @type {Array<Lesson>}\n     * @memberof PaginatedLesson\n     */\n    'results'?: Array<Lesson> | null;\n}\n/**\n * \n * @export\n * @interface PaginatedPerson\n */\nexport interface PaginatedPerson {\n    /**\n     * \n     * @type {number}\n     * @memberof PaginatedPerson\n     */\n    'pageNumber'?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof PaginatedPerson\n     */\n    'pageSize'?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof PaginatedPerson\n     */\n    'totalPages'?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof PaginatedPerson\n     */\n    'totalRecords'?: number;\n    /**\n     * \n     * @type {boolean}\n     * @memberof PaginatedPerson\n     */\n    'nextPageExists'?: boolean;\n    /**\n     * \n     * @type {Array<Person>}\n     * @memberof PaginatedPerson\n     */\n    'results'?: Array<Person> | null;\n}\n/**\n * \n * @export\n * @interface PaginatedRoom\n */\nexport interface PaginatedRoom {\n    /**\n     * \n     * @type {number}\n     * @memberof PaginatedRoom\n     */\n    'pageNumber'?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof PaginatedRoom\n     */\n    'pageSize'?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof PaginatedRoom\n     */\n    'totalPages'?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof PaginatedRoom\n     */\n    'totalRecords'?: number;\n    /**\n     * \n     * @type {boolean}\n     * @memberof PaginatedRoom\n     */\n    'nextPageExists'?: boolean;\n    /**\n     * \n     * @type {Array<Room>}\n     * @memberof PaginatedRoom\n     */\n    'results'?: Array<Room> | null;\n}\n/**\n * \n * @export\n * @interface PaginatedSoldAbonnement\n */\nexport interface PaginatedSoldAbonnement {\n    /**\n     * \n     * @type {number}\n     * @memberof PaginatedSoldAbonnement\n     */\n    'pageNumber'?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof PaginatedSoldAbonnement\n     */\n    'pageSize'?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof PaginatedSoldAbonnement\n     */\n    'totalPages'?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof PaginatedSoldAbonnement\n     */\n    'totalRecords'?: number;\n    /**\n     * \n     * @type {boolean}\n     * @memberof PaginatedSoldAbonnement\n     */\n    'nextPageExists'?: boolean;\n    /**\n     * \n     * @type {Array<SoldAbonnement>}\n     * @memberof PaginatedSoldAbonnement\n     */\n    'results'?: Array<SoldAbonnement> | null;\n}\n/**\n * \n * @export\n * @interface PasswordReset\n */\nexport interface PasswordReset {\n    /**\n     * \n     * @type {string}\n     * @memberof PasswordReset\n     */\n    'confirmCode'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof PasswordReset\n     */\n    'password'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof PasswordReset\n     */\n    'passwordConfirm'?: string;\n}\n/**\n * \n * @export\n * @interface PasswordResetQuery\n */\nexport interface PasswordResetQuery {\n    /**\n     * \n     * @type {string}\n     * @memberof PasswordResetQuery\n     */\n    'email'?: string;\n}\n/**\n * \n * @export\n * @interface Person\n */\nexport interface Person {\n    /**\n     * \n     * @type {number}\n     * @memberof Person\n     */\n    'id'?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof Person\n     */\n    'firstName'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Person\n     */\n    'lastName'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Person\n     */\n    'description'?: string | null;\n    /**\n     * \n     * @type {boolean}\n     * @memberof Person\n     */\n    'isTrainer'?: boolean;\n    /**\n     * \n     * @type {boolean}\n     * @memberof Person\n     */\n    'haveAuth'?: boolean;\n    /**\n     * \n     * @type {Auth}\n     * @memberof Person\n     */\n    'auth'?: Auth;\n}\n/**\n * \n * @export\n * @enum {string}\n */\n\nexport const PersonTypeView = {\n    All: 'All',\n    Trainer: 'Trainer',\n    Account: 'Account'\n} as const;\n\nexport type PersonTypeView = typeof PersonTypeView[keyof typeof PersonTypeView];\n\n\n/**\n * \n * @export\n * @interface PropertyError\n */\nexport interface PropertyError {\n    /**\n     * \n     * @type {string}\n     * @memberof PropertyError\n     */\n    'name'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof PropertyError\n     */\n    'error'?: string;\n}\n/**\n * \n * @export\n * @interface Refresh\n */\nexport interface Refresh {\n    /**\n     * \n     * @type {string}\n     * @memberof Refresh\n     */\n    'token'?: string;\n}\n/**\n * \n * @export\n * @interface ResultAbonnement\n */\nexport interface ResultAbonnement {\n    /**\n     * \n     * @type {Abonnement}\n     * @memberof ResultAbonnement\n     */\n    'result'?: Abonnement;\n    /**\n     * \n     * @type {string}\n     * @memberof ResultAbonnement\n     */\n    'error'?: string | null;\n    /**\n     * \n     * @type {boolean}\n     * @memberof ResultAbonnement\n     */\n    'ok'?: boolean;\n}\n/**\n * \n * @export\n * @interface ResultLesson\n */\nexport interface ResultLesson {\n    /**\n     * \n     * @type {Lesson}\n     * @memberof ResultLesson\n     */\n    'result'?: Lesson;\n    /**\n     * \n     * @type {string}\n     * @memberof ResultLesson\n     */\n    'error'?: string | null;\n    /**\n     * \n     * @type {boolean}\n     * @memberof ResultLesson\n     */\n    'ok'?: boolean;\n}\n/**\n * \n * @export\n * @interface ResultLoggedPerson\n */\nexport interface ResultLoggedPerson {\n    /**\n     * \n     * @type {LoggedPerson}\n     * @memberof ResultLoggedPerson\n     */\n    'result'?: LoggedPerson;\n    /**\n     * \n     * @type {string}\n     * @memberof ResultLoggedPerson\n     */\n    'error'?: string | null;\n    /**\n     * \n     * @type {boolean}\n     * @memberof ResultLoggedPerson\n     */\n    'ok'?: boolean;\n}\n/**\n * \n * @export\n * @interface ResultPaginatedAbonnement\n */\nexport interface ResultPaginatedAbonnement {\n    /**\n     * \n     * @type {PaginatedAbonnement}\n     * @memberof ResultPaginatedAbonnement\n     */\n    'result'?: PaginatedAbonnement;\n    /**\n     * \n     * @type {string}\n     * @memberof ResultPaginatedAbonnement\n     */\n    'error'?: string | null;\n    /**\n     * \n     * @type {boolean}\n     * @memberof ResultPaginatedAbonnement\n     */\n    'ok'?: boolean;\n}\n/**\n * \n * @export\n * @interface ResultPaginatedLesson\n */\nexport interface ResultPaginatedLesson {\n    /**\n     * \n     * @type {PaginatedLesson}\n     * @memberof ResultPaginatedLesson\n     */\n    'result'?: PaginatedLesson;\n    /**\n     * \n     * @type {string}\n     * @memberof ResultPaginatedLesson\n     */\n    'error'?: string | null;\n    /**\n     * \n     * @type {boolean}\n     * @memberof ResultPaginatedLesson\n     */\n    'ok'?: boolean;\n}\n/**\n * \n * @export\n * @interface ResultPaginatedPerson\n */\nexport interface ResultPaginatedPerson {\n    /**\n     * \n     * @type {PaginatedPerson}\n     * @memberof ResultPaginatedPerson\n     */\n    'result'?: PaginatedPerson;\n    /**\n     * \n     * @type {string}\n     * @memberof ResultPaginatedPerson\n     */\n    'error'?: string | null;\n    /**\n     * \n     * @type {boolean}\n     * @memberof ResultPaginatedPerson\n     */\n    'ok'?: boolean;\n}\n/**\n * \n * @export\n * @interface ResultPaginatedRoom\n */\nexport interface ResultPaginatedRoom {\n    /**\n     * \n     * @type {PaginatedRoom}\n     * @memberof ResultPaginatedRoom\n     */\n    'result'?: PaginatedRoom;\n    /**\n     * \n     * @type {string}\n     * @memberof ResultPaginatedRoom\n     */\n    'error'?: string | null;\n    /**\n     * \n     * @type {boolean}\n     * @memberof ResultPaginatedRoom\n     */\n    'ok'?: boolean;\n}\n/**\n * \n * @export\n * @interface ResultPaginatedSoldAbonnement\n */\nexport interface ResultPaginatedSoldAbonnement {\n    /**\n     * \n     * @type {PaginatedSoldAbonnement}\n     * @memberof ResultPaginatedSoldAbonnement\n     */\n    'result'?: PaginatedSoldAbonnement;\n    /**\n     * \n     * @type {string}\n     * @memberof ResultPaginatedSoldAbonnement\n     */\n    'error'?: string | null;\n    /**\n     * \n     * @type {boolean}\n     * @memberof ResultPaginatedSoldAbonnement\n     */\n    'ok'?: boolean;\n}\n/**\n * \n * @export\n * @interface ResultPerson\n */\nexport interface ResultPerson {\n    /**\n     * \n     * @type {Person}\n     * @memberof ResultPerson\n     */\n    'result'?: Person;\n    /**\n     * \n     * @type {string}\n     * @memberof ResultPerson\n     */\n    'error'?: string | null;\n    /**\n     * \n     * @type {boolean}\n     * @memberof ResultPerson\n     */\n    'ok'?: boolean;\n}\n/**\n * \n * @export\n * @interface ResultRoom\n */\nexport interface ResultRoom {\n    /**\n     * \n     * @type {Room}\n     * @memberof ResultRoom\n     */\n    'result'?: Room;\n    /**\n     * \n     * @type {string}\n     * @memberof ResultRoom\n     */\n    'error'?: string | null;\n    /**\n     * \n     * @type {boolean}\n     * @memberof ResultRoom\n     */\n    'ok'?: boolean;\n}\n/**\n * \n * @export\n * @interface ResultSoldAbonnement\n */\nexport interface ResultSoldAbonnement {\n    /**\n     * \n     * @type {SoldAbonnement}\n     * @memberof ResultSoldAbonnement\n     */\n    'result'?: SoldAbonnement;\n    /**\n     * \n     * @type {string}\n     * @memberof ResultSoldAbonnement\n     */\n    'error'?: string | null;\n    /**\n     * \n     * @type {boolean}\n     * @memberof ResultSoldAbonnement\n     */\n    'ok'?: boolean;\n}\n/**\n * \n * @export\n * @interface ResultUnit\n */\nexport interface ResultUnit {\n    /**\n     * \n     * @type {object}\n     * @memberof ResultUnit\n     */\n    'result'?: object;\n    /**\n     * \n     * @type {string}\n     * @memberof ResultUnit\n     */\n    'error'?: string | null;\n    /**\n     * \n     * @type {boolean}\n     * @memberof ResultUnit\n     */\n    'ok'?: boolean;\n}\n/**\n * \n * @export\n * @interface Room\n */\nexport interface Room {\n    /**\n     * \n     * @type {number}\n     * @memberof Room\n     */\n    'id'?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof Room\n     */\n    'name'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Room\n     */\n    'description'?: string | null;\n}\n/**\n * \n * @export\n * @interface SaleAbonnement\n */\nexport interface SaleAbonnement {\n    /**\n     * \n     * @type {number}\n     * @memberof SaleAbonnement\n     */\n    'personId'?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof SaleAbonnement\n     */\n    'abonnementId'?: number;\n    /**\n     * \n     * @type {DiscountView}\n     * @memberof SaleAbonnement\n     */\n    'discount'?: DiscountView;\n}\n/**\n * \n * @export\n * @interface SoldAbonnement\n */\nexport interface SoldAbonnement {\n    /**\n     * \n     * @type {number}\n     * @memberof SoldAbonnement\n     */\n    'id'?: number;\n    /**\n     * \n     * @type {boolean}\n     * @memberof SoldAbonnement\n     */\n    'active'?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof SoldAbonnement\n     */\n    'dateSale'?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SoldAbonnement\n     */\n    'dateExpiration'?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof SoldAbonnement\n     */\n    'priceSold'?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof SoldAbonnement\n     */\n    'visitCounter'?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof SoldAbonnement\n     */\n    'name'?: string;\n    /**\n     * \n     * @type {AbonnementValidityView}\n     * @memberof SoldAbonnement\n     */\n    'validity'?: AbonnementValidityView;\n    /**\n     * \n     * @type {number}\n     * @memberof SoldAbonnement\n     */\n    'numberOfVisits'?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof SoldAbonnement\n     */\n    'basePrice'?: number;\n    /**\n     * \n     * @type {DiscountView}\n     * @memberof SoldAbonnement\n     */\n    'discount'?: DiscountView;\n    /**\n     * \n     * @type {Array<Lesson>}\n     * @memberof SoldAbonnement\n     */\n    'lessons'?: Array<Lesson>;\n}\n/**\n * \n * @export\n * @interface ValidError\n */\nexport interface ValidError {\n    /**\n     * \n     * @type {Array<PropertyError>}\n     * @memberof ValidError\n     */\n    'properties'?: Array<PropertyError>;\n}\n\n/**\n * AbonnementApi - axios parameter creator\n * @export\n */\nexport const AbonnementApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @summary Обновляет данные абонимента\n         * @param {number} abonnementId \n         * @param {EditAbonnement} [editAbonnement] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1AbonnementAbonnementIdPut: async (abonnementId: number, editAbonnement?: EditAbonnement, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'abonnementId' is not null or undefined\n            assertParamExists('apiV1AbonnementAbonnementIdPut', 'abonnementId', abonnementId)\n            const localVarPath = `/api/v1/abonnement/{abonnementId}`\n                .replace(`{${\"abonnementId\"}}`, encodeURIComponent(String(abonnementId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            await setApiKeyToObject(localVarHeaderParameter, \"Authorization\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(editAbonnement, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Возвращает список абониментов\n         * @param {number} pageSize \n         * @param {number} pageNumber \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1AbonnementGet: async (pageSize: number, pageNumber: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'pageSize' is not null or undefined\n            assertParamExists('apiV1AbonnementGet', 'pageSize', pageSize)\n            // verify required parameter 'pageNumber' is not null or undefined\n            assertParamExists('apiV1AbonnementGet', 'pageNumber', pageNumber)\n            const localVarPath = `/api/v1/abonnement`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            await setApiKeyToObject(localVarHeaderParameter, \"Authorization\", configuration)\n\n            if (pageSize !== undefined) {\n                localVarQueryParameter['pageSize'] = pageSize;\n            }\n\n            if (pageNumber !== undefined) {\n                localVarQueryParameter['pageNumber'] = pageNumber;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Создает новый абонимент\n         * @param {CreateAbonnement} [createAbonnement] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1AbonnementPost: async (createAbonnement?: CreateAbonnement, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/v1/abonnement`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            await setApiKeyToObject(localVarHeaderParameter, \"Authorization\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(createAbonnement, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Возвращает список купленных абониментов пользователя\n         * @param {number} personId \n         * @param {number} pageSize \n         * @param {number} pageNumber \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1AbonnementSoldPersonIdGet: async (personId: number, pageSize: number, pageNumber: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'personId' is not null or undefined\n            assertParamExists('apiV1AbonnementSoldPersonIdGet', 'personId', personId)\n            // verify required parameter 'pageSize' is not null or undefined\n            assertParamExists('apiV1AbonnementSoldPersonIdGet', 'pageSize', pageSize)\n            // verify required parameter 'pageNumber' is not null or undefined\n            assertParamExists('apiV1AbonnementSoldPersonIdGet', 'pageNumber', pageNumber)\n            const localVarPath = `/api/v1/abonnement/sold/{personId}`\n                .replace(`{${\"personId\"}}`, encodeURIComponent(String(personId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            await setApiKeyToObject(localVarHeaderParameter, \"Authorization\", configuration)\n\n            if (pageSize !== undefined) {\n                localVarQueryParameter['pageSize'] = pageSize;\n            }\n\n            if (pageNumber !== undefined) {\n                localVarQueryParameter['pageNumber'] = pageNumber;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Продажа абонимента\n         * @param {SaleAbonnement} [saleAbonnement] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1AbonnementSoldPost: async (saleAbonnement?: SaleAbonnement, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/v1/abonnement/sold`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            await setApiKeyToObject(localVarHeaderParameter, \"Authorization\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(saleAbonnement, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * AbonnementApi - functional programming interface\n * @export\n */\nexport const AbonnementApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = AbonnementApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * \n         * @summary Обновляет данные абонимента\n         * @param {number} abonnementId \n         * @param {EditAbonnement} [editAbonnement] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiV1AbonnementAbonnementIdPut(abonnementId: number, editAbonnement?: EditAbonnement, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultAbonnement>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AbonnementAbonnementIdPut(abonnementId, editAbonnement, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Возвращает список абониментов\n         * @param {number} pageSize \n         * @param {number} pageNumber \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiV1AbonnementGet(pageSize: number, pageNumber: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultPaginatedAbonnement>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AbonnementGet(pageSize, pageNumber, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Создает новый абонимент\n         * @param {CreateAbonnement} [createAbonnement] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiV1AbonnementPost(createAbonnement?: CreateAbonnement, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultAbonnement>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AbonnementPost(createAbonnement, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Возвращает список купленных абониментов пользователя\n         * @param {number} personId \n         * @param {number} pageSize \n         * @param {number} pageNumber \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiV1AbonnementSoldPersonIdGet(personId: number, pageSize: number, pageNumber: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultPaginatedSoldAbonnement>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AbonnementSoldPersonIdGet(personId, pageSize, pageNumber, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Продажа абонимента\n         * @param {SaleAbonnement} [saleAbonnement] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiV1AbonnementSoldPost(saleAbonnement?: SaleAbonnement, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultSoldAbonnement>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AbonnementSoldPost(saleAbonnement, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    }\n};\n\n/**\n * AbonnementApi - factory interface\n * @export\n */\nexport const AbonnementApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = AbonnementApiFp(configuration)\n    return {\n        /**\n         * \n         * @summary Обновляет данные абонимента\n         * @param {number} abonnementId \n         * @param {EditAbonnement} [editAbonnement] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1AbonnementAbonnementIdPut(abonnementId: number, editAbonnement?: EditAbonnement, options?: any): AxiosPromise<ResultAbonnement> {\n            return localVarFp.apiV1AbonnementAbonnementIdPut(abonnementId, editAbonnement, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Возвращает список абониментов\n         * @param {number} pageSize \n         * @param {number} pageNumber \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1AbonnementGet(pageSize: number, pageNumber: number, options?: any): AxiosPromise<ResultPaginatedAbonnement> {\n            return localVarFp.apiV1AbonnementGet(pageSize, pageNumber, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Создает новый абонимент\n         * @param {CreateAbonnement} [createAbonnement] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1AbonnementPost(createAbonnement?: CreateAbonnement, options?: any): AxiosPromise<ResultAbonnement> {\n            return localVarFp.apiV1AbonnementPost(createAbonnement, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Возвращает список купленных абониментов пользователя\n         * @param {number} personId \n         * @param {number} pageSize \n         * @param {number} pageNumber \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1AbonnementSoldPersonIdGet(personId: number, pageSize: number, pageNumber: number, options?: any): AxiosPromise<ResultPaginatedSoldAbonnement> {\n            return localVarFp.apiV1AbonnementSoldPersonIdGet(personId, pageSize, pageNumber, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Продажа абонимента\n         * @param {SaleAbonnement} [saleAbonnement] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1AbonnementSoldPost(saleAbonnement?: SaleAbonnement, options?: any): AxiosPromise<ResultSoldAbonnement> {\n            return localVarFp.apiV1AbonnementSoldPost(saleAbonnement, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * AbonnementApi - object-oriented interface\n * @export\n * @class AbonnementApi\n * @extends {BaseAPI}\n */\nexport class AbonnementApi extends BaseAPI {\n    /**\n     * \n     * @summary Обновляет данные абонимента\n     * @param {number} abonnementId \n     * @param {EditAbonnement} [editAbonnement] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AbonnementApi\n     */\n    public apiV1AbonnementAbonnementIdPut(abonnementId: number, editAbonnement?: EditAbonnement, options?: AxiosRequestConfig) {\n        return AbonnementApiFp(this.configuration).apiV1AbonnementAbonnementIdPut(abonnementId, editAbonnement, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Возвращает список абониментов\n     * @param {number} pageSize \n     * @param {number} pageNumber \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AbonnementApi\n     */\n    public apiV1AbonnementGet(pageSize: number, pageNumber: number, options?: AxiosRequestConfig) {\n        return AbonnementApiFp(this.configuration).apiV1AbonnementGet(pageSize, pageNumber, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Создает новый абонимент\n     * @param {CreateAbonnement} [createAbonnement] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AbonnementApi\n     */\n    public apiV1AbonnementPost(createAbonnement?: CreateAbonnement, options?: AxiosRequestConfig) {\n        return AbonnementApiFp(this.configuration).apiV1AbonnementPost(createAbonnement, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Возвращает список купленных абониментов пользователя\n     * @param {number} personId \n     * @param {number} pageSize \n     * @param {number} pageNumber \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AbonnementApi\n     */\n    public apiV1AbonnementSoldPersonIdGet(personId: number, pageSize: number, pageNumber: number, options?: AxiosRequestConfig) {\n        return AbonnementApiFp(this.configuration).apiV1AbonnementSoldPersonIdGet(personId, pageSize, pageNumber, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Продажа абонимента\n     * @param {SaleAbonnement} [saleAbonnement] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AbonnementApi\n     */\n    public apiV1AbonnementSoldPost(saleAbonnement?: SaleAbonnement, options?: AxiosRequestConfig) {\n        return AbonnementApiFp(this.configuration).apiV1AbonnementSoldPost(saleAbonnement, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n\n/**\n * AuthApi - axios parameter creator\n * @export\n */\nexport const AuthApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @summary Активация созданного пользователя\n         * @param {ActivateAuth} [activateAuth] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1AuthActivatePost: async (activateAuth?: ActivateAuth, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/v1/auth/activate`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(activateAuth, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Авторизация пользователя\n         * @param {LoginUser} [loginUser] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1AuthLoginPost: async (loginUser?: LoginUser, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/v1/auth/login`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(loginUser, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Смена пароля на основе токена отправленного на почту\n         * @param {PasswordReset} [passwordReset] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1AuthPasswordResetPost: async (passwordReset?: PasswordReset, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/v1/auth/password-reset`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(passwordReset, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Запрос на смену пароля\n         * @param {PasswordResetQuery} [passwordResetQuery] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1AuthPasswordResetQueryPost: async (passwordResetQuery?: PasswordResetQuery, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/v1/auth/password-reset-query`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(passwordResetQuery, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Создание аккаунта для пользователя\n         * @param {number} personId \n         * @param {CreateAuth} [createAuth] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1AuthPersonIdPost: async (personId: number, createAuth?: CreateAuth, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'personId' is not null or undefined\n            assertParamExists('apiV1AuthPersonIdPost', 'personId', personId)\n            const localVarPath = `/api/v1/auth/{personId}`\n                .replace(`{${\"personId\"}}`, encodeURIComponent(String(personId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            await setApiKeyToObject(localVarHeaderParameter, \"Authorization\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(createAuth, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Получение нового token с помощью refresh token\n         * @param {Refresh} [refresh] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1AuthRefreshPost: async (refresh?: Refresh, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/v1/auth/refresh`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(refresh, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * AuthApi - functional programming interface\n * @export\n */\nexport const AuthApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * \n         * @summary Активация созданного пользователя\n         * @param {ActivateAuth} [activateAuth] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiV1AuthActivatePost(activateAuth?: ActivateAuth, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultUnit>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AuthActivatePost(activateAuth, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Авторизация пользователя\n         * @param {LoginUser} [loginUser] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiV1AuthLoginPost(loginUser?: LoginUser, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultLoggedPerson>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AuthLoginPost(loginUser, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Смена пароля на основе токена отправленного на почту\n         * @param {PasswordReset} [passwordReset] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiV1AuthPasswordResetPost(passwordReset?: PasswordReset, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultUnit>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AuthPasswordResetPost(passwordReset, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Запрос на смену пароля\n         * @param {PasswordResetQuery} [passwordResetQuery] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiV1AuthPasswordResetQueryPost(passwordResetQuery?: PasswordResetQuery, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultUnit>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AuthPasswordResetQueryPost(passwordResetQuery, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Создание аккаунта для пользователя\n         * @param {number} personId \n         * @param {CreateAuth} [createAuth] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiV1AuthPersonIdPost(personId: number, createAuth?: CreateAuth, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultUnit>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AuthPersonIdPost(personId, createAuth, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Получение нового token с помощью refresh token\n         * @param {Refresh} [refresh] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiV1AuthRefreshPost(refresh?: Refresh, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultLoggedPerson>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AuthRefreshPost(refresh, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    }\n};\n\n/**\n * AuthApi - factory interface\n * @export\n */\nexport const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = AuthApiFp(configuration)\n    return {\n        /**\n         * \n         * @summary Активация созданного пользователя\n         * @param {ActivateAuth} [activateAuth] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1AuthActivatePost(activateAuth?: ActivateAuth, options?: any): AxiosPromise<ResultUnit> {\n            return localVarFp.apiV1AuthActivatePost(activateAuth, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Авторизация пользователя\n         * @param {LoginUser} [loginUser] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1AuthLoginPost(loginUser?: LoginUser, options?: any): AxiosPromise<ResultLoggedPerson> {\n            return localVarFp.apiV1AuthLoginPost(loginUser, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Смена пароля на основе токена отправленного на почту\n         * @param {PasswordReset} [passwordReset] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1AuthPasswordResetPost(passwordReset?: PasswordReset, options?: any): AxiosPromise<ResultUnit> {\n            return localVarFp.apiV1AuthPasswordResetPost(passwordReset, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Запрос на смену пароля\n         * @param {PasswordResetQuery} [passwordResetQuery] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1AuthPasswordResetQueryPost(passwordResetQuery?: PasswordResetQuery, options?: any): AxiosPromise<ResultUnit> {\n            return localVarFp.apiV1AuthPasswordResetQueryPost(passwordResetQuery, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Создание аккаунта для пользователя\n         * @param {number} personId \n         * @param {CreateAuth} [createAuth] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1AuthPersonIdPost(personId: number, createAuth?: CreateAuth, options?: any): AxiosPromise<ResultUnit> {\n            return localVarFp.apiV1AuthPersonIdPost(personId, createAuth, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Получение нового token с помощью refresh token\n         * @param {Refresh} [refresh] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1AuthRefreshPost(refresh?: Refresh, options?: any): AxiosPromise<ResultLoggedPerson> {\n            return localVarFp.apiV1AuthRefreshPost(refresh, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * AuthApi - object-oriented interface\n * @export\n * @class AuthApi\n * @extends {BaseAPI}\n */\nexport class AuthApi extends BaseAPI {\n    /**\n     * \n     * @summary Активация созданного пользователя\n     * @param {ActivateAuth} [activateAuth] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AuthApi\n     */\n    public apiV1AuthActivatePost(activateAuth?: ActivateAuth, options?: AxiosRequestConfig) {\n        return AuthApiFp(this.configuration).apiV1AuthActivatePost(activateAuth, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Авторизация пользователя\n     * @param {LoginUser} [loginUser] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AuthApi\n     */\n    public apiV1AuthLoginPost(loginUser?: LoginUser, options?: AxiosRequestConfig) {\n        return AuthApiFp(this.configuration).apiV1AuthLoginPost(loginUser, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Смена пароля на основе токена отправленного на почту\n     * @param {PasswordReset} [passwordReset] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AuthApi\n     */\n    public apiV1AuthPasswordResetPost(passwordReset?: PasswordReset, options?: AxiosRequestConfig) {\n        return AuthApiFp(this.configuration).apiV1AuthPasswordResetPost(passwordReset, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Запрос на смену пароля\n     * @param {PasswordResetQuery} [passwordResetQuery] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AuthApi\n     */\n    public apiV1AuthPasswordResetQueryPost(passwordResetQuery?: PasswordResetQuery, options?: AxiosRequestConfig) {\n        return AuthApiFp(this.configuration).apiV1AuthPasswordResetQueryPost(passwordResetQuery, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Создание аккаунта для пользователя\n     * @param {number} personId \n     * @param {CreateAuth} [createAuth] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AuthApi\n     */\n    public apiV1AuthPersonIdPost(personId: number, createAuth?: CreateAuth, options?: AxiosRequestConfig) {\n        return AuthApiFp(this.configuration).apiV1AuthPersonIdPost(personId, createAuth, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Получение нового token с помощью refresh token\n     * @param {Refresh} [refresh] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AuthApi\n     */\n    public apiV1AuthRefreshPost(refresh?: Refresh, options?: AxiosRequestConfig) {\n        return AuthApiFp(this.configuration).apiV1AuthRefreshPost(refresh, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n\n/**\n * LessonApi - axios parameter creator\n * @export\n */\nexport const LessonApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @summary Возвращает список занятий\n         * @param {number} pageSize \n         * @param {number} pageNumber \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1LessonGet: async (pageSize: number, pageNumber: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'pageSize' is not null or undefined\n            assertParamExists('apiV1LessonGet', 'pageSize', pageSize)\n            // verify required parameter 'pageNumber' is not null or undefined\n            assertParamExists('apiV1LessonGet', 'pageNumber', pageNumber)\n            const localVarPath = `/api/v1/lesson`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            await setApiKeyToObject(localVarHeaderParameter, \"Authorization\", configuration)\n\n            if (pageSize !== undefined) {\n                localVarQueryParameter['pageSize'] = pageSize;\n            }\n\n            if (pageNumber !== undefined) {\n                localVarQueryParameter['pageNumber'] = pageNumber;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Обновляет данные занятия\n         * @param {number} lessonId \n         * @param {EditLesson} [editLesson] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1LessonLessonIdPut: async (lessonId: number, editLesson?: EditLesson, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'lessonId' is not null or undefined\n            assertParamExists('apiV1LessonLessonIdPut', 'lessonId', lessonId)\n            const localVarPath = `/api/v1/lesson/{lessonId}`\n                .replace(`{${\"lessonId\"}}`, encodeURIComponent(String(lessonId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            await setApiKeyToObject(localVarHeaderParameter, \"Authorization\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(editLesson, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Создает новое занятие\n         * @param {CreateLesson} [createLesson] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1LessonPost: async (createLesson?: CreateLesson, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/v1/lesson`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            await setApiKeyToObject(localVarHeaderParameter, \"Authorization\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(createLesson, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * LessonApi - functional programming interface\n * @export\n */\nexport const LessonApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = LessonApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * \n         * @summary Возвращает список занятий\n         * @param {number} pageSize \n         * @param {number} pageNumber \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiV1LessonGet(pageSize: number, pageNumber: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultPaginatedLesson>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1LessonGet(pageSize, pageNumber, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Обновляет данные занятия\n         * @param {number} lessonId \n         * @param {EditLesson} [editLesson] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiV1LessonLessonIdPut(lessonId: number, editLesson?: EditLesson, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultLesson>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1LessonLessonIdPut(lessonId, editLesson, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Создает новое занятие\n         * @param {CreateLesson} [createLesson] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiV1LessonPost(createLesson?: CreateLesson, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultLesson>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1LessonPost(createLesson, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    }\n};\n\n/**\n * LessonApi - factory interface\n * @export\n */\nexport const LessonApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = LessonApiFp(configuration)\n    return {\n        /**\n         * \n         * @summary Возвращает список занятий\n         * @param {number} pageSize \n         * @param {number} pageNumber \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1LessonGet(pageSize: number, pageNumber: number, options?: any): AxiosPromise<ResultPaginatedLesson> {\n            return localVarFp.apiV1LessonGet(pageSize, pageNumber, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Обновляет данные занятия\n         * @param {number} lessonId \n         * @param {EditLesson} [editLesson] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1LessonLessonIdPut(lessonId: number, editLesson?: EditLesson, options?: any): AxiosPromise<ResultLesson> {\n            return localVarFp.apiV1LessonLessonIdPut(lessonId, editLesson, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Создает новое занятие\n         * @param {CreateLesson} [createLesson] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1LessonPost(createLesson?: CreateLesson, options?: any): AxiosPromise<ResultLesson> {\n            return localVarFp.apiV1LessonPost(createLesson, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * LessonApi - object-oriented interface\n * @export\n * @class LessonApi\n * @extends {BaseAPI}\n */\nexport class LessonApi extends BaseAPI {\n    /**\n     * \n     * @summary Возвращает список занятий\n     * @param {number} pageSize \n     * @param {number} pageNumber \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof LessonApi\n     */\n    public apiV1LessonGet(pageSize: number, pageNumber: number, options?: AxiosRequestConfig) {\n        return LessonApiFp(this.configuration).apiV1LessonGet(pageSize, pageNumber, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Обновляет данные занятия\n     * @param {number} lessonId \n     * @param {EditLesson} [editLesson] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof LessonApi\n     */\n    public apiV1LessonLessonIdPut(lessonId: number, editLesson?: EditLesson, options?: AxiosRequestConfig) {\n        return LessonApiFp(this.configuration).apiV1LessonLessonIdPut(lessonId, editLesson, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Создает новое занятие\n     * @param {CreateLesson} [createLesson] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof LessonApi\n     */\n    public apiV1LessonPost(createLesson?: CreateLesson, options?: AxiosRequestConfig) {\n        return LessonApiFp(this.configuration).apiV1LessonPost(createLesson, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n\n/**\n * PersonApi - axios parameter creator\n * @export\n */\nexport const PersonApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @summary Возвращает список пользователей\n         * @param {number} pageSize \n         * @param {number} pageNumber \n         * @param {PersonTypeView} [type] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1PersonGet: async (pageSize: number, pageNumber: number, type?: PersonTypeView, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'pageSize' is not null or undefined\n            assertParamExists('apiV1PersonGet', 'pageSize', pageSize)\n            // verify required parameter 'pageNumber' is not null or undefined\n            assertParamExists('apiV1PersonGet', 'pageNumber', pageNumber)\n            const localVarPath = `/api/v1/person`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            await setApiKeyToObject(localVarHeaderParameter, \"Authorization\", configuration)\n\n            if (type !== undefined) {\n                localVarQueryParameter['type'] = type;\n            }\n\n            if (pageSize !== undefined) {\n                localVarQueryParameter['pageSize'] = pageSize;\n            }\n\n            if (pageNumber !== undefined) {\n                localVarQueryParameter['pageNumber'] = pageNumber;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Возвращает пользователя по id\n         * @param {number} personId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1PersonPersonIdGet: async (personId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'personId' is not null or undefined\n            assertParamExists('apiV1PersonPersonIdGet', 'personId', personId)\n            const localVarPath = `/api/v1/person/{personId}`\n                .replace(`{${\"personId\"}}`, encodeURIComponent(String(personId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            await setApiKeyToObject(localVarHeaderParameter, \"Authorization\", configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Обновляет данные пользователя\n         * @param {number} personId \n         * @param {EditPerson} [editPerson] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1PersonPersonIdPut: async (personId: number, editPerson?: EditPerson, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'personId' is not null or undefined\n            assertParamExists('apiV1PersonPersonIdPut', 'personId', personId)\n            const localVarPath = `/api/v1/person/{personId}`\n                .replace(`{${\"personId\"}}`, encodeURIComponent(String(personId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            await setApiKeyToObject(localVarHeaderParameter, \"Authorization\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(editPerson, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Создает нового пользователя\n         * @param {CreatePerson} [createPerson] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1PersonPost: async (createPerson?: CreatePerson, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/v1/person`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            await setApiKeyToObject(localVarHeaderParameter, \"Authorization\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(createPerson, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Возвращает текущего авторизованного пользователя\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1PersonSelfGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/v1/person/self`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            await setApiKeyToObject(localVarHeaderParameter, \"Authorization\", configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * PersonApi - functional programming interface\n * @export\n */\nexport const PersonApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = PersonApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * \n         * @summary Возвращает список пользователей\n         * @param {number} pageSize \n         * @param {number} pageNumber \n         * @param {PersonTypeView} [type] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiV1PersonGet(pageSize: number, pageNumber: number, type?: PersonTypeView, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultPaginatedPerson>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PersonGet(pageSize, pageNumber, type, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Возвращает пользователя по id\n         * @param {number} personId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiV1PersonPersonIdGet(personId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultPerson>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PersonPersonIdGet(personId, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Обновляет данные пользователя\n         * @param {number} personId \n         * @param {EditPerson} [editPerson] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiV1PersonPersonIdPut(personId: number, editPerson?: EditPerson, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultPerson>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PersonPersonIdPut(personId, editPerson, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Создает нового пользователя\n         * @param {CreatePerson} [createPerson] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiV1PersonPost(createPerson?: CreatePerson, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultPerson>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PersonPost(createPerson, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Возвращает текущего авторизованного пользователя\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiV1PersonSelfGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultPerson>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PersonSelfGet(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    }\n};\n\n/**\n * PersonApi - factory interface\n * @export\n */\nexport const PersonApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = PersonApiFp(configuration)\n    return {\n        /**\n         * \n         * @summary Возвращает список пользователей\n         * @param {number} pageSize \n         * @param {number} pageNumber \n         * @param {PersonTypeView} [type] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1PersonGet(pageSize: number, pageNumber: number, type?: PersonTypeView, options?: any): AxiosPromise<ResultPaginatedPerson> {\n            return localVarFp.apiV1PersonGet(pageSize, pageNumber, type, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Возвращает пользователя по id\n         * @param {number} personId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1PersonPersonIdGet(personId: number, options?: any): AxiosPromise<ResultPerson> {\n            return localVarFp.apiV1PersonPersonIdGet(personId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Обновляет данные пользователя\n         * @param {number} personId \n         * @param {EditPerson} [editPerson] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1PersonPersonIdPut(personId: number, editPerson?: EditPerson, options?: any): AxiosPromise<ResultPerson> {\n            return localVarFp.apiV1PersonPersonIdPut(personId, editPerson, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Создает нового пользователя\n         * @param {CreatePerson} [createPerson] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1PersonPost(createPerson?: CreatePerson, options?: any): AxiosPromise<ResultPerson> {\n            return localVarFp.apiV1PersonPost(createPerson, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Возвращает текущего авторизованного пользователя\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1PersonSelfGet(options?: any): AxiosPromise<ResultPerson> {\n            return localVarFp.apiV1PersonSelfGet(options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * PersonApi - object-oriented interface\n * @export\n * @class PersonApi\n * @extends {BaseAPI}\n */\nexport class PersonApi extends BaseAPI {\n    /**\n     * \n     * @summary Возвращает список пользователей\n     * @param {number} pageSize \n     * @param {number} pageNumber \n     * @param {PersonTypeView} [type] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PersonApi\n     */\n    public apiV1PersonGet(pageSize: number, pageNumber: number, type?: PersonTypeView, options?: AxiosRequestConfig) {\n        return PersonApiFp(this.configuration).apiV1PersonGet(pageSize, pageNumber, type, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Возвращает пользователя по id\n     * @param {number} personId \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PersonApi\n     */\n    public apiV1PersonPersonIdGet(personId: number, options?: AxiosRequestConfig) {\n        return PersonApiFp(this.configuration).apiV1PersonPersonIdGet(personId, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Обновляет данные пользователя\n     * @param {number} personId \n     * @param {EditPerson} [editPerson] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PersonApi\n     */\n    public apiV1PersonPersonIdPut(personId: number, editPerson?: EditPerson, options?: AxiosRequestConfig) {\n        return PersonApiFp(this.configuration).apiV1PersonPersonIdPut(personId, editPerson, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Создает нового пользователя\n     * @param {CreatePerson} [createPerson] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PersonApi\n     */\n    public apiV1PersonPost(createPerson?: CreatePerson, options?: AxiosRequestConfig) {\n        return PersonApiFp(this.configuration).apiV1PersonPost(createPerson, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Возвращает текущего авторизованного пользователя\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PersonApi\n     */\n    public apiV1PersonSelfGet(options?: AxiosRequestConfig) {\n        return PersonApiFp(this.configuration).apiV1PersonSelfGet(options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n\n/**\n * RoomApi - axios parameter creator\n * @export\n */\nexport const RoomApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @summary Возвращает список помещений\n         * @param {number} pageSize \n         * @param {number} pageNumber \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1RoomGet: async (pageSize: number, pageNumber: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'pageSize' is not null or undefined\n            assertParamExists('apiV1RoomGet', 'pageSize', pageSize)\n            // verify required parameter 'pageNumber' is not null or undefined\n            assertParamExists('apiV1RoomGet', 'pageNumber', pageNumber)\n            const localVarPath = `/api/v1/room`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            await setApiKeyToObject(localVarHeaderParameter, \"Authorization\", configuration)\n\n            if (pageSize !== undefined) {\n                localVarQueryParameter['pageSize'] = pageSize;\n            }\n\n            if (pageNumber !== undefined) {\n                localVarQueryParameter['pageNumber'] = pageNumber;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Создает новое помещение\n         * @param {CreateRoom} [createRoom] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1RoomPost: async (createRoom?: CreateRoom, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/v1/room`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            await setApiKeyToObject(localVarHeaderParameter, \"Authorization\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(createRoom, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Обновляет данные помещения\n         * @param {number} roomId \n         * @param {EditRoom} [editRoom] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1RoomRoomIdPut: async (roomId: number, editRoom?: EditRoom, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {\n            // verify required parameter 'roomId' is not null or undefined\n            assertParamExists('apiV1RoomRoomIdPut', 'roomId', roomId)\n            const localVarPath = `/api/v1/room/{roomId}`\n                .replace(`{${\"roomId\"}}`, encodeURIComponent(String(roomId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            await setApiKeyToObject(localVarHeaderParameter, \"Authorization\", configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(editRoom, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * RoomApi - functional programming interface\n * @export\n */\nexport const RoomApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = RoomApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * \n         * @summary Возвращает список помещений\n         * @param {number} pageSize \n         * @param {number} pageNumber \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiV1RoomGet(pageSize: number, pageNumber: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultPaginatedRoom>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1RoomGet(pageSize, pageNumber, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Создает новое помещение\n         * @param {CreateRoom} [createRoom] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiV1RoomPost(createRoom?: CreateRoom, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultRoom>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1RoomPost(createRoom, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Обновляет данные помещения\n         * @param {number} roomId \n         * @param {EditRoom} [editRoom] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiV1RoomRoomIdPut(roomId: number, editRoom?: EditRoom, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultRoom>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1RoomRoomIdPut(roomId, editRoom, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    }\n};\n\n/**\n * RoomApi - factory interface\n * @export\n */\nexport const RoomApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = RoomApiFp(configuration)\n    return {\n        /**\n         * \n         * @summary Возвращает список помещений\n         * @param {number} pageSize \n         * @param {number} pageNumber \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1RoomGet(pageSize: number, pageNumber: number, options?: any): AxiosPromise<ResultPaginatedRoom> {\n            return localVarFp.apiV1RoomGet(pageSize, pageNumber, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Создает новое помещение\n         * @param {CreateRoom} [createRoom] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1RoomPost(createRoom?: CreateRoom, options?: any): AxiosPromise<ResultRoom> {\n            return localVarFp.apiV1RoomPost(createRoom, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Обновляет данные помещения\n         * @param {number} roomId \n         * @param {EditRoom} [editRoom] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiV1RoomRoomIdPut(roomId: number, editRoom?: EditRoom, options?: any): AxiosPromise<ResultRoom> {\n            return localVarFp.apiV1RoomRoomIdPut(roomId, editRoom, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * RoomApi - object-oriented interface\n * @export\n * @class RoomApi\n * @extends {BaseAPI}\n */\nexport class RoomApi extends BaseAPI {\n    /**\n     * \n     * @summary Возвращает список помещений\n     * @param {number} pageSize \n     * @param {number} pageNumber \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof RoomApi\n     */\n    public apiV1RoomGet(pageSize: number, pageNumber: number, options?: AxiosRequestConfig) {\n        return RoomApiFp(this.configuration).apiV1RoomGet(pageSize, pageNumber, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Создает новое помещение\n     * @param {CreateRoom} [createRoom] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof RoomApi\n     */\n    public apiV1RoomPost(createRoom?: CreateRoom, options?: AxiosRequestConfig) {\n        return RoomApiFp(this.configuration).apiV1RoomPost(createRoom, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Обновляет данные помещения\n     * @param {number} roomId \n     * @param {EditRoom} [editRoom] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof RoomApi\n     */\n    public apiV1RoomRoomIdPut(roomId: number, editRoom?: EditRoom, options?: AxiosRequestConfig) {\n        return RoomApiFp(this.configuration).apiV1RoomRoomIdPut(roomId, editRoom, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Uritmix.Api\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface ConfigurationParameters {\n    apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);\n    username?: string;\n    password?: string;\n    accessToken?: string | Promise<string> | ((name?: string, scopes?: string[]) => string) | ((name?: string, scopes?: string[]) => Promise<string>);\n    basePath?: string;\n    baseOptions?: any;\n    formDataCtor?: new () => any;\n}\n\nexport class Configuration {\n    /**\n     * parameter for apiKey security\n     * @param name security name\n     * @memberof Configuration\n     */\n    apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);\n    /**\n     * parameter for basic security\n     *\n     * @type {string}\n     * @memberof Configuration\n     */\n    username?: string;\n    /**\n     * parameter for basic security\n     *\n     * @type {string}\n     * @memberof Configuration\n     */\n    password?: string;\n    /**\n     * parameter for oauth2 security\n     * @param name security name\n     * @param scopes oauth2 scope\n     * @memberof Configuration\n     */\n    accessToken?: string | Promise<string> | ((name?: string, scopes?: string[]) => string) | ((name?: string, scopes?: string[]) => Promise<string>);\n    /**\n     * override base path\n     *\n     * @type {string}\n     * @memberof Configuration\n     */\n    basePath?: string;\n    /**\n     * base options for axios calls\n     *\n     * @type {any}\n     * @memberof Configuration\n     */\n    baseOptions?: any;\n    /**\n     * The FormData constructor that will be used to create multipart form data\n     * requests. You can inject this here so that execution environments that\n     * do not support the FormData class can still run the generated client.\n     *\n     * @type {new () => FormData}\n     */\n    formDataCtor?: new () => any;\n\n    constructor(param: ConfigurationParameters = {}) {\n        this.apiKey = param.apiKey;\n        this.username = param.username;\n        this.password = param.password;\n        this.accessToken = param.accessToken;\n        this.basePath = param.basePath;\n        this.baseOptions = param.baseOptions;\n        this.formDataCtor = param.formDataCtor;\n    }\n\n    /**\n     * Check if the given MIME is a JSON MIME.\n     * JSON MIME examples:\n     *   application/json\n     *   application/json; charset=UTF8\n     *   APPLICATION/JSON\n     *   application/vnd.company+json\n     * @param mime - MIME (Multipurpose Internet Mail Extensions)\n     * @return True if the given MIME is JSON, false otherwise.\n     */\n    public isJsonMime(mime: string): boolean {\n        const jsonMime: RegExp = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');\n        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');\n    }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Uritmix.Api\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport * from \"./api\";\nexport * from \"./configuration\";\n\n","import * as api from './api';\nconst API_URL = process.env.REACT_API_URL || 'http://localhost:3000';\n\nexport namespace Api {\n    export const authApi = new api.AuthApi(\n        new api.Configuration({\n            basePath: API_URL\n        })\n    );\n\n    export const personApi = new api.PersonApi(\n        new api.Configuration({\n            basePath: API_URL\n        })\n    );\n\n    export const roomApi = new api.RoomApi(\n        new api.Configuration({\n            basePath: API_URL\n        })\n    );\n\n    export const lessonApi = new api.LessonApi(\n        new api.Configuration({\n            basePath: API_URL\n        })\n    );\n\n    export const abonnementApi = new api.AbonnementApi(\n        new api.Configuration({\n            basePath: API_URL\n        })\n    );\n}\n\nexport * as dto from './api';"],"names":["BASE_PATH","replace","BaseAPI","configuration","basePath","axios","globalAxios","RequiredError","field","msg","Error","DUMMY_BASE_URL","assertParamExists","functionName","paramName","paramValue","undefined","setApiKeyToObject","object","keyParamName","apiKey","localVarApiKeyValue","setSearchParams","url","searchParams","URLSearchParams","search","objects","key","Array","isArray","item","append","set","toString","serializeDataIfNeeded","value","requestOptions","nonString","needsSerialization","isJsonMime","headers","JSON","stringify","toPathString","pathname","hash","createRequestFunction","axiosArgs","axiosRequestArgs","options","request","AbonnementValidityView","OneDay","OneMonth","ThreeMonths","HalfYear","Year","AuthRoleView","Manager","Admin","Server","AuthStatusView","NotActivated","Activated","Blocked","DiscountView","D0","D5","D10","D15","D20","D25","D30","D40","D50","D60","D70","D80","D90","PersonTypeView","All","Trainer","Account","AbonnementApiAxiosParamCreator","apiV1AbonnementAbonnementIdPut","abonnementId","editAbonnement","localVarPath","encodeURIComponent","String","localVarUrlObj","URL","baseOptions","localVarRequestOptions","method","localVarHeaderParameter","localVarQueryParameter","headersFromBaseOptions","data","apiV1AbonnementGet","pageSize","pageNumber","apiV1AbonnementPost","createAbonnement","apiV1AbonnementSoldPersonIdGet","personId","apiV1AbonnementSoldPost","saleAbonnement","AbonnementApiFp","localVarAxiosParamCreator","localVarAxiosArgs","AbonnementApiFactory","localVarFp","then","AbonnementApi","AuthApiAxiosParamCreator","apiV1AuthActivatePost","activateAuth","apiV1AuthLoginPost","loginUser","apiV1AuthPasswordResetPost","passwordReset","apiV1AuthPasswordResetQueryPost","passwordResetQuery","apiV1AuthPersonIdPost","createAuth","apiV1AuthRefreshPost","refresh","AuthApiFp","AuthApiFactory","AuthApi","LessonApiAxiosParamCreator","apiV1LessonGet","apiV1LessonLessonIdPut","lessonId","editLesson","apiV1LessonPost","createLesson","LessonApiFp","LessonApiFactory","LessonApi","PersonApiAxiosParamCreator","apiV1PersonGet","type","apiV1PersonPersonIdGet","apiV1PersonPersonIdPut","editPerson","apiV1PersonPost","createPerson","apiV1PersonSelfGet","PersonApiFp","PersonApiFactory","PersonApi","RoomApiAxiosParamCreator","apiV1RoomGet","apiV1RoomPost","createRoom","apiV1RoomRoomIdPut","roomId","editRoom","RoomApiFp","RoomApiFactory","RoomApi","Configuration","param","username","password","accessToken","formDataCtor","mime","jsonMime","RegExp","test","toLowerCase","API_URL","process","env","REACT_API_URL","Api","api"],"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"}